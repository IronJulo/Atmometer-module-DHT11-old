
STM32C031F6P6_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001bc8  08001bc8  00002bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c08  08001c08  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c08  08001c08  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c08  08001c08  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c08  08001c08  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c0c  08001c0c  00002c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001c10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001c1c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001c1c  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082ca  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b1  00000000  00000000  0000b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0000c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000785  00000000  00000000  0000d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128be  00000000  00000000  0000daed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aee1  00000000  00000000  000203ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007690f  00000000  00000000  0002b28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1b9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022ec  00000000  00000000  000a1be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000a3ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bb0 	.word	0x08001bb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001bb0 	.word	0x08001bb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e04      	subs	r4, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 f83d 	bl	80002a4 <__clzsi2>
 800022a:	239e      	movs	r3, #158	@ 0x9e
 800022c:	0001      	movs	r1, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	@ 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	d02f      	beq.n	8000298 <__aeabi_ui2f+0x78>
 8000238:	3908      	subs	r1, #8
 800023a:	408c      	lsls	r4, r1
 800023c:	0264      	lsls	r4, r4, #9
 800023e:	0a64      	lsrs	r4, r4, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2400      	movs	r4, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4320      	orrs	r0, r4
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	@ 0x99
 8000250:	dc16      	bgt.n	8000280 <__aeabi_ui2f+0x60>
 8000252:	1f42      	subs	r2, r0, #5
 8000254:	2805      	cmp	r0, #5
 8000256:	d000      	beq.n	800025a <__aeabi_ui2f+0x3a>
 8000258:	4094      	lsls	r4, r2
 800025a:	0022      	movs	r2, r4
 800025c:	4810      	ldr	r0, [pc, #64]	@ (80002a0 <__aeabi_ui2f+0x80>)
 800025e:	4002      	ands	r2, r0
 8000260:	0765      	lsls	r5, r4, #29
 8000262:	d009      	beq.n	8000278 <__aeabi_ui2f+0x58>
 8000264:	250f      	movs	r5, #15
 8000266:	402c      	ands	r4, r5
 8000268:	2c04      	cmp	r4, #4
 800026a:	d005      	beq.n	8000278 <__aeabi_ui2f+0x58>
 800026c:	3204      	adds	r2, #4
 800026e:	0154      	lsls	r4, r2, #5
 8000270:	d502      	bpl.n	8000278 <__aeabi_ui2f+0x58>
 8000272:	239f      	movs	r3, #159	@ 0x9f
 8000274:	4002      	ands	r2, r0
 8000276:	1a5b      	subs	r3, r3, r1
 8000278:	0192      	lsls	r2, r2, #6
 800027a:	0a54      	lsrs	r4, r2, #9
 800027c:	b2d8      	uxtb	r0, r3
 800027e:	e7e3      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000280:	0002      	movs	r2, r0
 8000282:	0020      	movs	r0, r4
 8000284:	321b      	adds	r2, #27
 8000286:	4090      	lsls	r0, r2
 8000288:	0002      	movs	r2, r0
 800028a:	1e50      	subs	r0, r2, #1
 800028c:	4182      	sbcs	r2, r0
 800028e:	2005      	movs	r0, #5
 8000290:	1a40      	subs	r0, r0, r1
 8000292:	40c4      	lsrs	r4, r0
 8000294:	4314      	orrs	r4, r2
 8000296:	e7e0      	b.n	800025a <__aeabi_ui2f+0x3a>
 8000298:	0264      	lsls	r4, r4, #9
 800029a:	2096      	movs	r0, #150	@ 0x96
 800029c:	0a64      	lsrs	r4, r4, #9
 800029e:	e7d3      	b.n	8000248 <__aeabi_ui2f+0x28>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__clzsi2>:
 80002a4:	211c      	movs	r1, #28
 80002a6:	2301      	movs	r3, #1
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d301      	bcc.n	80002b2 <__clzsi2+0xe>
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	3910      	subs	r1, #16
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d301      	bcc.n	80002bc <__clzsi2+0x18>
 80002b8:	0a00      	lsrs	r0, r0, #8
 80002ba:	3908      	subs	r1, #8
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	4298      	cmp	r0, r3
 80002c0:	d301      	bcc.n	80002c6 <__clzsi2+0x22>
 80002c2:	0900      	lsrs	r0, r0, #4
 80002c4:	3904      	subs	r1, #4
 80002c6:	a202      	add	r2, pc, #8	@ (adr r2, 80002d0 <__clzsi2+0x2c>)
 80002c8:	5c10      	ldrb	r0, [r2, r0]
 80002ca:	1840      	adds	r0, r0, r1
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	02020304 	.word	0x02020304
 80002d4:	01010101 	.word	0x01010101
	...

080002e0 <Set_Pin_Output>:
 */

#include "DHT11.h"

void Set_Pin_Output(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b089      	sub	sp, #36	@ 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	000a      	movs	r2, r1
 80002ea:	1cbb      	adds	r3, r7, #2
 80002ec:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	240c      	movs	r4, #12
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2314      	movs	r3, #20
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f001 fc2d 	bl	8001b58 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 80002fe:	1cbb      	adds	r3, r7, #2
 8000300:	881a      	ldrh	r2, [r3, #0]
 8000302:	0021      	movs	r1, r4
 8000304:	187b      	adds	r3, r7, r1
 8000306:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800031a:	187a      	adds	r2, r7, r1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fc5f 	bl	8000be4 <HAL_GPIO_Init>
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b009      	add	sp, #36	@ 0x24
 800032c:	bd90      	pop	{r4, r7, pc}

0800032e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 800032e:	b590      	push	{r4, r7, lr}
 8000330:	b089      	sub	sp, #36	@ 0x24
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	000a      	movs	r2, r1
 8000338:	1cbb      	adds	r3, r7, #2
 800033a:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033c:	240c      	movs	r4, #12
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	2314      	movs	r3, #20
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f001 fc06 	bl	8001b58 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 800034c:	1cbb      	adds	r3, r7, #2
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	193b      	adds	r3, r7, r4
 8000352:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000360:	193a      	adds	r2, r7, r4
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fc3c 	bl	8000be4 <HAL_GPIO_Init>
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b009      	add	sp, #36	@ 0x24
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <DHT11_Start>:

void DHT11_Start(DHT11_data *data)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	Set_Pin_Output(data->GPIO_Port, data->GPIO_Pin);        // set the pin as output
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	889b      	ldrh	r3, [r3, #4]
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f7ff ffaa 	bl	80002e0 <Set_Pin_Output>
	HAL_GPIO_WritePin(data->GPIO_Port, data->GPIO_Pin, 0);  // pull the pin low
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6818      	ldr	r0, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	889b      	ldrh	r3, [r3, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	0019      	movs	r1, r3
 8000398:	f000 fdb3 	bl	8000f02 <HAL_GPIO_WritePin>
	microsecond_delay(18000);                               // wait for 18ms
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <DHT11_Start+0x60>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fa18 	bl	80007d4 <microsecond_delay>
	HAL_GPIO_WritePin (data->GPIO_Port, data->GPIO_Pin, 1); // pull the pin high
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	2201      	movs	r2, #1
 80003ae:	0019      	movs	r1, r3
 80003b0:	f000 fda7 	bl	8000f02 <HAL_GPIO_WritePin>
	microsecond_delay(20);
 80003b4:	2014      	movs	r0, #20
 80003b6:	f000 fa0d 	bl	80007d4 <microsecond_delay>
	Set_Pin_Input(data->GPIO_Port, data->GPIO_Pin);         // set as input
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	889b      	ldrh	r3, [r3, #4]
 80003c2:	0019      	movs	r1, r3
 80003c4:	0010      	movs	r0, r2
 80003c6:	f7ff ffb2 	bl	800032e <Set_Pin_Input>
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	00004650 	.word	0x00004650

080003d8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(DHT11_data *data)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80003e0:	240f      	movs	r4, #15
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
	microsecond_delay(40);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f000 f9f3 	bl	80007d4 <microsecond_delay>
	if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	889b      	ldrh	r3, [r3, #4]
 80003f6:	0019      	movs	r1, r3
 80003f8:	0010      	movs	r0, r2
 80003fa:	f000 fd65 	bl	8000ec8 <HAL_GPIO_ReadPin>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d114      	bne.n	800042c <DHT11_Check_Response+0x54>
	{
		microsecond_delay(80);
 8000402:	2050      	movs	r0, #80	@ 0x50
 8000404:	f000 f9e6 	bl	80007d4 <microsecond_delay>
		if ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin))) Response = 1;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	889b      	ldrh	r3, [r3, #4]
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f000 fd58 	bl	8000ec8 <HAL_GPIO_ReadPin>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d003      	beq.n	8000424 <DHT11_Check_Response+0x4c>
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e003      	b.n	800042c <DHT11_Check_Response+0x54>
		else Response = -1;
 8000424:	230f      	movs	r3, #15
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	22ff      	movs	r2, #255	@ 0xff
 800042a:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go low
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	889b      	ldrh	r3, [r3, #4]
 8000436:	0019      	movs	r1, r3
 8000438:	0010      	movs	r0, r2
 800043a:	f000 fd45 	bl	8000ec8 <HAL_GPIO_ReadPin>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d1f5      	bne.n	800042e <DHT11_Check_Response+0x56>

	return Response;
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	781b      	ldrb	r3, [r3, #0]
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b005      	add	sp, #20
 800044e:	bd90      	pop	{r4, r7, pc}

08000450 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_data *data)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000458:	230e      	movs	r3, #14
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e04d      	b.n	80004fe <DHT11_Read+0xae>
	{
		while (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go high
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	889b      	ldrh	r3, [r3, #4]
 800046c:	0019      	movs	r1, r3
 800046e:	0010      	movs	r0, r2
 8000470:	f000 fd2a 	bl	8000ec8 <HAL_GPIO_ReadPin>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d0f5      	beq.n	8000464 <DHT11_Read+0x14>
		microsecond_delay(40);   // wait for 40 us
 8000478:	2028      	movs	r0, #40	@ 0x28
 800047a:	f000 f9ab 	bl	80007d4 <microsecond_delay>
		if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))   // if the pin is low
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	889b      	ldrh	r3, [r3, #4]
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f000 fd1d 	bl	8000ec8 <HAL_GPIO_ReadPin>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d113      	bne.n	80004ba <DHT11_Read+0x6a>
		{
			i&= ~(1<<(7-j));   // write 0
 8000492:	230e      	movs	r3, #14
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2207      	movs	r2, #7
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	2201      	movs	r2, #1
 800049e:	409a      	lsls	r2, r3
 80004a0:	0013      	movs	r3, r2
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	210f      	movs	r1, #15
 80004aa:	187a      	adds	r2, r7, r1
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	b252      	sxtb	r2, r2
 80004b0:	4013      	ands	r3, r2
 80004b2:	b25a      	sxtb	r2, r3
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e010      	b.n	80004dc <DHT11_Read+0x8c>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80004ba:	230e      	movs	r3, #14
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2207      	movs	r2, #7
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	2201      	movs	r2, #1
 80004c6:	409a      	lsls	r2, r3
 80004c8:	0013      	movs	r3, r2
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	210f      	movs	r1, #15
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));  // wait for the pin to go low
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 fced 	bl	8000ec8 <HAL_GPIO_ReadPin>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d1f5      	bne.n	80004de <DHT11_Read+0x8e>
	for (j=0;j<8;j++)
 80004f2:	210e      	movs	r1, #14
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	3201      	adds	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	230e      	movs	r3, #14
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d9ac      	bls.n	8000462 <DHT11_Read+0x12>
	}
	return i;
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
}
 800050e:	0018      	movs	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	b004      	add	sp, #16
 8000514:	bd80      	pop	{r7, pc}

08000516 <DHT_GetData>:

void DHT_GetData(DHT11_data *data)
{
 8000516:	b5b0      	push	{r4, r5, r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
    DHT11_Start (data);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ff27 	bl	8000374 <DHT11_Start>
    uint8_t presence = DHT11_Check_Response (data);
 8000526:	230f      	movs	r3, #15
 8000528:	18fc      	adds	r4, r7, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff ff53 	bl	80003d8 <DHT11_Check_Response>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]

	data->int_humidity = DHT11_Read (data);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff89 	bl	8000450 <DHT11_Read>
 800053e:	0003      	movs	r3, r0
 8000540:	001a      	movs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	719a      	strb	r2, [r3, #6]
	data->dec_humidity = DHT11_Read (data);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff ff81 	bl	8000450 <DHT11_Read>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	71da      	strb	r2, [r3, #7]
	data->int_temperature = DHT11_Read (data);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff79 	bl	8000450 <DHT11_Read>
 800055e:	0003      	movs	r3, r0
 8000560:	001a      	movs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	721a      	strb	r2, [r3, #8]
	data->dec_temperature = DHT11_Read (data);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff71 	bl	8000450 <DHT11_Read>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	725a      	strb	r2, [r3, #9]

	uint8_t checksum = DHT11_Read(data);
 8000576:	250e      	movs	r5, #14
 8000578:	197c      	adds	r4, r7, r5
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff67 	bl	8000450 <DHT11_Read>
 8000582:	0003      	movs	r3, r0
 8000584:	7023      	strb	r3, [r4, #0]

	if (checksum == (data->int_humidity + data->dec_humidity + data->int_temperature + data->dec_temperature))
 8000586:	197b      	adds	r3, r7, r5
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	0019      	movs	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	7a09      	ldrb	r1, [r1, #8]
 800059a:	185b      	adds	r3, r3, r1
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	7a49      	ldrb	r1, [r1, #9]
 80005a0:	185b      	adds	r3, r3, r1
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d10f      	bne.n	80005c6 <DHT_GetData+0xb0>
	{
		data->temperature = data->int_temperature;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7a1b      	ldrb	r3, [r3, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe38 	bl	8000220 <__aeabi_ui2f>
 80005b0:	1c02      	adds	r2, r0, #0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]
		data->humidity = data->int_humidity;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe30 	bl	8000220 <__aeabi_ui2f>
 80005c0:	1c02      	adds	r2, r0, #0
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
	}
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	data.GPIO_Pin = DHT11_Data_Pin;
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <main+0x4c>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	809a      	strh	r2, [r3, #4]
	data.GPIO_Port = DHT11_Data_GPIO_Port;
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <main+0x4c>)
 80005dc:	22a0      	movs	r2, #160	@ 0xa0
 80005de:	05d2      	lsls	r2, r2, #23
 80005e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 f9aa 	bl	800093a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f81f 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8bd 	bl	8000768 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005ee:	f000 f85f 	bl	80006b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <main+0x50>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f829 	bl	800164c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	counter_glob++;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <main+0x54>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <main+0x54>)
 8000602:	601a      	str	r2, [r3, #0]
	DHT_GetData(&data);
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <main+0x4c>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff85 	bl	8000516 <DHT_GetData>

	HAL_Delay(1000);
 800060c:	23fa      	movs	r3, #250	@ 0xfa
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fa0f 	bl	8000a34 <HAL_Delay>
	counter_glob++;
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	e7ef      	b.n	80005fa <main+0x2a>
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	20000074 	.word	0x20000074
 8000620:	20000028 	.word	0x20000028
 8000624:	20000088 	.word	0x20000088

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b08d      	sub	sp, #52	@ 0x34
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	2414      	movs	r4, #20
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	231c      	movs	r3, #28
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f001 fa8d 	bl	8001b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f001 fa86 	bl	8001b58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2202      	movs	r2, #2
 8000650:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	0152      	lsls	r2, r2, #5
 8000660:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2240      	movs	r2, #64	@ 0x40
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fc66 	bl	8000f3c <HAL_RCC_OscConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000674:	f000 f8c8 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	003b      	movs	r3, r7
 800067a:	2207      	movs	r2, #7
 800067c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800067e:	003b      	movs	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	003b      	movs	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800068a:	003b      	movs	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000690:	003b      	movs	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000696:	003b      	movs	r3, r7
 8000698:	2100      	movs	r1, #0
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fe32 	bl	8001304 <HAL_RCC_ClockConfig>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a4:	f000 f8b0 	bl	8000808 <Error_Handler>
  }
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b00d      	add	sp, #52	@ 0x34
 80006ae:	bd90      	pop	{r4, r7, pc}

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	2310      	movs	r3, #16
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	2310      	movs	r3, #16
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f001 fa49 	bl	8001b58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	230c      	movs	r3, #12
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f001 fa42 	bl	8001b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d4:	4b21      	ldr	r3, [pc, #132]	@ (800075c <MX_TIM1_Init+0xac>)
 80006d6:	4a22      	ldr	r2, [pc, #136]	@ (8000760 <MX_TIM1_Init+0xb0>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PRESCALER;
 80006da:	4b20      	ldr	r3, [pc, #128]	@ (800075c <MX_TIM1_Init+0xac>)
 80006dc:	220c      	movs	r2, #12
 80006de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <MX_TIM1_Init+0xac>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_TIM1_Init+0xac>)
 80006e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000764 <MX_TIM1_Init+0xb4>)
 80006ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_TIM1_Init+0xac>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_TIM1_Init+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_TIM1_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_TIM1_Init+0xac>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 ff4b 	bl	800159c <HAL_TIM_Base_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800070a:	f000 f87d 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070e:	2110      	movs	r1, #16
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0152      	lsls	r2, r2, #5
 8000716:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000718:	187a      	adds	r2, r7, r1
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_TIM1_Init+0xac>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f000 ffda 	bl	80016d8 <HAL_TIM_ConfigClockSource>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000728:	f000 f86e 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073e:	1d3a      	adds	r2, r7, #4
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_TIM1_Init+0xac>)
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f001 f9a5 	bl	8001a94 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800074e:	f000 f85b 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b008      	add	sp, #32
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	20000028 	.word	0x20000028
 8000760:	40012c00 	.word	0x40012c00
 8000764:	0000ffff 	.word	0x0000ffff

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	2314      	movs	r3, #20
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f001 f9ee 	bl	8001b58 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_GPIO_Init+0x68>)
 800077e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_GPIO_Init+0x68>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	635a      	str	r2, [r3, #52]	@ 0x34
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_GPIO_Init+0x68>)
 800078a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800078c:	2201      	movs	r2, #1
 800078e:	4013      	ands	r3, r2
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_Data_GPIO_Port, DHT11_Data_Pin, GPIO_PIN_RESET);
 8000794:	23a0      	movs	r3, #160	@ 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fbb0 	bl	8000f02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Data_Pin */
  GPIO_InitStruct.Pin = DHT11_Data_Pin;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2201      	movs	r2, #1
 80007ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_Data_GPIO_Port, &GPIO_InitStruct);
 80007ba:	1d3a      	adds	r2, r7, #4
 80007bc:	23a0      	movs	r3, #160	@ 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fa0e 	bl	8000be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b006      	add	sp, #24
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000

080007d4 <microsecond_delay>:

/* USER CODE BEGIN 4 */

void microsecond_delay(uint16_t duration)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);                 // set the counter value a 0
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <microsecond_delay+0x30>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < duration); // wait for the counter to reach the us input in the parameter
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <microsecond_delay+0x30>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3f8      	bcc.n	80007ea <microsecond_delay+0x16>
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	20000028 	.word	0x20000028

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x44>)
 800081c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_MspInit+0x44>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	641a      	str	r2, [r3, #64]	@ 0x40
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x44>)
 8000834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_MspInit+0x44>)
 8000838:	2180      	movs	r1, #128	@ 0x80
 800083a:	0549      	lsls	r1, r1, #21
 800083c:	430a      	orrs	r2, r1
 800083e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_MspInit+0x44>)
 8000842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	055b      	lsls	r3, r3, #21
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <HAL_TIM_Base_MspInit+0x38>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10d      	bne.n	800088a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000874:	2180      	movs	r1, #128	@ 0x80
 8000876:	0109      	lsls	r1, r1, #4
 8000878:	430a      	orrs	r2, r1
 800087a:	641a      	str	r2, [r3, #64]	@ 0x40
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 800087e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89a 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <SystemInit+0x14>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	0512      	lsls	r2, r2, #20
 80008da:	609a      	str	r2, [r3, #8]
#endif
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fff0 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008f2:	e003      	b.n	80008fc <LoopCopyDataInit>

080008f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80008f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008fa:	3104      	adds	r1, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008fc:	480a      	ldr	r0, [pc, #40]	@ (8000928 <LoopForever+0xa>)
  ldr r3, =_edata
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <LoopForever+0xe>)
  adds r2, r0, r1
 8000900:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000902:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000904:	d3f6      	bcc.n	80008f4 <CopyDataInit>
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <LoopForever+0x12>)
  b LoopFillZerobss
 8000908:	e002      	b.n	8000910 <LoopFillZerobss>

0800090a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  str  r3, [r2]
 800090c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090e:	3204      	adds	r2, #4

08000910 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <LoopForever+0x16>)
  cmp r2, r3
 8000912:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000914:	d3f9      	bcc.n	800090a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000916:	f001 f927 	bl	8001b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fe59 	bl	80005d0 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000924:	08001c10 	.word	0x08001c10
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000934:	20000090 	.word	0x20000090

08000938 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_IRQHandler>

0800093a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f80e 	bl	8000968 <HAL_InitTick>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d003      	beq.n	8000958 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e001      	b.n	800095c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000958:	f7ff ff5c 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_InitTick+0x88>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02b      	beq.n	80009d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0x8c>)
 8000982:	681c      	ldr	r4, [r3, #0]
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <HAL_InitTick+0x88>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	23fa      	movs	r3, #250	@ 0xfa
 800098c:	0098      	lsls	r0, r3, #2
 800098e:	f7ff fbbb 	bl	8000108 <__udivsi3>
 8000992:	0003      	movs	r3, r0
 8000994:	0019      	movs	r1, r3
 8000996:	0020      	movs	r0, r4
 8000998:	f7ff fbb6 	bl	8000108 <__udivsi3>
 800099c:	0003      	movs	r3, r0
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f913 	bl	8000bca <HAL_SYSTICK_Config>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d112      	bne.n	80009ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d80a      	bhi.n	80009c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	2301      	movs	r3, #1
 80009b2:	425b      	negs	r3, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f8f2 	bl	8000ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_InitTick+0x90>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e00d      	b.n	80009e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e008      	b.n	80009e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	230f      	movs	r3, #15
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e003      	b.n	80009e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d8:	230f      	movs	r3, #15
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b005      	add	sp, #20
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001a      	movs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	@ 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	@ 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	@ (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	@ 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	@ 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ffbf 	bl	8000b58 <SysTick_Config>
 8000bda:	0003      	movs	r3, r0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bf2:	e153      	b.n	8000e9c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	000a      	movs	r2, r1
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d100      	bne.n	8000c0c <HAL_GPIO_Init+0x28>
 8000c0a:	e144      	b.n	8000e96 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x38>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b12      	cmp	r3, #18
 8000c1a:	d125      	bne.n	8000c68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	58d3      	ldr	r3, [r2, r3]
 8000c28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	4013      	ands	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	220f      	movs	r2, #15
 8000c46:	401a      	ands	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2107      	movs	r1, #7
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	6979      	ldr	r1, [r7, #20]
 8000c66:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	43da      	mvns	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	401a      	ands	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d00b      	beq.n	8000cbc <HAL_GPIO_Init+0xd8>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb0:	2b11      	cmp	r3, #17
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b12      	cmp	r3, #18
 8000cba:	d130      	bne.n	8000d1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	43da      	mvns	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	0013      	movs	r3, r2
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	2201      	movs	r2, #1
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d017      	beq.n	8000d56 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	055b      	lsls	r3, r3, #21
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x180>
 8000d62:	e098      	b.n	8000e96 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d64:	4a53      	ldr	r2, [pc, #332]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	589b      	ldr	r3, [r3, r2]
 8000d70:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4013      	ands	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	43da      	mvns	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x1e2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a48      	ldr	r2, [pc, #288]	@ (8000eb8 <HAL_GPIO_Init+0x2d4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x1de>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a47      	ldr	r2, [pc, #284]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x1da>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a46      	ldr	r2, [pc, #280]	@ (8000ec0 <HAL_GPIO_Init+0x2dc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x1d6>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a45      	ldr	r2, [pc, #276]	@ (8000ec4 <HAL_GPIO_Init+0x2e0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x1d2>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e008      	b.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	2103      	movs	r1, #3
 8000dcc:	400a      	ands	r2, r1
 8000dce:	00d2      	lsls	r2, r2, #3
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000dd8:	4936      	ldr	r1, [pc, #216]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3318      	adds	r3, #24
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000de6:	4a33      	ldr	r2, [pc, #204]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	58d3      	ldr	r3, [r2, r3]
 8000dec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000e0c:	4929      	ldr	r1, [pc, #164]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000e14:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e16:	2384      	movs	r3, #132	@ 0x84
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	4013      	ands	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	029b      	lsls	r3, r3, #10
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000e3a:	491e      	ldr	r1, [pc, #120]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	2284      	movs	r2, #132	@ 0x84
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	035b      	lsls	r3, r3, #13
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	039b      	lsls	r3, r3, #14
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2c6>
 8000ea8:	e6a4      	b.n	8000bf4 <HAL_GPIO_Init+0x10>
  }
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	50000400 	.word	0x50000400
 8000ebc:	50000800 	.word	0x50000800
 8000ec0:	50000c00 	.word	0x50000c00
 8000ec4:	50001400 	.word	0x50001400

08000ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	1cbb      	adds	r3, r7, #2
 8000ed4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	1cba      	adds	r2, r7, #2
 8000edc:	8812      	ldrh	r2, [r2, #0]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d004      	beq.n	8000eec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e003      	b.n	8000ef4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	781b      	ldrb	r3, [r3, #0]
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	0008      	movs	r0, r1
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	1cbb      	adds	r3, r7, #2
 8000f10:	1c02      	adds	r2, r0, #0
 8000f12:	801a      	strh	r2, [r3, #0]
 8000f14:	1c7b      	adds	r3, r7, #1
 8000f16:	1c0a      	adds	r2, r1, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1a:	1c7b      	adds	r3, r7, #1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f22:	1cbb      	adds	r3, r7, #2
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f2a:	e003      	b.n	8000f34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e1d0      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x1e>
 8000f58:	e069      	b.n	800102e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4bc8      	ldr	r3, [pc, #800]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2238      	movs	r2, #56	@ 0x38
 8000f60:	4013      	ands	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d105      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d15d      	bne.n	800102e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e1bc      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	025b      	lsls	r3, r3, #9
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d107      	bne.n	8000f92 <HAL_RCC_OscConfig+0x56>
 8000f82:	4bbe      	ldr	r3, [pc, #760]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4bbd      	ldr	r3, [pc, #756]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	0249      	lsls	r1, r1, #9
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e020      	b.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	23a0      	movs	r3, #160	@ 0xa0
 8000f98:	02db      	lsls	r3, r3, #11
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d10e      	bne.n	8000fbc <HAL_RCC_OscConfig+0x80>
 8000f9e:	4bb7      	ldr	r3, [pc, #732]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4bb6      	ldr	r3, [pc, #728]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fa4:	2180      	movs	r1, #128	@ 0x80
 8000fa6:	02c9      	lsls	r1, r1, #11
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	4bb3      	ldr	r3, [pc, #716]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4bb2      	ldr	r3, [pc, #712]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fb2:	2180      	movs	r1, #128	@ 0x80
 8000fb4:	0249      	lsls	r1, r1, #9
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e00b      	b.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fbc:	4baf      	ldr	r3, [pc, #700]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4bae      	ldr	r3, [pc, #696]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fc2:	49af      	ldr	r1, [pc, #700]	@ (8001280 <HAL_RCC_OscConfig+0x344>)
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	4bac      	ldr	r3, [pc, #688]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4bab      	ldr	r3, [pc, #684]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000fce:	49ad      	ldr	r1, [pc, #692]	@ (8001284 <HAL_RCC_OscConfig+0x348>)
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d014      	beq.n	8001006 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fd20 	bl	8000a20 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fd1b 	bl	8000a20 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	@ 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e17b      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff8:	4ba0      	ldr	r3, [pc, #640]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	029b      	lsls	r3, r3, #10
 8001000:	4013      	ands	r3, r2
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0xaa>
 8001004:	e013      	b.n	800102e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fd0b 	bl	8000a20 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001010:	f7ff fd06 	bl	8000a20 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	@ 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e166      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	4b96      	ldr	r3, [pc, #600]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0xfe>
 8001038:	e086      	b.n	8001148 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	4b90      	ldr	r3, [pc, #576]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12f      	bne.n	80010aa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e14c      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001056:	4b89      	ldr	r3, [pc, #548]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a8b      	ldr	r2, [pc, #556]	@ (8001288 <HAL_RCC_OscConfig+0x34c>)
 800105c:	4013      	ands	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	021a      	lsls	r2, r3, #8
 8001066:	4b85      	ldr	r3, [pc, #532]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001068:	430a      	orrs	r2, r1
 800106a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d112      	bne.n	8001098 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001072:	4b82      	ldr	r3, [pc, #520]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a85      	ldr	r2, [pc, #532]	@ (800128c <HAL_RCC_OscConfig+0x350>)
 8001078:	4013      	ands	r3, r2
 800107a:	0019      	movs	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	4b7e      	ldr	r3, [pc, #504]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001086:	4b7d      	ldr	r3, [pc, #500]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0adb      	lsrs	r3, r3, #11
 800108c:	2207      	movs	r2, #7
 800108e:	4013      	ands	r3, r2
 8001090:	4a7f      	ldr	r2, [pc, #508]	@ (8001290 <HAL_RCC_OscConfig+0x354>)
 8001092:	40da      	lsrs	r2, r3
 8001094:	4b7f      	ldr	r3, [pc, #508]	@ (8001294 <HAL_RCC_OscConfig+0x358>)
 8001096:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001098:	4b7f      	ldr	r3, [pc, #508]	@ (8001298 <HAL_RCC_OscConfig+0x35c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fc63 	bl	8000968 <HAL_InitTick>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d050      	beq.n	8001148 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e122      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d030      	beq.n	8001114 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010b2:	4b72      	ldr	r3, [pc, #456]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a75      	ldr	r2, [pc, #468]	@ (800128c <HAL_RCC_OscConfig+0x350>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	0019      	movs	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	4b6e      	ldr	r3, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80010c6:	4b6d      	ldr	r3, [pc, #436]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0049      	lsls	r1, r1, #1
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fca4 	bl	8000a20 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80010de:	f7ff fc9f 	bl	8000a20 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e0ff      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f0:	4b62      	ldr	r3, [pc, #392]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4013      	ands	r3, r2
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a61      	ldr	r2, [pc, #388]	@ (8001288 <HAL_RCC_OscConfig+0x34c>)
 8001102:	4013      	ands	r3, r2
 8001104:	0019      	movs	r1, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	021a      	lsls	r2, r3, #8
 800110c:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800110e:	430a      	orrs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	e019      	b.n	8001148 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001114:	4b59      	ldr	r3, [pc, #356]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800111a:	4960      	ldr	r1, [pc, #384]	@ (800129c <HAL_RCC_OscConfig+0x360>)
 800111c:	400a      	ands	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fc7e 	bl	8000a20 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800112a:	f7ff fc79 	bl	8000a20 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0d9      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800113c:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4013      	ands	r3, r2
 8001146:	d1f0      	bne.n	800112a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2208      	movs	r2, #8
 800114e:	4013      	ands	r3, r2
 8001150:	d042      	beq.n	80011d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001152:	4b4a      	ldr	r3, [pc, #296]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2238      	movs	r2, #56	@ 0x38
 8001158:	4013      	ands	r3, r2
 800115a:	2b18      	cmp	r3, #24
 800115c:	d105      	bne.n	800116a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d138      	bne.n	80011d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0c2      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d019      	beq.n	80011a6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001172:	4b42      	ldr	r3, [pc, #264]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001174:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fc4f 	bl	8000a20 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc4a 	bl	8000a20 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0aa      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800119a:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f1      	beq.n	8001188 <HAL_RCC_OscConfig+0x24c>
 80011a4:	e018      	b.n	80011d8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011a6:	4b35      	ldr	r3, [pc, #212]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80011a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc35 	bl	8000a20 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc30 	bl	8000a20 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e090      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d1f1      	bne.n	80011bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2204      	movs	r2, #4
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2a8>
 80011e2:	e084      	b.n	80012ee <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2238      	movs	r2, #56	@ 0x38
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d000      	beq.n	8001202 <HAL_RCC_OscConfig+0x2c6>
 8001200:	e075      	b.n	80012ee <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e074      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x2e0>
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	65da      	str	r2, [r3, #92]	@ 0x5c
 800121a:	e01c      	b.n	8001256 <HAL_RCC_OscConfig+0x31a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b05      	cmp	r3, #5
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x302>
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001226:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800122a:	2104      	movs	r1, #4
 800122c:	430a      	orrs	r2, r1
 800122e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001232:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0x31a>
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001240:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001244:	2101      	movs	r1, #1
 8001246:	438a      	bics	r2, r1
 8001248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 800124c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_RCC_OscConfig+0x340>)
 8001250:	2104      	movs	r1, #4
 8001252:	438a      	bics	r2, r1
 8001254:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d028      	beq.n	80012b0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fbdf 	bl	8000a20 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff fbda 	bl	8000a20 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <HAL_RCC_OscConfig+0x364>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d915      	bls.n	80012a4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e039      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
 800127c:	40021000 	.word	0x40021000
 8001280:	fffeffff 	.word	0xfffeffff
 8001284:	fffbffff 	.word	0xfffbffff
 8001288:	ffff80ff 	.word	0xffff80ff
 800128c:	ffffc7ff 	.word	0xffffc7ff
 8001290:	02dc6c00 	.word	0x02dc6c00
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004
 800129c:	fffffeff 	.word	0xfffffeff
 80012a0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_RCC_OscConfig+0x3bc>)
 80012a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d0dc      	beq.n	8001268 <HAL_RCC_OscConfig+0x32c>
 80012ae:	e013      	b.n	80012d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fbb6 	bl	8000a20 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80012b8:	e009      	b.n	80012ce <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fbb1 	bl	8000a20 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <HAL_RCC_OscConfig+0x3c0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e010      	b.n	80012f0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_RCC_OscConfig+0x3bc>)
 80012d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012d8:	230f      	movs	r3, #15
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d105      	bne.n	80012ee <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_OscConfig+0x3bc>)
 80012e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <HAL_RCC_OscConfig+0x3bc>)
 80012e8:	4905      	ldr	r1, [pc, #20]	@ (8001300 <HAL_RCC_OscConfig+0x3c4>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	00001388 	.word	0x00001388
 8001300:	efffffff 	.word	0xefffffff

08001304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0e9      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b76      	ldr	r3, [pc, #472]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2207      	movs	r2, #7
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d91e      	bls.n	8001364 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b73      	ldr	r3, [pc, #460]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2207      	movs	r2, #7
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001338:	f7ff fb72 	bl	8000a20 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001340:	e009      	b.n	8001356 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001342:	f7ff fb6d 	bl	8000a20 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	4a6a      	ldr	r2, [pc, #424]	@ (80014f8 <HAL_RCC_ClockConfig+0x1f4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e0ca      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001356:	4b67      	ldr	r3, [pc, #412]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2207      	movs	r2, #7
 800135c:	4013      	ands	r3, r2
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d017      	beq.n	800139e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2204      	movs	r2, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001378:	4b60      	ldr	r3, [pc, #384]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a60      	ldr	r2, [pc, #384]	@ (8001500 <HAL_RCC_ClockConfig+0x1fc>)
 800137e:	401a      	ands	r2, r3
 8001380:	4b5e      	ldr	r3, [pc, #376]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 8001382:	21b0      	movs	r1, #176	@ 0xb0
 8001384:	0109      	lsls	r1, r1, #4
 8001386:	430a      	orrs	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138a:	4b5c      	ldr	r3, [pc, #368]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4a5d      	ldr	r2, [pc, #372]	@ (8001504 <HAL_RCC_ClockConfig+0x200>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 800139a:	430a      	orrs	r2, r1
 800139c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d055      	beq.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80013a8:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	221c      	movs	r2, #28
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c4:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	029b      	lsls	r3, r3, #10
 80013cc:	4013      	ands	r3, r2
 80013ce:	d11f      	bne.n	8001410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e08b      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d107      	bne.n	80013ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013dc:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	d113      	bne.n	8001410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e07f      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013f4:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d108      	bne.n	8001410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e074      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 8001404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e06d      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2207      	movs	r2, #7
 8001416:	4393      	bics	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001424:	f7ff fafc 	bl	8000a20 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142c:	e009      	b.n	8001442 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f7ff faf7 	bl	8000a20 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <HAL_RCC_ClockConfig+0x1f4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e054      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2238      	movs	r2, #56	@ 0x38
 8001448:	401a      	ands	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	429a      	cmp	r2, r3
 8001452:	d1ec      	bne.n	800142e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2207      	movs	r2, #7
 800145a:	4013      	ands	r3, r2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d21e      	bcs.n	80014a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2207      	movs	r2, #7
 8001468:	4393      	bics	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001474:	f7ff fad4 	bl	8000a20 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800147c:	e009      	b.n	8001492 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff facf 	bl	8000a20 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <HAL_RCC_ClockConfig+0x1f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e02c      	b.n	80014ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2207      	movs	r2, #7
 8001498:	4013      	ands	r3, r2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d1ee      	bne.n	800147e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	d009      	beq.n	80014be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4a16      	ldr	r2, [pc, #88]	@ (8001508 <HAL_RCC_ClockConfig+0x204>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	f000 f82b 	bl	8001518 <HAL_RCC_GetSysClockFreq>
 80014c2:	0001      	movs	r1, r0
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	220f      	movs	r2, #15
 80014cc:	401a      	ands	r2, r3
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_RCC_ClockConfig+0x208>)
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	58d3      	ldr	r3, [r2, r3]
 80014d4:	221f      	movs	r2, #31
 80014d6:	4013      	ands	r3, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	40da      	lsrs	r2, r3
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_RCC_ClockConfig+0x20c>)
 80014de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_RCC_ClockConfig+0x210>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fa3f 	bl	8000968 <HAL_InitTick>
 80014ea:	0003      	movs	r3, r0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b004      	add	sp, #16
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40022000 	.word	0x40022000
 80014f8:	00001388 	.word	0x00001388
 80014fc:	40021000 	.word	0x40021000
 8001500:	ffff84ff 	.word	0xffff84ff
 8001504:	fffff0ff 	.word	0xfffff0ff
 8001508:	ffff8fff 	.word	0xffff8fff
 800150c:	08001bc8 	.word	0x08001bc8
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x78>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2238      	movs	r2, #56	@ 0x38
 8001524:	4013      	ands	r3, r2
 8001526:	d10f      	bne.n	8001548 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x78>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0adb      	lsrs	r3, r3, #11
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	2201      	movs	r2, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	4815      	ldr	r0, [pc, #84]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x7c>)
 800153e:	f7fe fde3 	bl	8000108 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	e01e      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x78>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2238      	movs	r2, #56	@ 0x38
 800154e:	4013      	ands	r3, r2
 8001550:	2b08      	cmp	r3, #8
 8001552:	d102      	bne.n	800155a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x80>)
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	e015      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x78>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2238      	movs	r2, #56	@ 0x38
 8001560:	4013      	ands	r3, r2
 8001562:	2b20      	cmp	r3, #32
 8001564:	d103      	bne.n	800156e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x78>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	4013      	ands	r3, r2
 8001576:	2b18      	cmp	r3, #24
 8001578:	d103      	bne.n	8001582 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800157a:	23fa      	movs	r3, #250	@ 0xfa
 800157c:	01db      	lsls	r3, r3, #7
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	e001      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	02dc6c00 	.word	0x02dc6c00
 8001598:	007a1200 	.word	0x007a1200

0800159c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e04a      	b.n	8001644 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	223d      	movs	r2, #61	@ 0x3d
 80015b2:	5c9b      	ldrb	r3, [r3, r2]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	223c      	movs	r2, #60	@ 0x3c
 80015be:	2100      	movs	r1, #0
 80015c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff f949 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223d      	movs	r2, #61	@ 0x3d
 80015ce:	2102      	movs	r1, #2
 80015d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3304      	adds	r3, #4
 80015da:	0019      	movs	r1, r3
 80015dc:	0010      	movs	r0, r2
 80015de:	f000 f951 	bl	8001884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2248      	movs	r2, #72	@ 0x48
 80015e6:	2101      	movs	r1, #1
 80015e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	223e      	movs	r2, #62	@ 0x3e
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	223f      	movs	r2, #63	@ 0x3f
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	@ 0x40
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	@ 0x41
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2242      	movs	r2, #66	@ 0x42
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2243      	movs	r2, #67	@ 0x43
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2244      	movs	r2, #68	@ 0x44
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2245      	movs	r2, #69	@ 0x45
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2246      	movs	r2, #70	@ 0x46
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2247      	movs	r2, #71	@ 0x47
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	223d      	movs	r2, #61	@ 0x3d
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	223d      	movs	r2, #61	@ 0x3d
 8001658:	5c9b      	ldrb	r3, [r3, r2]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d001      	beq.n	8001664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e02f      	b.n	80016c4 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	223d      	movs	r2, #61	@ 0x3d
 8001668:	2102      	movs	r1, #2
 800166a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <HAL_TIM_Base_Start+0x80>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d004      	beq.n	8001680 <HAL_TIM_Base_Start+0x34>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <HAL_TIM_Base_Start+0x84>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d116      	bne.n	80016ae <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <HAL_TIM_Base_Start+0x88>)
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d016      	beq.n	80016c0 <HAL_TIM_Base_Start+0x74>
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	429a      	cmp	r2, r3
 800169a:	d011      	beq.n	80016c0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ac:	e008      	b.n	80016c0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e000      	b.n	80016c2 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40000400 	.word	0x40000400
 80016d4:	00010007 	.word	0x00010007

080016d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	230f      	movs	r3, #15
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	223c      	movs	r2, #60	@ 0x3c
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_TIM_ConfigClockSource+0x20>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e0bc      	b.n	8001872 <HAL_TIM_ConfigClockSource+0x19a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	223c      	movs	r2, #60	@ 0x3c
 80016fc:	2101      	movs	r1, #1
 80016fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	223d      	movs	r2, #61	@ 0x3d
 8001704:	2102      	movs	r1, #2
 8001706:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4a5a      	ldr	r2, [pc, #360]	@ (800187c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <HAL_TIM_ConfigClockSource+0x1a8>)
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	0192      	lsls	r2, r2, #6
 8001730:	4293      	cmp	r3, r2
 8001732:	d040      	beq.n	80017b6 <HAL_TIM_ConfigClockSource+0xde>
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	0192      	lsls	r2, r2, #6
 8001738:	4293      	cmp	r3, r2
 800173a:	d900      	bls.n	800173e <HAL_TIM_ConfigClockSource+0x66>
 800173c:	e088      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	0152      	lsls	r2, r2, #5
 8001742:	4293      	cmp	r3, r2
 8001744:	d100      	bne.n	8001748 <HAL_TIM_ConfigClockSource+0x70>
 8001746:	e088      	b.n	800185a <HAL_TIM_ConfigClockSource+0x182>
 8001748:	2280      	movs	r2, #128	@ 0x80
 800174a:	0152      	lsls	r2, r2, #5
 800174c:	4293      	cmp	r3, r2
 800174e:	d900      	bls.n	8001752 <HAL_TIM_ConfigClockSource+0x7a>
 8001750:	e07e      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 8001752:	2b70      	cmp	r3, #112	@ 0x70
 8001754:	d018      	beq.n	8001788 <HAL_TIM_ConfigClockSource+0xb0>
 8001756:	d900      	bls.n	800175a <HAL_TIM_ConfigClockSource+0x82>
 8001758:	e07a      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 800175a:	2b60      	cmp	r3, #96	@ 0x60
 800175c:	d04f      	beq.n	80017fe <HAL_TIM_ConfigClockSource+0x126>
 800175e:	d900      	bls.n	8001762 <HAL_TIM_ConfigClockSource+0x8a>
 8001760:	e076      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 8001762:	2b50      	cmp	r3, #80	@ 0x50
 8001764:	d03b      	beq.n	80017de <HAL_TIM_ConfigClockSource+0x106>
 8001766:	d900      	bls.n	800176a <HAL_TIM_ConfigClockSource+0x92>
 8001768:	e072      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 800176a:	2b40      	cmp	r3, #64	@ 0x40
 800176c:	d057      	beq.n	800181e <HAL_TIM_ConfigClockSource+0x146>
 800176e:	d900      	bls.n	8001772 <HAL_TIM_ConfigClockSource+0x9a>
 8001770:	e06e      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 8001772:	2b30      	cmp	r3, #48	@ 0x30
 8001774:	d063      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x166>
 8001776:	d86b      	bhi.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 8001778:	2b20      	cmp	r3, #32
 800177a:	d060      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x166>
 800177c:	d868      	bhi.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d05d      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x166>
 8001782:	2b10      	cmp	r3, #16
 8001784:	d05b      	beq.n	800183e <HAL_TIM_ConfigClockSource+0x166>
 8001786:	e063      	b.n	8001850 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001798:	f000 f95c 	bl	8001a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2277      	movs	r2, #119	@ 0x77
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	609a      	str	r2, [r3, #8]
      break;
 80017b4:	e052      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80017c6:	f000 f945 	bl	8001a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	01c9      	lsls	r1, r1, #7
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
      break;
 80017dc:	e03e      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017ea:	001a      	movs	r2, r3
 80017ec:	f000 f8b6 	bl	800195c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2150      	movs	r1, #80	@ 0x50
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f910 	bl	8001a1c <TIM_ITRx_SetConfig>
      break;
 80017fc:	e02e      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800180a:	001a      	movs	r2, r3
 800180c:	f000 f8d4 	bl	80019b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2160      	movs	r1, #96	@ 0x60
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f900 	bl	8001a1c <TIM_ITRx_SetConfig>
      break;
 800181c:	e01e      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800182a:	001a      	movs	r2, r3
 800182c:	f000 f896 	bl	800195c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2140      	movs	r1, #64	@ 0x40
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f8f0 	bl	8001a1c <TIM_ITRx_SetConfig>
      break;
 800183c:	e00e      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0019      	movs	r1, r3
 8001848:	0010      	movs	r0, r2
 800184a:	f000 f8e7 	bl	8001a1c <TIM_ITRx_SetConfig>
      break;
 800184e:	e005      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
      break;
 8001858:	e000      	b.n	800185c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800185a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	223d      	movs	r2, #61	@ 0x3d
 8001860:	2101      	movs	r1, #1
 8001862:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223c      	movs	r2, #60	@ 0x3c
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

  return status;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	ffceff88 	.word	0xffceff88
 8001880:	ffff00ff 	.word	0xffff00ff

08001884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <TIM_Base_SetConfig+0xc0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <TIM_Base_SetConfig+0x20>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <TIM_Base_SetConfig+0xc4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d108      	bne.n	80018b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2270      	movs	r2, #112	@ 0x70
 80018a8:	4393      	bics	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <TIM_Base_SetConfig+0xc0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00f      	beq.n	80018de <TIM_Base_SetConfig+0x5a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <TIM_Base_SetConfig+0xc4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00b      	beq.n	80018de <TIM_Base_SetConfig+0x5a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a20      	ldr	r2, [pc, #128]	@ (800194c <TIM_Base_SetConfig+0xc8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <TIM_Base_SetConfig+0x5a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <TIM_Base_SetConfig+0xcc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d003      	beq.n	80018de <TIM_Base_SetConfig+0x5a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <TIM_Base_SetConfig+0xd0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d108      	bne.n	80018f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <TIM_Base_SetConfig+0xd4>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	4393      	bics	r3, r2
 80018f6:	001a      	movs	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <TIM_Base_SetConfig+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0xaa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <TIM_Base_SetConfig+0xcc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0xaa>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <TIM_Base_SetConfig+0xd0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d103      	bne.n	8001936 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	615a      	str	r2, [r3, #20]
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40000400 	.word	0x40000400
 800194c:	40002000 	.word	0x40002000
 8001950:	40014400 	.word	0x40014400
 8001954:	40014800 	.word	0x40014800
 8001958:	fffffcff 	.word	0xfffffcff

0800195c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	001a      	movs	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	22f0      	movs	r2, #240	@ 0xf0
 8001986:	4393      	bics	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	220a      	movs	r2, #10
 8001998:	4393      	bics	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	621a      	str	r2, [r3, #32]
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2210      	movs	r2, #16
 80019d0:	4393      	bics	r3, r2
 80019d2:	001a      	movs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <TIM_TI2_ConfigInputStage+0x60>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	031b      	lsls	r3, r3, #12
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	22a0      	movs	r2, #160	@ 0xa0
 80019f4:	4393      	bics	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	621a      	str	r2, [r3, #32]
}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b006      	add	sp, #24
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	ffff0fff 	.word	0xffff0fff

08001a1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <TIM_ITRx_SetConfig+0x34>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	ffcfff8f 	.word	0xffcfff8f

08001a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <TIM_ETR_SetConfig+0x3c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	609a      	str	r2, [r3, #8]
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b006      	add	sp, #24
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	ffff00ff 	.word	0xffff00ff

08001a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	223c      	movs	r2, #60	@ 0x3c
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e04a      	b.n	8001b42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	223c      	movs	r2, #60	@ 0x3c
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	223d      	movs	r2, #61	@ 0x3d
 8001ab8:	2102      	movs	r1, #2
 8001aba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d108      	bne.n	8001ae8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2270      	movs	r2, #112	@ 0x70
 8001aec:	4393      	bics	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10c      	bne.n	8001b30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223d      	movs	r2, #61	@ 0x3d
 8001b34:	2101      	movs	r1, #1
 8001b36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	223c      	movs	r2, #60	@ 0x3c
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b004      	add	sp, #16
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	ff0fffff 	.word	0xff0fffff
 8001b54:	40000400 	.word	0x40000400

08001b58 <memset>:
 8001b58:	0003      	movs	r3, r0
 8001b5a:	1882      	adds	r2, r0, r2
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d100      	bne.n	8001b62 <memset+0xa>
 8001b60:	4770      	bx	lr
 8001b62:	7019      	strb	r1, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	e7f9      	b.n	8001b5c <memset+0x4>

08001b68 <__libc_init_array>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	4c0c      	ldr	r4, [pc, #48]	@ (8001ba0 <__libc_init_array+0x38>)
 8001b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ba4 <__libc_init_array+0x3c>)
 8001b70:	1b64      	subs	r4, r4, r5
 8001b72:	10a4      	asrs	r4, r4, #2
 8001b74:	42a6      	cmp	r6, r4
 8001b76:	d109      	bne.n	8001b8c <__libc_init_array+0x24>
 8001b78:	2600      	movs	r6, #0
 8001b7a:	f000 f819 	bl	8001bb0 <_init>
 8001b7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <__libc_init_array+0x40>)
 8001b80:	4d0a      	ldr	r5, [pc, #40]	@ (8001bac <__libc_init_array+0x44>)
 8001b82:	1b64      	subs	r4, r4, r5
 8001b84:	10a4      	asrs	r4, r4, #2
 8001b86:	42a6      	cmp	r6, r4
 8001b88:	d105      	bne.n	8001b96 <__libc_init_array+0x2e>
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	00b3      	lsls	r3, r6, #2
 8001b8e:	58eb      	ldr	r3, [r5, r3]
 8001b90:	4798      	blx	r3
 8001b92:	3601      	adds	r6, #1
 8001b94:	e7ee      	b.n	8001b74 <__libc_init_array+0xc>
 8001b96:	00b3      	lsls	r3, r6, #2
 8001b98:	58eb      	ldr	r3, [r5, r3]
 8001b9a:	4798      	blx	r3
 8001b9c:	3601      	adds	r6, #1
 8001b9e:	e7f2      	b.n	8001b86 <__libc_init_array+0x1e>
 8001ba0:	08001c08 	.word	0x08001c08
 8001ba4:	08001c08 	.word	0x08001c08
 8001ba8:	08001c0c 	.word	0x08001c0c
 8001bac:	08001c08 	.word	0x08001c08

08001bb0 <_init>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr

08001bbc <_fini>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr
