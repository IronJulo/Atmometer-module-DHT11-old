
STM32C031F6P6_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed8  08003ed8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ed8  08003ed8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ed8  08003ed8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ee0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003eec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003eec  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d56e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002314  00000000  00000000  000125a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000148b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad5  00000000  00000000  00015698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013751  00000000  00000000  0001616d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115ee  00000000  00000000  000298be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079cbe  00000000  00000000  0003aeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003224  00000000  00000000  000b4bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b7dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e80 	.word	0x08003e80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e80 	.word	0x08003e80

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e04      	subs	r4, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 f83d 	bl	80002a4 <__clzsi2>
 800022a:	239e      	movs	r3, #158	@ 0x9e
 800022c:	0001      	movs	r1, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	@ 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	d02f      	beq.n	8000298 <__aeabi_ui2f+0x78>
 8000238:	3908      	subs	r1, #8
 800023a:	408c      	lsls	r4, r1
 800023c:	0264      	lsls	r4, r4, #9
 800023e:	0a64      	lsrs	r4, r4, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2400      	movs	r4, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4320      	orrs	r0, r4
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	@ 0x99
 8000250:	dc16      	bgt.n	8000280 <__aeabi_ui2f+0x60>
 8000252:	1f42      	subs	r2, r0, #5
 8000254:	2805      	cmp	r0, #5
 8000256:	d000      	beq.n	800025a <__aeabi_ui2f+0x3a>
 8000258:	4094      	lsls	r4, r2
 800025a:	0022      	movs	r2, r4
 800025c:	4810      	ldr	r0, [pc, #64]	@ (80002a0 <__aeabi_ui2f+0x80>)
 800025e:	4002      	ands	r2, r0
 8000260:	0765      	lsls	r5, r4, #29
 8000262:	d009      	beq.n	8000278 <__aeabi_ui2f+0x58>
 8000264:	250f      	movs	r5, #15
 8000266:	402c      	ands	r4, r5
 8000268:	2c04      	cmp	r4, #4
 800026a:	d005      	beq.n	8000278 <__aeabi_ui2f+0x58>
 800026c:	3204      	adds	r2, #4
 800026e:	0154      	lsls	r4, r2, #5
 8000270:	d502      	bpl.n	8000278 <__aeabi_ui2f+0x58>
 8000272:	239f      	movs	r3, #159	@ 0x9f
 8000274:	4002      	ands	r2, r0
 8000276:	1a5b      	subs	r3, r3, r1
 8000278:	0192      	lsls	r2, r2, #6
 800027a:	0a54      	lsrs	r4, r2, #9
 800027c:	b2d8      	uxtb	r0, r3
 800027e:	e7e3      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000280:	0002      	movs	r2, r0
 8000282:	0020      	movs	r0, r4
 8000284:	321b      	adds	r2, #27
 8000286:	4090      	lsls	r0, r2
 8000288:	0002      	movs	r2, r0
 800028a:	1e50      	subs	r0, r2, #1
 800028c:	4182      	sbcs	r2, r0
 800028e:	2005      	movs	r0, #5
 8000290:	1a40      	subs	r0, r0, r1
 8000292:	40c4      	lsrs	r4, r0
 8000294:	4314      	orrs	r4, r2
 8000296:	e7e0      	b.n	800025a <__aeabi_ui2f+0x3a>
 8000298:	0264      	lsls	r4, r4, #9
 800029a:	2096      	movs	r0, #150	@ 0x96
 800029c:	0a64      	lsrs	r4, r4, #9
 800029e:	e7d3      	b.n	8000248 <__aeabi_ui2f+0x28>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__clzsi2>:
 80002a4:	211c      	movs	r1, #28
 80002a6:	2301      	movs	r3, #1
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d301      	bcc.n	80002b2 <__clzsi2+0xe>
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	3910      	subs	r1, #16
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d301      	bcc.n	80002bc <__clzsi2+0x18>
 80002b8:	0a00      	lsrs	r0, r0, #8
 80002ba:	3908      	subs	r1, #8
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	4298      	cmp	r0, r3
 80002c0:	d301      	bcc.n	80002c6 <__clzsi2+0x22>
 80002c2:	0900      	lsrs	r0, r0, #4
 80002c4:	3904      	subs	r1, #4
 80002c6:	a202      	add	r2, pc, #8	@ (adr r2, 80002d0 <__clzsi2+0x2c>)
 80002c8:	5c10      	ldrb	r0, [r2, r0]
 80002ca:	1840      	adds	r0, r0, r1
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	02020304 	.word	0x02020304
 80002d4:	01010101 	.word	0x01010101
	...

080002e0 <Set_Pin_Output>:
 */

#include "DHT11.h"

void Set_Pin_Output(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b089      	sub	sp, #36	@ 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	000a      	movs	r2, r1
 80002ea:	1cbb      	adds	r3, r7, #2
 80002ec:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	240c      	movs	r4, #12
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2314      	movs	r3, #20
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 fd95 	bl	8003e28 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 80002fe:	1cbb      	adds	r3, r7, #2
 8000300:	881a      	ldrh	r2, [r3, #0]
 8000302:	0021      	movs	r1, r4
 8000304:	187b      	adds	r3, r7, r1
 8000306:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800031a:	187a      	adds	r2, r7, r1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f000 ff07 	bl	8001134 <HAL_GPIO_Init>
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b009      	add	sp, #36	@ 0x24
 800032c:	bd90      	pop	{r4, r7, pc}

0800032e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 800032e:	b590      	push	{r4, r7, lr}
 8000330:	b089      	sub	sp, #36	@ 0x24
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	000a      	movs	r2, r1
 8000338:	1cbb      	adds	r3, r7, #2
 800033a:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033c:	240c      	movs	r4, #12
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	2314      	movs	r3, #20
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f003 fd6e 	bl	8003e28 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 800034c:	1cbb      	adds	r3, r7, #2
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	193b      	adds	r3, r7, r4
 8000352:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000360:	193a      	adds	r2, r7, r4
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fee4 	bl	8001134 <HAL_GPIO_Init>
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b009      	add	sp, #36	@ 0x24
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <DHT11_Start>:

void DHT11_Start(DHT11_data *data)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	Set_Pin_Output(data->GPIO_Port, data->GPIO_Pin);        // set the pin as output
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	889b      	ldrh	r3, [r3, #4]
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f7ff ffaa 	bl	80002e0 <Set_Pin_Output>
	HAL_GPIO_WritePin(data->GPIO_Port, data->GPIO_Pin, 0);  // pull the pin low
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6818      	ldr	r0, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	889b      	ldrh	r3, [r3, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	0019      	movs	r1, r3
 8000398:	f001 f85b 	bl	8001452 <HAL_GPIO_WritePin>
	microsecond_delay(18000);                               // wait for 18ms
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <DHT11_Start+0x60>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fb6a 	bl	8000a78 <microsecond_delay>
	HAL_GPIO_WritePin (data->GPIO_Port, data->GPIO_Pin, 1); // pull the pin high
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	2201      	movs	r2, #1
 80003ae:	0019      	movs	r1, r3
 80003b0:	f001 f84f 	bl	8001452 <HAL_GPIO_WritePin>
	microsecond_delay(20);
 80003b4:	2014      	movs	r0, #20
 80003b6:	f000 fb5f 	bl	8000a78 <microsecond_delay>
	Set_Pin_Input(data->GPIO_Port, data->GPIO_Pin);         // set as input
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	889b      	ldrh	r3, [r3, #4]
 80003c2:	0019      	movs	r1, r3
 80003c4:	0010      	movs	r0, r2
 80003c6:	f7ff ffb2 	bl	800032e <Set_Pin_Input>
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	00004650 	.word	0x00004650

080003d8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(DHT11_data *data)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80003e0:	240f      	movs	r4, #15
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
	microsecond_delay(40);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f000 fb45 	bl	8000a78 <microsecond_delay>
	if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	889b      	ldrh	r3, [r3, #4]
 80003f6:	0019      	movs	r1, r3
 80003f8:	0010      	movs	r0, r2
 80003fa:	f001 f80d 	bl	8001418 <HAL_GPIO_ReadPin>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d114      	bne.n	800042c <DHT11_Check_Response+0x54>
	{
		microsecond_delay(80);
 8000402:	2050      	movs	r0, #80	@ 0x50
 8000404:	f000 fb38 	bl	8000a78 <microsecond_delay>
		if ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin))) Response = 1;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	889b      	ldrh	r3, [r3, #4]
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f001 f800 	bl	8001418 <HAL_GPIO_ReadPin>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d003      	beq.n	8000424 <DHT11_Check_Response+0x4c>
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e003      	b.n	800042c <DHT11_Check_Response+0x54>
		else Response = -1;
 8000424:	230f      	movs	r3, #15
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	22ff      	movs	r2, #255	@ 0xff
 800042a:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go low
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	889b      	ldrh	r3, [r3, #4]
 8000436:	0019      	movs	r1, r3
 8000438:	0010      	movs	r0, r2
 800043a:	f000 ffed 	bl	8001418 <HAL_GPIO_ReadPin>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d1f5      	bne.n	800042e <DHT11_Check_Response+0x56>

	return Response;
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	781b      	ldrb	r3, [r3, #0]
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b005      	add	sp, #20
 800044e:	bd90      	pop	{r4, r7, pc}

08000450 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_data *data)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000458:	230e      	movs	r3, #14
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e04d      	b.n	80004fe <DHT11_Read+0xae>
	{
		while (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go high
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	889b      	ldrh	r3, [r3, #4]
 800046c:	0019      	movs	r1, r3
 800046e:	0010      	movs	r0, r2
 8000470:	f000 ffd2 	bl	8001418 <HAL_GPIO_ReadPin>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d0f5      	beq.n	8000464 <DHT11_Read+0x14>
		microsecond_delay(40);   // wait for 40 us
 8000478:	2028      	movs	r0, #40	@ 0x28
 800047a:	f000 fafd 	bl	8000a78 <microsecond_delay>
		if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))   // if the pin is low
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	889b      	ldrh	r3, [r3, #4]
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f000 ffc5 	bl	8001418 <HAL_GPIO_ReadPin>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d113      	bne.n	80004ba <DHT11_Read+0x6a>
		{
			i&= ~(1<<(7-j));   // write 0
 8000492:	230e      	movs	r3, #14
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2207      	movs	r2, #7
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	2201      	movs	r2, #1
 800049e:	409a      	lsls	r2, r3
 80004a0:	0013      	movs	r3, r2
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	210f      	movs	r1, #15
 80004aa:	187a      	adds	r2, r7, r1
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	b252      	sxtb	r2, r2
 80004b0:	4013      	ands	r3, r2
 80004b2:	b25a      	sxtb	r2, r3
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e010      	b.n	80004dc <DHT11_Read+0x8c>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80004ba:	230e      	movs	r3, #14
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2207      	movs	r2, #7
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	2201      	movs	r2, #1
 80004c6:	409a      	lsls	r2, r3
 80004c8:	0013      	movs	r3, r2
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	210f      	movs	r1, #15
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));  // wait for the pin to go low
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 ff95 	bl	8001418 <HAL_GPIO_ReadPin>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d1f5      	bne.n	80004de <DHT11_Read+0x8e>
	for (j=0;j<8;j++)
 80004f2:	210e      	movs	r1, #14
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	3201      	adds	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	230e      	movs	r3, #14
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d9ac      	bls.n	8000462 <DHT11_Read+0x12>
	}
	return i;
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
}
 800050e:	0018      	movs	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	b004      	add	sp, #16
 8000514:	bd80      	pop	{r7, pc}

08000516 <DHT_GetData>:

void DHT_GetData(DHT11_data *data)
{
 8000516:	b5b0      	push	{r4, r5, r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
    DHT11_Start (data);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ff27 	bl	8000374 <DHT11_Start>
    uint8_t presence = DHT11_Check_Response (data);
 8000526:	230f      	movs	r3, #15
 8000528:	18fc      	adds	r4, r7, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff ff53 	bl	80003d8 <DHT11_Check_Response>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]

	data->int_humidity = DHT11_Read (data);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff89 	bl	8000450 <DHT11_Read>
 800053e:	0003      	movs	r3, r0
 8000540:	001a      	movs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	719a      	strb	r2, [r3, #6]
	data->dec_humidity = DHT11_Read (data);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff ff81 	bl	8000450 <DHT11_Read>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	71da      	strb	r2, [r3, #7]
	data->int_temperature = DHT11_Read (data);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff79 	bl	8000450 <DHT11_Read>
 800055e:	0003      	movs	r3, r0
 8000560:	001a      	movs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	721a      	strb	r2, [r3, #8]
	data->dec_temperature = DHT11_Read (data);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff71 	bl	8000450 <DHT11_Read>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	725a      	strb	r2, [r3, #9]

	uint8_t checksum = DHT11_Read(data);
 8000576:	250e      	movs	r5, #14
 8000578:	197c      	adds	r4, r7, r5
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff67 	bl	8000450 <DHT11_Read>
 8000582:	0003      	movs	r3, r0
 8000584:	7023      	strb	r3, [r4, #0]

	if (checksum == (data->int_humidity + data->dec_humidity + data->int_temperature + data->dec_temperature))
 8000586:	197b      	adds	r3, r7, r5
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	0019      	movs	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	7a09      	ldrb	r1, [r1, #8]
 800059a:	185b      	adds	r3, r3, r1
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	7a49      	ldrb	r1, [r1, #9]
 80005a0:	185b      	adds	r3, r3, r1
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d10f      	bne.n	80005c6 <DHT_GetData+0xb0>
	{
		data->temperature = data->int_temperature;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7a1b      	ldrb	r3, [r3, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe38 	bl	8000220 <__aeabi_ui2f>
 80005b0:	1c02      	adds	r2, r0, #0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]
		data->humidity = data->int_humidity;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe30 	bl	8000220 <__aeabi_ui2f>
 80005c0:	1c02      	adds	r2, r0, #0
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
	}
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}

080005ce <HAL_I2C_ListenCpltCallback>:

/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f97f 	bl	80018dc <HAL_I2C_EnableListen_IT>
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <set_register>:

void set_register(uint8_t reg_addr, uint8_t reg_value) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	1c0a      	adds	r2, r1, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	if (reg_addr > 32) return;
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d806      	bhi.n	8000610 <set_register+0x28>

	registers[reg_addr] = reg_value;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <set_register+0x30>)
 8000608:	1db9      	adds	r1, r7, #6
 800060a:	7809      	ldrb	r1, [r1, #0]
 800060c:	54d1      	strb	r1, [r2, r3]
 800060e:	e000      	b.n	8000612 <set_register+0x2a>
	if (reg_addr > 32) return;
 8000610:	46c0      	nop			@ (mov r8, r8)
}
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000002c 	.word	0x2000002c

0800061c <get_register>:

uint8_t get_register(uint8_t reg_addr) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	if (reg_addr > 32) return 0;
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b20      	cmp	r3, #32
 800062e:	d901      	bls.n	8000634 <get_register+0x18>
 8000630:	2300      	movs	r3, #0
 8000632:	e003      	b.n	800063c <get_register+0x20>

	return registers[reg_addr];
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4a02      	ldr	r2, [pc, #8]	@ (8000644 <get_register+0x28>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000002c 	.word	0x2000002c

08000648 <HAL_I2C_AddrCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when address match our address
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	0008      	movs	r0, r1
 8000652:	0011      	movs	r1, r2
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	1c02      	adds	r2, r0, #0
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	003b      	movs	r3, r7
 800065c:	1c0a      	adds	r2, r1, #0
 800065e:	801a      	strh	r2, [r3, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000660:	1cfb      	adds	r3, r7, #3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d117      	bne.n	8000698 <HAL_I2C_AddrCallback+0x50>
	{
		for (int index = 0; index < RxSIZE; ++index) RxData[index] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e007      	b.n	800067e <HAL_I2C_AddrCallback+0x36>
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	18d3      	adds	r3, r2, r3
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	ddf4      	ble.n	800066e <HAL_I2C_AddrCallback+0x26>
		RxCounter = 1;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <HAL_I2C_AddrCallback+0x80>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData, TRANSMISSION_WRITE_SIZE, I2C_FIRST_FRAME);
 800068a:	490e      	ldr	r1, [pc, #56]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	2300      	movs	r3, #0
 8000690:	2202      	movs	r2, #2
 8000692:	f001 f861 	bl	8001758 <HAL_I2C_Slave_Seq_Receive_IT>
	else
	{
		uint8_t reg_value = get_register(RxData[0]);
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &reg_value, 1, I2C_FIRST_AND_LAST_FRAME);
	}
}
 8000696:	e010      	b.n	80006ba <HAL_I2C_AddrCallback+0x72>
		uint8_t reg_value = get_register(RxData[0]);
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ffbd 	bl	800061c <get_register>
 80006a2:	0003      	movs	r3, r0
 80006a4:	001a      	movs	r2, r3
 80006a6:	210b      	movs	r1, #11
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &reg_value, 1, I2C_FIRST_AND_LAST_FRAME);
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	049b      	lsls	r3, r3, #18
 80006b0:	1879      	adds	r1, r7, r1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	2201      	movs	r2, #1
 80006b6:	f000 ff8f 	bl	80015d8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	20000028 	.word	0x20000028
 80006c8:	2000002a 	.word	0x2000002a

080006cc <process_data>:

void process_data(I2C_HandleTypeDef *hi2c) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	set_register(RxData[0], RxData[1]);
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <process_data+0x20>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <process_data+0x20>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f7ff ff82 	bl	80005e8 <set_register>
	//HAL_I2C_EnableListen_IT(hi2c);
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000028 	.word	0x20000028

080006f0 <HAL_I2C_SlaveRxCpltCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when we complete the buffer RxData
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	RxCounter++;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000702:	701a      	strb	r2, [r3, #0]
	switch (RxCounter) {
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <HAL_I2C_SlaveRxCpltCallback+0x22>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d00c      	beq.n	800072a <HAL_I2C_SlaveRxCpltCallback+0x3a>
 8000710:	e010      	b.n	8000734 <HAL_I2C_SlaveRxCpltCallback+0x44>
		case RxSIZE - 1: // before last frame
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+RxCounter, 1, I2C_LAST_FRAME);
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800071a:	18d1      	adds	r1, r2, r3
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	049b      	lsls	r3, r3, #18
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	f001 f818 	bl	8001758 <HAL_I2C_Slave_Seq_Receive_IT>
			break;
 8000728:	e010      	b.n	800074c <HAL_I2C_SlaveRxCpltCallback+0x5c>
		case RxSIZE: // all frame received
			process_data(hi2c);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ffcd 	bl	80006cc <process_data>
			break;
 8000732:	e00b      	b.n	800074c <HAL_I2C_SlaveRxCpltCallback+0x5c>
		default: // more than one frame to be received
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+RxCounter, 1, I2C_NEXT_FRAME);
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800073c:	18d1      	adds	r1, r2, r3
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	045b      	lsls	r3, r3, #17
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	2201      	movs	r2, #1
 8000746:	f001 f807 	bl	8001758 <HAL_I2C_Slave_Seq_Receive_IT>
			break;
 800074a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000002a 	.word	0x2000002a
 8000758:	20000028 	.word	0x20000028

0800075c <HAL_I2C_ErrorCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when we complete the buffer RxData
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	error_counter++;
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_I2C_ErrorCallback+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_I2C_ErrorCallback+0x40>)
 800076c:	601a      	str	r2, [r3, #0]

	uint32_t error_code = HAL_I2C_GetError(hi2c);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f978 	bl	8001a66 <HAL_I2C_GetError>
 8000776:	0003      	movs	r3, r0
 8000778:	60fb      	str	r3, [r7, #12]

	switch (error_code) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d104      	bne.n	800078a <HAL_I2C_ErrorCallback+0x2e>
		case 4: // Acknowledge failure
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2210      	movs	r2, #16
 8000786:	61da      	str	r2, [r3, #28]
			break;
 8000788:	e000      	b.n	800078c <HAL_I2C_ErrorCallback+0x30>
		default:
			break;
 800078a:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_I2C_EnableListen_IT(hi2c);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f8a4 	bl	80018dc <HAL_I2C_EnableListen_IT>
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000004c 	.word	0x2000004c

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  data.GPIO_Pin = DHT11_Data_Pin;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <main+0x68>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	809a      	strh	r2, [r3, #4]
  data.GPIO_Port = DHT11_Data_GPIO_Port;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <main+0x68>)
 80007ac:	22a0      	movs	r2, #160	@ 0xa0
 80007ae:	05d2      	lsls	r2, r2, #23
 80007b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 faba 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f82f 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f90d 	bl	80009d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007be:	f000 f8af 	bl	8000920 <MX_TIM1_Init>
  MX_I2C1_Init();
 80007c2:	f000 f86d 	bl	80008a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_TIM_Base_Start(&htim1) != HAL_OK)      Error_Handler();
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <main+0x6c>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 f8a7 	bl	800391c <HAL_TIM_Base_Start>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x36>
 80007d2:	f000 f96b 	bl	8000aac <Error_Handler>
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) Error_Handler();
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <main+0x70>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 f87f 	bl	80018dc <HAL_I2C_EnableListen_IT>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <main+0x46>
 80007e2:	f000 f963 	bl	8000aac <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	counter_glob++;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <main+0x74>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <main+0x74>)
 80007ee:	601a      	str	r2, [r3, #0]
	DHT_GetData(&data);
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <main+0x68>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe8f 	bl	8000516 <DHT_GetData>
	HAL_Delay(1000);
 80007f8:	23fa      	movs	r3, #250	@ 0xfa
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fb11 	bl	8000e24 <HAL_Delay>
	counter_glob++;
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	e7ef      	b.n	80007e6 <main+0x46>
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	200000f0 	.word	0x200000f0
 800080c:	200000a4 	.word	0x200000a4
 8000810:	20000050 	.word	0x20000050
 8000814:	20000104 	.word	0x20000104

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08d      	sub	sp, #52	@ 0x34
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	2414      	movs	r4, #20
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	231c      	movs	r3, #28
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f003 fafd 	bl	8003e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	003b      	movs	r3, r7
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f003 faf6 	bl	8003e28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2202      	movs	r2, #2
 8000840:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2240      	movs	r2, #64	@ 0x40
 8000856:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	f002 fbe8 	bl	8003030 <HAL_RCC_OscConfig>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000864:	f000 f922 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	003b      	movs	r3, r7
 800086a:	2207      	movs	r2, #7
 800086c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000886:	003b      	movs	r3, r7
 8000888:	2100      	movs	r1, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fdb4 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000894:	f000 f90a 	bl	8000aac <Error_Handler>
  }
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b00d      	add	sp, #52	@ 0x34
 800089e:	bd90      	pop	{r4, r7, pc}

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_SLAVE_ADDRESS;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2232      	movs	r2, #50	@ 0x32
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fdd5 	bl	800148c <HAL_I2C_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f8e1 	bl	8000aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 fb06 	bl	8002f00 <HAL_I2CEx_ConfigAnalogFilter>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f8d8 	bl	8000aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <MX_I2C1_Init+0x74>)
 80008fe:	2100      	movs	r1, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fb49 	bl	8002f98 <HAL_I2CEx_ConfigDigitalFilter>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f8cf 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000050 	.word	0x20000050
 8000918:	40005400 	.word	0x40005400
 800091c:	40000a0b 	.word	0x40000a0b

08000920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	2310      	movs	r3, #16
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	2310      	movs	r3, #16
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f003 fa79 	bl	8003e28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	230c      	movs	r3, #12
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 fa72 	bl	8003e28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000946:	4a22      	ldr	r2, [pc, #136]	@ (80009d0 <MX_TIM1_Init+0xb0>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PRESCALER;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_TIM1_Init+0xac>)
 800094c:	220c      	movs	r2, #12
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000958:	4a1e      	ldr	r2, [pc, #120]	@ (80009d4 <MX_TIM1_Init+0xb4>)
 800095a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_TIM1_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TIM1_Init+0xac>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_TIM1_Init+0xac>)
 8000970:	0018      	movs	r0, r3
 8000972:	f002 ff7b 	bl	800386c <HAL_TIM_Base_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f897 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	2110      	movs	r1, #16
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	0152      	lsls	r2, r2, #5
 8000986:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000988:	187a      	adds	r2, r7, r1
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_TIM1_Init+0xac>)
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f003 f80a 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f888 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_TIM1_Init+0xac>)
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 f9d5 	bl	8003d64 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80009be:	f000 f875 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b008      	add	sp, #32
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	200000a4 	.word	0x200000a4
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	0000ffff 	.word	0x0000ffff

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	240c      	movs	r4, #12
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	2314      	movs	r3, #20
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f003 fa1d 	bl	8003e28 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 80009f4:	2102      	movs	r1, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fe:	2202      	movs	r2, #2
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a16:	2204      	movs	r2, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_GPIO_Init+0x9c>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_Data_GPIO_Port, DHT11_Data_Pin, GPIO_PIN_RESET);
 8000a36:	23a0      	movs	r3, #160	@ 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fd07 	bl	8001452 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Data_Pin */
  GPIO_InitStruct.Pin = DHT11_Data_Pin;
 8000a44:	0021      	movs	r1, r4
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_Data_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	23a0      	movs	r3, #160	@ 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fb64 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b009      	add	sp, #36	@ 0x24
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <microsecond_delay>:

/* USER CODE BEGIN 4 */

void microsecond_delay(uint16_t duration)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);                 // set the counter value a 0
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <microsecond_delay+0x30>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < duration); // wait for the counter to reach the us input in the parameter
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <microsecond_delay+0x30>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3f8      	bcc.n	8000a8e <microsecond_delay+0x16>
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b002      	add	sp, #8
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	200000a4 	.word	0x200000a4

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	0549      	lsls	r1, r1, #21
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	055b      	lsls	r3, r3, #21
 8000aec:	4013      	ands	r3, r2
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b093      	sub	sp, #76	@ 0x4c
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2334      	movs	r3, #52	@ 0x34
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f003 f988 	bl	8003e28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	2418      	movs	r4, #24
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	231c      	movs	r3, #28
 8000b20:	001a      	movs	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	f003 f980 	bl	8003e28 <memset>
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a37      	ldr	r2, [pc, #220]	@ (8000c0c <HAL_I2C_MspInit+0x10c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d168      	bne.n	8000c04 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2240      	movs	r2, #64	@ 0x40
 8000b36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 fda5 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b4a:	f7ff ffaf 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4013      	ands	r3, r2
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6a:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b76:	2204      	movs	r2, #4
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SCL
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b7e:	2434      	movs	r4, #52	@ 0x34
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2212      	movs	r2, #18
 8000b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	220e      	movs	r2, #14
 8000b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <HAL_I2C_MspInit+0x114>)
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f000 fac5 	bl	8001134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000baa:	0021      	movs	r1, r4
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	01d2      	lsls	r2, r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2212      	movs	r2, #18
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	220e      	movs	r2, #14
 8000bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <HAL_I2C_MspInit+0x118>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	f000 faae 	bl	8001134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	0389      	lsls	r1, r1, #14
 8000be2:	430a      	orrs	r2, r1
 8000be4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_I2C_MspInit+0x110>)
 8000be8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	039b      	lsls	r3, r3, #14
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f000 f9e3 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000bfe:	2017      	movs	r0, #23
 8000c00:	f000 f9f5 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b013      	add	sp, #76	@ 0x4c
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	50000400 	.word	0x50000400
 8000c18:	50000800 	.word	0x50000800

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_TIM_Base_MspInit+0x38>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10d      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	2180      	movs	r1, #128	@ 0x80
 8000c36:	0109      	lsls	r1, r1, #4
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	40021000 	.word	0x40021000

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f8b2 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <I2C1_IRQHandler+0x2c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	23e0      	movs	r3, #224	@ 0xe0
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d004      	beq.n	8000cac <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <I2C1_IRQHandler+0x2c>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fe55 	bl	8001954 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000caa:	e003      	b.n	8000cb4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <I2C1_IRQHandler+0x2c>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fe36 	bl	8001920 <HAL_I2C_EV_IRQHandler>
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000050 	.word	0x20000050

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <SystemInit+0x14>)
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	0512      	lsls	r2, r2, #20
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	46c0      	nop			@ (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f7ff fff0 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ce0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cec:	480a      	ldr	r0, [pc, #40]	@ (8000d18 <LoopForever+0xa>)
  ldr r3, =_edata
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <LoopForever+0xe>)
  adds r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  b LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  str  r3, [r2]
 8000cfc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfe:	3204      	adds	r2, #4

08000d00 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <LoopForever+0x16>)
  cmp r2, r3
 8000d02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d06:	f003 f897 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff fd49 	bl	80007a0 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000d14:	08003ee0 	.word	0x08003ee0
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d24:	2000010c 	.word	0x2000010c

08000d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 f80e 	bl	8000d58 <HAL_InitTick>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e001      	b.n	8000d4c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d48:	f7ff feb6 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_InitTick+0x88>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d02b      	beq.n	8000dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_InitTick+0x8c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_InitTick+0x88>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	23fa      	movs	r3, #250	@ 0xfa
 8000d7c:	0098      	lsls	r0, r3, #2
 8000d7e:	f7ff f9c3 	bl	8000108 <__udivsi3>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0020      	movs	r0, r4
 8000d88:	f7ff f9be 	bl	8000108 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f93d 	bl	800100e <HAL_SYSTICK_Config>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d112      	bne.n	8000dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80a      	bhi.n	8000db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f90c 	bl	8000fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_InitTick+0x90>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e00d      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e008      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e003      	b.n	8000dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	18d2      	adds	r2, r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000108 	.word	0x20000108

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	@ (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	20000108 	.word	0x20000108

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_GetTick>
 8000e30:	0003      	movs	r3, r0
 8000e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	001a      	movs	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	189b      	adds	r3, r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	f7ff ffe0 	bl	8000e10 <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e7e:	d809      	bhi.n	8000e94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	231f      	movs	r3, #31
 8000e88:	401a      	ands	r2, r3
 8000e8a:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__NVIC_EnableIRQ+0x30>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eb4:	d828      	bhi.n	8000f08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f74 <__NVIC_SetPriority+0xd4>)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	33c0      	adds	r3, #192	@ 0xc0
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	589b      	ldr	r3, [r3, r2]
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	400a      	ands	r2, r1
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	401a      	ands	r2, r3
 8000edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	4003      	ands	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	481f      	ldr	r0, [pc, #124]	@ (8000f74 <__NVIC_SetPriority+0xd4>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	430a      	orrs	r2, r1
 8000f00:	33c0      	adds	r3, #192	@ 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f06:	e031      	b.n	8000f6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0019      	movs	r1, r3
 8000f10:	230f      	movs	r3, #15
 8000f12:	400b      	ands	r3, r1
 8000f14:	3b08      	subs	r3, #8
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3306      	adds	r3, #6
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	18d3      	adds	r3, r2, r3
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1dfa      	adds	r2, r7, #7
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	0011      	movs	r1, r2
 8000f28:	2203      	movs	r2, #3
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	00d2      	lsls	r2, r2, #3
 8000f2e:	21ff      	movs	r1, #255	@ 0xff
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	22ff      	movs	r2, #255	@ 0xff
 8000f40:	401a      	ands	r2, r3
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0018      	movs	r0, r3
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4003      	ands	r3, r0
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	001c      	movs	r4, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	4023      	ands	r3, r4
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	3306      	adds	r3, #6
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	18c3      	adds	r3, r0, r3
 8000f68:	3304      	adds	r3, #4
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b003      	add	sp, #12
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	045b      	lsls	r3, r3, #17
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d301      	bcc.n	8000f94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f90:	2301      	movs	r3, #1
 8000f92:	e010      	b.n	8000fb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <SysTick_Config+0x44>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3a01      	subs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff ff7c 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x44>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x44>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	210f      	movs	r1, #15
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	1c02      	adds	r2, r0, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	0002      	movs	r2, r0
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff33 	bl	8000e6c <__NVIC_EnableIRQ>
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ffaf 	bl	8000f7c <SysTick_Config>
 800101e:	0003      	movs	r3, r0
}
 8001020:	0018      	movs	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	@ 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2224      	movs	r2, #36	@ 0x24
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_DMA_Abort_IT+0x26>
 800104a:	2302      	movs	r3, #2
 800104c:	e05e      	b.n	800110c <HAL_DMA_Abort_IT+0xe4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2224      	movs	r2, #36	@ 0x24
 8001052:	2101      	movs	r1, #1
 8001054:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2225      	movs	r2, #37	@ 0x25
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d007      	beq.n	8001072 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e049      	b.n	8001106 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	210e      	movs	r1, #14
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	438a      	bics	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	491d      	ldr	r1, [pc, #116]	@ (8001114 <HAL_DMA_Abort_IT+0xec>)
 800109e:	400a      	ands	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_DMA_Abort_IT+0xf0>)
 80010a4:	6859      	ldr	r1, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	221c      	movs	r2, #28
 80010ac:	4013      	ands	r3, r2
 80010ae:	2201      	movs	r2, #1
 80010b0:	409a      	lsls	r2, r3
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_DMA_Abort_IT+0xf0>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010d4:	490f      	ldr	r1, [pc, #60]	@ (8001114 <HAL_DMA_Abort_IT+0xec>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80010e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2225      	movs	r2, #37	@ 0x25
 80010e8:	2101      	movs	r1, #1
 80010ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2224      	movs	r2, #36	@ 0x24
 80010f0:	2100      	movs	r1, #0
 80010f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	0010      	movs	r0, r2
 8001104:	4798      	blx	r3
    }
  }
  return status;
 8001106:	230f      	movs	r3, #15
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b004      	add	sp, #16
 8001112:	bd80      	pop	{r7, pc}
 8001114:	fffffeff 	.word	0xfffffeff
 8001118:	40020000 	.word	0x40020000

0800111c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2225      	movs	r2, #37	@ 0x25
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	b2db      	uxtb	r3, r3
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001142:	e153      	b.n	80013ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4091      	lsls	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d100      	bne.n	800115c <HAL_GPIO_Init+0x28>
 800115a:	e144      	b.n	80013e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x38>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d125      	bne.n	80011b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	58d3      	ldr	r3, [r2, r3]
 8001178:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2207      	movs	r2, #7
 800117e:	4013      	ands	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2107      	movs	r1, #7
 800119c:	400b      	ands	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	43da      	mvns	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	401a      	ands	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d00b      	beq.n	800120c <HAL_GPIO_Init+0xd8>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001200:	2b11      	cmp	r3, #17
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4013      	ands	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	2201      	movs	r2, #1
 800125a:	401a      	ands	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d017      	beq.n	80012a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	4013      	ands	r3, r2
 800128c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	@ 0x80
 80012ac:	055b      	lsls	r3, r3, #21
 80012ae:	4013      	ands	r3, r2
 80012b0:	d100      	bne.n	80012b4 <HAL_GPIO_Init+0x180>
 80012b2:	e098      	b.n	80013e6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80012b4:	4a53      	ldr	r2, [pc, #332]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3318      	adds	r3, #24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	589b      	ldr	r3, [r3, r2]
 80012c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	220f      	movs	r2, #15
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	43da      	mvns	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	23a0      	movs	r3, #160	@ 0xa0
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	429a      	cmp	r2, r3
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x1e2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a48      	ldr	r2, [pc, #288]	@ (8001408 <HAL_GPIO_Init+0x2d4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x1de>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a47      	ldr	r2, [pc, #284]	@ (800140c <HAL_GPIO_Init+0x2d8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x1da>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a46      	ldr	r2, [pc, #280]	@ (8001410 <HAL_GPIO_Init+0x2dc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x1d6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a45      	ldr	r2, [pc, #276]	@ (8001414 <HAL_GPIO_Init+0x2e0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x1d2>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001306:	2306      	movs	r3, #6
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x1e4>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x1e4>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x1e4>
 8001316:	2300      	movs	r3, #0
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	2103      	movs	r1, #3
 800131c:	400a      	ands	r2, r1
 800131e:	00d2      	lsls	r2, r2, #3
 8001320:	4093      	lsls	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001328:	4936      	ldr	r1, [pc, #216]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3318      	adds	r3, #24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001336:	4a33      	ldr	r2, [pc, #204]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43da      	mvns	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	4013      	ands	r3, r2
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800135c:	4929      	ldr	r1, [pc, #164]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001364:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 8001366:	2384      	movs	r3, #132	@ 0x84
 8001368:	58d3      	ldr	r3, [r2, r3]
 800136a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43da      	mvns	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4013      	ands	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800138a:	491e      	ldr	r1, [pc, #120]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 800138c:	2284      	movs	r2, #132	@ 0x84
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4013      	ands	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	039b      	lsls	r3, r3, #14
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_GPIO_Init+0x2d0>)
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3301      	adds	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	d000      	beq.n	80013fa <HAL_GPIO_Init+0x2c6>
 80013f8:	e6a4      	b.n	8001144 <HAL_GPIO_Init+0x10>
  }
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021800 	.word	0x40021800
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	50000c00 	.word	0x50000c00
 8001414:	50001400 	.word	0x50001400

08001418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	000a      	movs	r2, r1
 8001422:	1cbb      	adds	r3, r7, #2
 8001424:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	1cba      	adds	r2, r7, #2
 800142c:	8812      	ldrh	r2, [r2, #0]
 800142e:	4013      	ands	r3, r2
 8001430:	d004      	beq.n	800143c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e003      	b.n	8001444 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143c:	230f      	movs	r3, #15
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001444:	230f      	movs	r3, #15
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	781b      	ldrb	r3, [r3, #0]
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	0008      	movs	r0, r1
 800145c:	0011      	movs	r1, r2
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	1c02      	adds	r2, r0, #0
 8001462:	801a      	strh	r2, [r3, #0]
 8001464:	1c7b      	adds	r3, r7, #1
 8001466:	1c0a      	adds	r2, r1, #0
 8001468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146a:	1c7b      	adds	r3, r7, #1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	1cbb      	adds	r3, r7, #2
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147a:	e003      	b.n	8001484 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147c:	1cbb      	adds	r3, r7, #2
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e08f      	b.n	80015be <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2241      	movs	r2, #65	@ 0x41
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2240      	movs	r2, #64	@ 0x40
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fb23 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2241      	movs	r2, #65	@ 0x41
 80014be:	2124      	movs	r1, #36	@ 0x24
 80014c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	493b      	ldr	r1, [pc, #236]	@ (80015c8 <HAL_I2C_Init+0x13c>)
 80014dc:	400a      	ands	r2, r1
 80014de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4938      	ldr	r1, [pc, #224]	@ (80015cc <HAL_I2C_Init+0x140>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0209      	lsls	r1, r1, #8
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e007      	b.n	800151a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2184      	movs	r1, #132	@ 0x84
 8001514:	0209      	lsls	r1, r1, #8
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d109      	bne.n	8001536 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	0109      	lsls	r1, r1, #4
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	e007      	b.n	8001546 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4923      	ldr	r1, [pc, #140]	@ (80015d0 <HAL_I2C_Init+0x144>)
 8001542:	400a      	ands	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4920      	ldr	r1, [pc, #128]	@ (80015d4 <HAL_I2C_Init+0x148>)
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	491a      	ldr	r1, [pc, #104]	@ (80015cc <HAL_I2C_Init+0x140>)
 8001562:	400a      	ands	r2, r1
 8001564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	431a      	orrs	r2, r3
 8001570:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69d9      	ldr	r1, [r3, #28]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2241      	movs	r2, #65	@ 0x41
 80015aa:	2120      	movs	r1, #32
 80015ac:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2242      	movs	r2, #66	@ 0x42
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	f0ffffff 	.word	0xf0ffffff
 80015cc:	ffff7fff 	.word	0xffff7fff
 80015d0:	fffff7ff 	.word	0xfffff7ff
 80015d4:	02008000 	.word	0x02008000

080015d8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	1dbb      	adds	r3, r7, #6
 80015e6:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2241      	movs	r2, #65	@ 0x41
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	001a      	movs	r2, r3
 80015f2:	2328      	movs	r3, #40	@ 0x28
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b28      	cmp	r3, #40	@ 0x28
 80015f8:	d000      	beq.n	80015fc <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 80015fa:	e09f      	b.n	800173c <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8001602:	1dbb      	adds	r3, r7, #6
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e093      	b.n	800173e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001616:	4a4c      	ldr	r2, [pc, #304]	@ (8001748 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f001 fc0b 	bl	8002e38 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2240      	movs	r2, #64	@ 0x40
 8001626:	5c9b      	ldrb	r3, [r3, r2]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 800162c:	2302      	movs	r3, #2
 800162e:	e086      	b.n	800173e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	2101      	movs	r1, #1
 8001636:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2241      	movs	r2, #65	@ 0x41
 800163c:	5c9b      	ldrb	r3, [r3, r2]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b2a      	cmp	r3, #42	@ 0x2a
 8001642:	d12c      	bne.n	800169e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2102      	movs	r1, #2
 8001648:	0018      	movs	r0, r3
 800164a:	f001 fbf5 	bl	8002e38 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	401a      	ands	r2, r3
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	429a      	cmp	r2, r3
 8001660:	d11d      	bne.n	800169e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4937      	ldr	r1, [pc, #220]	@ (800174c <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d011      	beq.n	800169e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167e:	4a34      	ldr	r2, [pc, #208]	@ (8001750 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fcce 	bl	8001028 <HAL_DMA_Abort_IT>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d006      	beq.n	800169e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169a:	0018      	movs	r0, r3
 800169c:	4790      	blx	r2
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2241      	movs	r2, #65	@ 0x41
 80016a2:	2129      	movs	r1, #41	@ 0x29
 80016a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2242      	movs	r2, #66	@ 0x42
 80016aa:	2120      	movs	r1, #32
 80016ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4923      	ldr	r1, [pc, #140]	@ (800174c <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1dba      	adds	r2, r7, #6
 80016ce:	8812      	ldrh	r2, [r2, #0]
 80016d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2208      	movs	r2, #8
 80016f0:	4013      	ands	r3, r2
 80016f2:	3b08      	subs	r3, #8
 80016f4:	425a      	negs	r2, r3
 80016f6:	4153      	adcs	r3, r2
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	2117      	movs	r1, #23
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2240      	movs	r2, #64	@ 0x40
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f001 faf6 	bl	8002d24 <I2C_Enable_IRQ>

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
  }
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b006      	add	sp, #24
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	00008001 	.word	0x00008001
 800174c:	ffff7fff 	.word	0xffff7fff
 8001750:	08002c73 	.word	0x08002c73
 8001754:	08001a7d 	.word	0x08001a7d

08001758 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	1dbb      	adds	r3, r7, #6
 8001766:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2241      	movs	r2, #65	@ 0x41
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	001a      	movs	r2, r3
 8001772:	2328      	movs	r3, #40	@ 0x28
 8001774:	4013      	ands	r3, r2
 8001776:	2b28      	cmp	r3, #40	@ 0x28
 8001778:	d000      	beq.n	800177c <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 800177a:	e09f      	b.n	80018bc <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2280      	movs	r2, #128	@ 0x80
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e093      	b.n	80018be <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001796:	4a4c      	ldr	r2, [pc, #304]	@ (80018c8 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f001 fb4b 	bl	8002e38 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2240      	movs	r2, #64	@ 0x40
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e086      	b.n	80018be <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2241      	movs	r2, #65	@ 0x41
 80017bc:	5c9b      	ldrb	r3, [r3, r2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b29      	cmp	r3, #41	@ 0x29
 80017c2:	d12c      	bne.n	800181e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2101      	movs	r1, #1
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 fb35 	bl	8002e38 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	401a      	ands	r2, r3
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	01db      	lsls	r3, r3, #7
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11d      	bne.n	800181e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4937      	ldr	r1, [pc, #220]	@ (80018cc <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d011      	beq.n	800181e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8001800:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff fc0e 	bl	8001028 <HAL_DMA_Abort_IT>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d006      	beq.n	800181e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	0018      	movs	r0, r3
 800181c:	4790      	blx	r2
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2241      	movs	r2, #65	@ 0x41
 8001822:	212a      	movs	r1, #42	@ 0x2a
 8001824:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2242      	movs	r2, #66	@ 0x42
 800182a:	2120      	movs	r1, #32
 800182c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4925      	ldr	r1, [pc, #148]	@ (80018d4 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8001840:	400a      	ands	r2, r1
 8001842:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1dba      	adds	r2, r7, #6
 800184e:	8812      	ldrh	r2, [r2, #0]
 8001850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2208      	movs	r2, #8
 8001870:	4013      	ands	r3, r2
 8001872:	3b08      	subs	r3, #8
 8001874:	425a      	negs	r2, r3
 8001876:	4153      	adcs	r3, r2
 8001878:	b2da      	uxtb	r2, r3
 800187a:	2117      	movs	r1, #23
 800187c:	187b      	adds	r3, r7, r1
 800187e:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 8001894:	187b      	adds	r3, r7, r1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2240      	movs	r2, #64	@ 0x40
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0011      	movs	r1, r2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 fa36 	bl	8002d24 <I2C_Enable_IRQ>

    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e000      	b.n	80018be <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
  }
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b006      	add	sp, #24
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	00008002 	.word	0x00008002
 80018cc:	ffffbfff 	.word	0xffffbfff
 80018d0:	08002c73 	.word	0x08002c73
 80018d4:	ffff7fff 	.word	0xffff7fff
 80018d8:	08001a7d 	.word	0x08001a7d

080018dc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2241      	movs	r2, #65	@ 0x41
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d10f      	bne.n	8001910 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2241      	movs	r2, #65	@ 0x41
 80018f4:	2128      	movs	r1, #40	@ 0x28
 80018f6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <HAL_I2C_EnableListen_IT+0x40>)
 80018fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	021a      	lsls	r2, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f001 fa0c 	bl	8002d24 <I2C_Enable_IRQ>

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	08001a7d 	.word	0x08001a7d

08001920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	68f9      	ldr	r1, [r7, #12]
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
  }
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4013      	ands	r3, r2
 8001974:	d00e      	beq.n	8001994 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800197c:	d00a      	beq.n	8001994 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	2201      	movs	r2, #1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4013      	ands	r3, r2
 800199c:	d00e      	beq.n	80019bc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019a4:	d00a      	beq.n	80019bc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	2208      	movs	r2, #8
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	00d2      	lsls	r2, r2, #3
 80019ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019cc:	d00a      	beq.n	80019e4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	2202      	movs	r2, #2
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2280      	movs	r2, #128	@ 0x80
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	220b      	movs	r2, #11
 80019ee:	4013      	ands	r3, r2
 80019f0:	d005      	beq.n	80019fe <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 ffed 	bl	80029d8 <I2C_ITError>
  }
}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b006      	add	sp, #24
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <I2C_Slave_ISR_IT+0x24>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0e6      	b.n	8001c6e <I2C_Slave_ISR_IT+0x1f2>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2240      	movs	r2, #64	@ 0x40
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ab6:	d005      	beq.n	8001ac4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0011      	movs	r1, r2
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 fe02 	bl	80026c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d052      	beq.n	8001b72 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ad2:	d04e      	beq.n	8001b72 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d12d      	bne.n	8001b3a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2241      	movs	r2, #65	@ 0x41
 8001ae2:	5c9b      	ldrb	r3, [r3, r2]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b28      	cmp	r3, #40	@ 0x28
 8001ae8:	d10b      	bne.n	8001b02 <I2C_Slave_ISR_IT+0x86>
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	049b      	lsls	r3, r3, #18
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 ff14 	bl	8002928 <I2C_ITListenCplt>
 8001b00:	e036      	b.n	8001b70 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2241      	movs	r2, #65	@ 0x41
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b29      	cmp	r3, #41	@ 0x29
 8001b0c:	d110      	bne.n	8001b30 <I2C_Slave_ISR_IT+0xb4>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4a59      	ldr	r2, [pc, #356]	@ (8001c78 <I2C_Slave_ISR_IT+0x1fc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00c      	beq.n	8001b30 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 f884 	bl	8002c2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 fc9b 	bl	8002464 <I2C_ITSlaveSeqCplt>
 8001b2e:	e01f      	b.n	8001b70 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2210      	movs	r2, #16
 8001b36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001b38:	e091      	b.n	8001c5e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	2204      	movs	r2, #4
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <I2C_Slave_ISR_IT+0xe4>
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	045b      	lsls	r3, r3, #17
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d000      	beq.n	8001b60 <I2C_Slave_ISR_IT+0xe4>
 8001b5e:	e07e      	b.n	8001c5e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	0011      	movs	r1, r2
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 ff35 	bl	80029d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b6e:	e076      	b.n	8001c5e <I2C_Slave_ISR_IT+0x1e2>
 8001b70:	e075      	b.n	8001c5e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2204      	movs	r2, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	d02f      	beq.n	8001bda <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b80:	d02b      	beq.n	8001bda <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d018      	beq.n	8001bbe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d14c      	bne.n	8001c62 <I2C_Slave_ISR_IT+0x1e6>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4a2b      	ldr	r2, [pc, #172]	@ (8001c78 <I2C_Slave_ISR_IT+0x1fc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d048      	beq.n	8001c62 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fc46 	bl	8002464 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001bd8:	e043      	b.n	8001c62 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4013      	ands	r3, r2
 8001be0:	d00a      	beq.n	8001bf8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2208      	movs	r2, #8
 8001be6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001be8:	d006      	beq.n	8001bf8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fb51 	bl	8002298 <I2C_ITAddrCplt>
 8001bf6:	e035      	b.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d031      	beq.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c06:	d02d      	beq.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d018      	beq.n	8001c44 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001c42:	e00f      	b.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	045b      	lsls	r3, r3, #17
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d002      	beq.n	8001c54 <I2C_Slave_ISR_IT+0x1d8>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fc04 	bl	8002464 <I2C_ITSlaveSeqCplt>
 8001c5c:	e002      	b.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	e000      	b.n	8001c64 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001c62:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	@ 0x40
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b006      	add	sp, #24
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2240      	movs	r2, #64	@ 0x40
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <I2C_Master_ISR_DMA+0x1a>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e0e7      	b.n	8001e66 <I2C_Master_ISR_DMA+0x1ea>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2240      	movs	r2, #64	@ 0x40
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d017      	beq.n	8001cd6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cac:	d013      	beq.n	8001cd6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	2204      	movs	r2, #4
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f001 f82c 	bl	8002d24 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 ffad 	bl	8002c2e <I2C_Flush_TXDR>
 8001cd4:	e0c2      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <I2C_Master_ISR_DMA+0x64>
 8001cde:	e07c      	b.n	8001dda <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ce6:	d100      	bne.n	8001cea <I2C_Master_ISR_DMA+0x6e>
 8001ce8:	e077      	b.n	8001dda <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2140      	movs	r1, #64	@ 0x40
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d055      	beq.n	8001db0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	0592      	lsls	r2, r2, #22
 8001d12:	0d92      	lsrs	r2, r2, #22
 8001d14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2bff      	cmp	r3, #255	@ 0xff
 8001d1e:	d906      	bls.n	8001d2e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	22ff      	movs	r2, #255	@ 0xff
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	045b      	lsls	r3, r3, #17
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e010      	b.n	8001d50 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e70 <I2C_Master_ISR_DMA+0x1f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e002      	b.n	8001d50 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	697c      	ldr	r4, [r7, #20]
 8001d58:	2312      	movs	r3, #18
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	8819      	ldrh	r1, [r3, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	0023      	movs	r3, r4
 8001d66:	f000 ffa3 	bl	8002cb0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2241      	movs	r2, #65	@ 0x41
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b22      	cmp	r3, #34	@ 0x22
 8001d86:	d109      	bne.n	8001d9c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	0209      	lsls	r1, r1, #8
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d9a:	e05f      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	01c9      	lsls	r1, r1, #7
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dae:	e055      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	049b      	lsls	r3, r3, #18
 8001dba:	401a      	ands	r2, r3
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	049b      	lsls	r3, r3, #18
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d004      	beq.n	8001dce <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fb0a 	bl	80023e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001dcc:	e046      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2140      	movs	r1, #64	@ 0x40
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fe00 	bl	80029d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001dd8:	e040      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	4013      	ands	r3, r2
 8001de0:	d02c      	beq.n	8001e3c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001de8:	d028      	beq.n	8001e3c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11d      	bne.n	8001e30 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	2380      	movs	r3, #128	@ 0x80
 8001dfc:	049b      	lsls	r3, r3, #18
 8001dfe:	401a      	ands	r2, r3
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	049b      	lsls	r3, r3, #18
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d028      	beq.n	8001e5a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	4a18      	ldr	r2, [pc, #96]	@ (8001e70 <I2C_Master_ISR_DMA+0x1f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d109      	bne.n	8001e26 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	01c9      	lsls	r1, r1, #7
 8001e20:	430a      	orrs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e24:	e019      	b.n	8001e5a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 fad9 	bl	80023e0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e2e:	e014      	b.n	8001e5a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2140      	movs	r1, #64	@ 0x40
 8001e34:	0018      	movs	r0, r3
 8001e36:	f000 fdcf 	bl	80029d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e3a:	e00e      	b.n	8001e5a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e4a:	d007      	beq.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fb6a 	bl	800252c <I2C_ITMasterCplt>
 8001e58:	e000      	b.n	8001e5c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001e5a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b007      	add	sp, #28
 8001e6c:	bd90      	pop	{r4, r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	ffff0000 	.word	0xffff0000

08001e74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001e80:	4b90      	ldr	r3, [pc, #576]	@ (80020c4 <I2C_Mem_ISR_DMA+0x250>)
 8001e82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <I2C_Mem_ISR_DMA+0x1e>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e113      	b.n	80020ba <I2C_Mem_ISR_DMA+0x246>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2240      	movs	r2, #64	@ 0x40
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d017      	beq.n	8001ed2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ea8:	d013      	beq.n	8001ed2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 ff2e 	bl	8002d24 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 feaf 	bl	8002c2e <I2C_Flush_TXDR>
 8001ed0:	e0ee      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ee0:	d009      	beq.n	8001ef6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ef4:	e0dc      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2280      	movs	r2, #128	@ 0x80
 8001efa:	4013      	ands	r3, r2
 8001efc:	d063      	beq.n	8001fc6 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2240      	movs	r2, #64	@ 0x40
 8001f02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f04:	d05f      	beq.n	8001fc6 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 ff94 	bl	8002e38 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2110      	movs	r1, #16
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 ff05 	bl	8002d24 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d04a      	beq.n	8001fba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2bff      	cmp	r3, #255	@ 0xff
 8001f2c:	d910      	bls.n	8001f50 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22ff      	movs	r2, #255	@ 0xff
 8001f32:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	b299      	uxth	r1, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	045b      	lsls	r3, r3, #17
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	2400      	movs	r4, #0
 8001f48:	9400      	str	r4, [sp, #0]
 8001f4a:	f000 feb1 	bl	8002cb0 <I2C_TransferConfig>
 8001f4e:	e011      	b.n	8001f74 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	b299      	uxth	r1, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	049b      	lsls	r3, r3, #18
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	9400      	str	r4, [sp, #0]
 8001f70:	f000 fe9e 	bl	8002cb0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2241      	movs	r2, #65	@ 0x41
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b22      	cmp	r3, #34	@ 0x22
 8001f90:	d109      	bne.n	8001fa6 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0209      	lsls	r1, r1, #8
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001fa4:	e084      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	01c9      	lsls	r1, r1, #7
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001fb8:	e07a      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2140      	movs	r1, #64	@ 0x40
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 fd0a 	bl	80029d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001fc4:	e074      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2240      	movs	r2, #64	@ 0x40
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d062      	beq.n	8002094 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001fd4:	d05e      	beq.n	8002094 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 ff2c 	bl	8002e38 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 fe9d 	bl	8002d24 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2241      	movs	r2, #65	@ 0x41
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b22      	cmp	r3, #34	@ 0x22
 8001ff4:	d101      	bne.n	8001ffa <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <I2C_Mem_ISR_DMA+0x254>)
 8001ff8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2bff      	cmp	r3, #255	@ 0xff
 8002002:	d911      	bls.n	8002028 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	22ff      	movs	r2, #255	@ 0xff
 8002008:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	b299      	uxth	r1, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	045c      	lsls	r4, r3, #17
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	0023      	movs	r3, r4
 8002022:	f000 fe45 	bl	8002cb0 <I2C_TransferConfig>
 8002026:	e012      	b.n	800204e <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	b299      	uxth	r1, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800203c:	b2da      	uxtb	r2, r3
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	049c      	lsls	r4, r3, #18
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	0023      	movs	r3, r4
 800204a:	f000 fe31 	bl	8002cb0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2241      	movs	r2, #65	@ 0x41
 8002064:	5c9b      	ldrb	r3, [r3, r2]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b22      	cmp	r3, #34	@ 0x22
 800206a:	d109      	bne.n	8002080 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2180      	movs	r1, #128	@ 0x80
 8002078:	0209      	lsls	r1, r1, #8
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800207e:	e017      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	01c9      	lsls	r1, r1, #7
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002092:	e00d      	b.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2220      	movs	r2, #32
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020a2:	d005      	beq.n	80020b0 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	0011      	movs	r1, r2
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fa3e 	bl	800252c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b007      	add	sp, #28
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	80002000 	.word	0x80002000
 80020c8:	80002400 	.word	0x80002400

080020cc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <I2C_Slave_ISR_DMA+0x24>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0cd      	b.n	800228c <I2C_Slave_ISR_DMA+0x1c0>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2220      	movs	r2, #32
 80020fc:	4013      	ands	r3, r2
 80020fe:	d009      	beq.n	8002114 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002106:	d005      	beq.n	8002114 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0011      	movs	r1, r2
 800210e:	0018      	movs	r0, r3
 8002110:	f000 fada 	bl	80026c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2210      	movs	r2, #16
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <I2C_Slave_ISR_DMA+0x52>
 800211c:	e0a3      	b.n	8002266 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2210      	movs	r2, #16
 8002122:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002124:	d100      	bne.n	8002128 <I2C_Slave_ISR_DMA+0x5c>
 8002126:	e09e      	b.n	8002266 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	01db      	lsls	r3, r3, #7
 800212e:	4013      	ands	r3, r2
 8002130:	d105      	bne.n	800213e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800213a:	d100      	bne.n	800213e <I2C_Slave_ISR_DMA+0x72>
 800213c:	e08c      	b.n	8002258 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	4013      	ands	r3, r2
 800214e:	d007      	beq.n	8002160 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00c      	beq.n	8002182 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4013      	ands	r3, r2
 8002170:	d007      	beq.n	8002182 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d12d      	bne.n	80021e4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2241      	movs	r2, #65	@ 0x41
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b28      	cmp	r3, #40	@ 0x28
 8002192:	d10b      	bne.n	80021ac <I2C_Slave_ISR_DMA+0xe0>
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	049b      	lsls	r3, r3, #18
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0011      	movs	r1, r2
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 fbbf 	bl	8002928 <I2C_ITListenCplt>
 80021aa:	e054      	b.n	8002256 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2241      	movs	r2, #65	@ 0x41
 80021b0:	5c9b      	ldrb	r3, [r3, r2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b29      	cmp	r3, #41	@ 0x29
 80021b6:	d110      	bne.n	80021da <I2C_Slave_ISR_DMA+0x10e>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4a36      	ldr	r2, [pc, #216]	@ (8002294 <I2C_Slave_ISR_DMA+0x1c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00c      	beq.n	80021da <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2210      	movs	r2, #16
 80021c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 fd2f 	bl	8002c2e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f946 	bl	8002464 <I2C_ITSlaveSeqCplt>
 80021d8:	e03d      	b.n	8002256 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2210      	movs	r2, #16
 80021e0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80021e2:	e03e      	b.n	8002262 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2210      	movs	r2, #16
 80021ea:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	2204      	movs	r2, #4
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80021f8:	2317      	movs	r3, #23
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	2141      	movs	r1, #65	@ 0x41
 8002200:	5c52      	ldrb	r2, [r2, r1]
 8002202:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <I2C_Slave_ISR_DMA+0x148>
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	045b      	lsls	r3, r3, #17
 8002210:	429a      	cmp	r2, r3
 8002212:	d126      	bne.n	8002262 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002214:	2217      	movs	r2, #23
 8002216:	18bb      	adds	r3, r7, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b21      	cmp	r3, #33	@ 0x21
 800221c:	d003      	beq.n	8002226 <I2C_Slave_ISR_DMA+0x15a>
 800221e:	18bb      	adds	r3, r7, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b29      	cmp	r3, #41	@ 0x29
 8002224:	d103      	bne.n	800222e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2221      	movs	r2, #33	@ 0x21
 800222a:	631a      	str	r2, [r3, #48]	@ 0x30
 800222c:	e00b      	b.n	8002246 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800222e:	2217      	movs	r2, #23
 8002230:	18bb      	adds	r3, r7, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b22      	cmp	r3, #34	@ 0x22
 8002236:	d003      	beq.n	8002240 <I2C_Slave_ISR_DMA+0x174>
 8002238:	18bb      	adds	r3, r7, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b2a      	cmp	r3, #42	@ 0x2a
 800223e:	d102      	bne.n	8002246 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2222      	movs	r2, #34	@ 0x22
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f000 fbc2 	bl	80029d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002254:	e005      	b.n	8002262 <I2C_Slave_ISR_DMA+0x196>
 8002256:	e004      	b.n	8002262 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2210      	movs	r2, #16
 800225e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002260:	e00f      	b.n	8002282 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8002262:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002264:	e00d      	b.n	8002282 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2208      	movs	r2, #8
 800226a:	4013      	ands	r3, r2
 800226c:	d009      	beq.n	8002282 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002274:	d005      	beq.n	8002282 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f80b 	bl	8002298 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2240      	movs	r2, #64	@ 0x40
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b008      	add	sp, #32
 8002292:	bd80      	pop	{r7, pc}
 8002294:	ffff0000 	.word	0xffff0000

08002298 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2241      	movs	r2, #65	@ 0x41
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	2328      	movs	r3, #40	@ 0x28
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b28      	cmp	r3, #40	@ 0x28
 80022b2:	d000      	beq.n	80022b6 <I2C_ITAddrCplt+0x1e>
 80022b4:	e088      	b.n	80023c8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	250f      	movs	r5, #15
 80022c2:	197b      	adds	r3, r7, r5
 80022c4:	2101      	movs	r1, #1
 80022c6:	400a      	ands	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	200c      	movs	r0, #12
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	21fe      	movs	r1, #254	@ 0xfe
 80022da:	400a      	ands	r2, r1
 80022dc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	240a      	movs	r4, #10
 80022e8:	193b      	adds	r3, r7, r4
 80022ea:	0592      	lsls	r2, r2, #22
 80022ec:	0d92      	lsrs	r2, r2, #22
 80022ee:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	2308      	movs	r3, #8
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	21fe      	movs	r1, #254	@ 0xfe
 80022fe:	400a      	ands	r2, r1
 8002300:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d148      	bne.n	800239c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800230a:	0021      	movs	r1, r4
 800230c:	187b      	adds	r3, r7, r1
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	09db      	lsrs	r3, r3, #7
 8002312:	b29a      	uxth	r2, r3
 8002314:	183b      	adds	r3, r7, r0
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	4053      	eors	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	001a      	movs	r2, r3
 800231e:	2306      	movs	r3, #6
 8002320:	4013      	ands	r3, r2
 8002322:	d120      	bne.n	8002366 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002324:	183b      	adds	r3, r7, r0
 8002326:	187a      	adds	r2, r7, r1
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	2b02      	cmp	r3, #2
 800233c:	d14c      	bne.n	80023d8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2208      	movs	r2, #8
 800234a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2240      	movs	r2, #64	@ 0x40
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002354:	183b      	adds	r3, r7, r0
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	197b      	adds	r3, r7, r5
 800235a:	7819      	ldrb	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0018      	movs	r0, r3
 8002360:	f7fe f972 	bl	8000648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002364:	e038      	b.n	80023d8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002366:	240c      	movs	r4, #12
 8002368:	193b      	adds	r3, r7, r4
 800236a:	2208      	movs	r2, #8
 800236c:	18ba      	adds	r2, r7, r2
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	021a      	lsls	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fd5c 	bl	8002e38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	2100      	movs	r1, #0
 8002386:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002388:	193b      	adds	r3, r7, r4
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	7819      	ldrb	r1, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f7fe f957 	bl	8000648 <HAL_I2C_AddrCallback>
}
 800239a:	e01d      	b.n	80023d8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	021a      	lsls	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fd47 	bl	8002e38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2240      	movs	r2, #64	@ 0x40
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023b2:	230c      	movs	r3, #12
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	881a      	ldrh	r2, [r3, #0]
 80023b8:	230f      	movs	r3, #15
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	7819      	ldrb	r1, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe f941 	bl	8000648 <HAL_I2C_AddrCallback>
}
 80023c6:	e007      	b.n	80023d8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2208      	movs	r2, #8
 80023ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2240      	movs	r2, #64	@ 0x40
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]
}
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bdb0      	pop	{r4, r5, r7, pc}

080023e0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2242      	movs	r2, #66	@ 0x42
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2241      	movs	r2, #65	@ 0x41
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b21      	cmp	r3, #33	@ 0x21
 80023fa:	d117      	bne.n	800242c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2241      	movs	r2, #65	@ 0x41
 8002400:	2120      	movs	r1, #32
 8002402:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2211      	movs	r2, #17
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2101      	movs	r1, #1
 8002414:	0018      	movs	r0, r3
 8002416:	f000 fd0f 	bl	8002e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2240      	movs	r2, #64	@ 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff faee 	bl	8001a06 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800242a:	e016      	b.n	800245a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2241      	movs	r2, #65	@ 0x41
 8002430:	2120      	movs	r1, #32
 8002432:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2212      	movs	r2, #18
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2102      	movs	r1, #2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fcf7 	bl	8002e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fade 	bl	8001a16 <HAL_I2C_MasterRxCpltCallback>
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2242      	movs	r2, #66	@ 0x42
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	01db      	lsls	r3, r3, #7
 8002482:	4013      	ands	r3, r2
 8002484:	d008      	beq.n	8002498 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4924      	ldr	r1, [pc, #144]	@ (8002524 <I2C_ITSlaveSeqCplt+0xc0>)
 8002492:	400a      	ands	r2, r1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00c      	b.n	80024b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	4013      	ands	r3, r2
 80024a0:	d007      	beq.n	80024b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	491e      	ldr	r1, [pc, #120]	@ (8002528 <I2C_ITSlaveSeqCplt+0xc4>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2241      	movs	r2, #65	@ 0x41
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b29      	cmp	r3, #41	@ 0x29
 80024bc:	d114      	bne.n	80024e8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2241      	movs	r2, #65	@ 0x41
 80024c2:	2128      	movs	r1, #40	@ 0x28
 80024c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2221      	movs	r2, #33	@ 0x21
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2101      	movs	r1, #1
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 fcb1 	bl	8002e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff faa0 	bl	8001a26 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024e6:	e019      	b.n	800251c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2241      	movs	r2, #65	@ 0x41
 80024ec:	5c9b      	ldrb	r3, [r3, r2]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80024f2:	d113      	bne.n	800251c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2241      	movs	r2, #65	@ 0x41
 80024f8:	2128      	movs	r1, #40	@ 0x28
 80024fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2222      	movs	r2, #34	@ 0x22
 8002500:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2102      	movs	r1, #2
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fc96 	bl	8002e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f7fe f8ea 	bl	80006f0 <HAL_I2C_SlaveRxCpltCallback>
}
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bd80      	pop	{r7, pc}
 8002524:	ffffbfff 	.word	0xffffbfff
 8002528:	ffff7fff 	.word	0xffff7fff

0800252c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2241      	movs	r2, #65	@ 0x41
 8002546:	5c9b      	ldrb	r3, [r3, r2]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b21      	cmp	r3, #33	@ 0x21
 800254c:	d108      	bne.n	8002560 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2101      	movs	r1, #1
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fc70 	bl	8002e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2211      	movs	r2, #17
 800255c:	631a      	str	r2, [r3, #48]	@ 0x30
 800255e:	e00d      	b.n	800257c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2241      	movs	r2, #65	@ 0x41
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b22      	cmp	r3, #34	@ 0x22
 800256a:	d107      	bne.n	800257c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2102      	movs	r1, #2
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fc61 	bl	8002e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2212      	movs	r2, #18
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	494e      	ldr	r1, [pc, #312]	@ (80026c0 <I2C_ITMasterCplt+0x194>)
 8002588:	400a      	ands	r2, r1
 800258a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	@ (80026c4 <I2C_ITMasterCplt+0x198>)
 8002596:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2210      	movs	r2, #16
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	2204      	movs	r2, #4
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2241      	movs	r2, #65	@ 0x41
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b60      	cmp	r3, #96	@ 0x60
 80025be:	d109      	bne.n	80025d4 <I2C_ITMasterCplt+0xa8>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2204      	movs	r2, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d005      	beq.n	80025d4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80025d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fb29 	bl	8002c2e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2241      	movs	r2, #65	@ 0x41
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b60      	cmp	r3, #96	@ 0x60
 80025ec:	d002      	beq.n	80025f4 <I2C_ITMasterCplt+0xc8>
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f9eb 	bl	80029d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002602:	e058      	b.n	80026b6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2241      	movs	r2, #65	@ 0x41
 8002608:	5c9b      	ldrb	r3, [r3, r2]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b21      	cmp	r3, #33	@ 0x21
 800260e:	d126      	bne.n	800265e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2241      	movs	r2, #65	@ 0x41
 8002614:	2120      	movs	r1, #32
 8002616:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2242      	movs	r2, #66	@ 0x42
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b40      	cmp	r3, #64	@ 0x40
 8002628:	d10c      	bne.n	8002644 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2242      	movs	r2, #66	@ 0x42
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2240      	movs	r2, #64	@ 0x40
 8002636:	2100      	movs	r1, #0
 8002638:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff f9fa 	bl	8001a36 <HAL_I2C_MemTxCpltCallback>
}
 8002642:	e038      	b.n	80026b6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2242      	movs	r2, #66	@ 0x42
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	@ 0x40
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0018      	movs	r0, r3
 8002658:	f7ff f9d5 	bl	8001a06 <HAL_I2C_MasterTxCpltCallback>
}
 800265c:	e02b      	b.n	80026b6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2241      	movs	r2, #65	@ 0x41
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b22      	cmp	r3, #34	@ 0x22
 8002668:	d125      	bne.n	80026b6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2241      	movs	r2, #65	@ 0x41
 800266e:	2120      	movs	r1, #32
 8002670:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2242      	movs	r2, #66	@ 0x42
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b40      	cmp	r3, #64	@ 0x40
 8002682:	d10c      	bne.n	800269e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2242      	movs	r2, #66	@ 0x42
 8002688:	2100      	movs	r1, #0
 800268a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2240      	movs	r2, #64	@ 0x40
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff f9d5 	bl	8001a46 <HAL_I2C_MemRxCpltCallback>
}
 800269c:	e00b      	b.n	80026b6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2242      	movs	r2, #66	@ 0x42
 80026a2:	2100      	movs	r1, #0
 80026a4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff f9b0 	bl	8001a16 <HAL_I2C_MasterRxCpltCallback>
}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b006      	add	sp, #24
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	fe00e800 	.word	0xfe00e800
 80026c4:	ffff0000 	.word	0xffff0000

080026c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026de:	200f      	movs	r0, #15
 80026e0:	183b      	adds	r3, r7, r0
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	2141      	movs	r1, #65	@ 0x41
 80026e6:	5c52      	ldrb	r2, [r2, r1]
 80026e8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b21      	cmp	r3, #33	@ 0x21
 80026f8:	d003      	beq.n	8002702 <I2C_ITSlaveCplt+0x3a>
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b29      	cmp	r3, #41	@ 0x29
 8002700:	d109      	bne.n	8002716 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002702:	4a82      	ldr	r2, [pc, #520]	@ (800290c <I2C_ITSlaveCplt+0x244>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 fb95 	bl	8002e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2221      	movs	r2, #33	@ 0x21
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
 8002714:	e020      	b.n	8002758 <I2C_ITSlaveCplt+0x90>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002716:	220f      	movs	r2, #15
 8002718:	18bb      	adds	r3, r7, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b22      	cmp	r3, #34	@ 0x22
 800271e:	d003      	beq.n	8002728 <I2C_ITSlaveCplt+0x60>
 8002720:	18bb      	adds	r3, r7, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b2a      	cmp	r3, #42	@ 0x2a
 8002726:	d109      	bne.n	800273c <I2C_ITSlaveCplt+0x74>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002728:	4a79      	ldr	r2, [pc, #484]	@ (8002910 <I2C_ITSlaveCplt+0x248>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f000 fb82 	bl	8002e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2222      	movs	r2, #34	@ 0x22
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
 800273a:	e00d      	b.n	8002758 <I2C_ITSlaveCplt+0x90>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b28      	cmp	r3, #40	@ 0x28
 8002744:	d108      	bne.n	8002758 <I2C_ITSlaveCplt+0x90>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002746:	4a73      	ldr	r2, [pc, #460]	@ (8002914 <I2C_ITSlaveCplt+0x24c>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fb73 	bl	8002e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	0209      	lsls	r1, r1, #8
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4968      	ldr	r1, [pc, #416]	@ (8002918 <I2C_ITSlaveCplt+0x250>)
 8002776:	400a      	ands	r2, r1
 8002778:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fa56 	bl	8002c2e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	4013      	ands	r3, r2
 800278a:	d013      	beq.n	80027b4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4961      	ldr	r1, [pc, #388]	@ (800291c <I2C_ITSlaveCplt+0x254>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01f      	beq.n	80027e4 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b2:	e017      	b.n	80027e4 <I2C_ITSlaveCplt+0x11c>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4013      	ands	r3, r2
 80027bc:	d012      	beq.n	80027e4 <I2C_ITSlaveCplt+0x11c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4955      	ldr	r1, [pc, #340]	@ (8002920 <I2C_ITSlaveCplt+0x258>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d020      	beq.n	800282e <I2C_ITSlaveCplt+0x166>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4393      	bics	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <I2C_ITSlaveCplt+0x166>
    {
      hi2c->XferSize--;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <I2C_ITSlaveCplt+0x17c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	2204      	movs	r2, #4
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2242      	movs	r2, #66	@ 0x42
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	2b00      	cmp	r3, #0
 8002858:	d013      	beq.n	8002882 <I2C_ITSlaveCplt+0x1ba>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f000 f8b8 	bl	80029d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2241      	movs	r2, #65	@ 0x41
 800286c:	5c9b      	ldrb	r3, [r3, r2]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b28      	cmp	r3, #40	@ 0x28
 8002872:	d147      	bne.n	8002904 <I2C_ITSlaveCplt+0x23c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f854 	bl	8002928 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002880:	e040      	b.n	8002904 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <I2C_ITSlaveCplt+0x25c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d016      	beq.n	80028ba <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fde8 	bl	8002464 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a23      	ldr	r2, [pc, #140]	@ (8002924 <I2C_ITSlaveCplt+0x25c>)
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2241      	movs	r2, #65	@ 0x41
 800289e:	2120      	movs	r1, #32
 80028a0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	@ 0x40
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fd fe8b 	bl	80005ce <HAL_I2C_ListenCpltCallback>
}
 80028b8:	e024      	b.n	8002904 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2241      	movs	r2, #65	@ 0x41
 80028be:	5c9b      	ldrb	r3, [r3, r2]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b22      	cmp	r3, #34	@ 0x22
 80028c4:	d10f      	bne.n	80028e6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2241      	movs	r2, #65	@ 0x41
 80028ca:	2120      	movs	r1, #32
 80028cc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd ff06 	bl	80006f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80028e4:	e00e      	b.n	8002904 <I2C_ITSlaveCplt+0x23c>
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2241      	movs	r2, #65	@ 0x41
 80028ea:	2120      	movs	r1, #32
 80028ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	2100      	movs	r1, #0
 80028fa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7ff f891 	bl	8001a26 <HAL_I2C_SlaveTxCpltCallback>
}
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00008001 	.word	0x00008001
 8002910:	00008002 	.word	0x00008002
 8002914:	00008003 	.word	0x00008003
 8002918:	fe00e800 	.word	0xfe00e800
 800291c:	ffffbfff 	.word	0xffffbfff
 8002920:	ffff7fff 	.word	0xffff7fff
 8002924:	ffff0000 	.word	0xffff0000

08002928 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a26      	ldr	r2, [pc, #152]	@ (80029d0 <I2C_ITListenCplt+0xa8>)
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2241      	movs	r2, #65	@ 0x41
 8002942:	2120      	movs	r1, #32
 8002944:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2242      	movs	r2, #66	@ 0x42
 800294a:	2100      	movs	r1, #0
 800294c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d022      	beq.n	80029a2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d012      	beq.n	80029a2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	2204      	movs	r2, #4
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029a2:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <I2C_ITListenCplt+0xac>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fa45 	bl	8002e38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2240      	movs	r2, #64	@ 0x40
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7fd fe04 	bl	80005ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	ffff0000 	.word	0xffff0000
 80029d4:	00008003 	.word	0x00008003

080029d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029e2:	200f      	movs	r0, #15
 80029e4:	183b      	adds	r3, r7, r0
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	2141      	movs	r1, #65	@ 0x41
 80029ea:	5c52      	ldrb	r2, [r2, r1]
 80029ec:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2242      	movs	r2, #66	@ 0x42
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a72      	ldr	r2, [pc, #456]	@ (8002bc4 <I2C_ITError+0x1ec>)
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b28      	cmp	r3, #40	@ 0x28
 8002a14:	d007      	beq.n	8002a26 <I2C_ITError+0x4e>
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b29      	cmp	r3, #41	@ 0x29
 8002a1c:	d003      	beq.n	8002a26 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a24:	d10c      	bne.n	8002a40 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2103      	movs	r1, #3
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fa04 	bl	8002e38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2241      	movs	r2, #65	@ 0x41
 8002a34:	2128      	movs	r1, #40	@ 0x28
 8002a36:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a63      	ldr	r2, [pc, #396]	@ (8002bc8 <I2C_ITError+0x1f0>)
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a3e:	e032      	b.n	8002aa6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a40:	4a62      	ldr	r2, [pc, #392]	@ (8002bcc <I2C_ITError+0x1f4>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f9f6 	bl	8002e38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f8ed 	bl	8002c2e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2241      	movs	r2, #65	@ 0x41
 8002a58:	5c9b      	ldrb	r3, [r3, r2]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b60      	cmp	r3, #96	@ 0x60
 8002a5e:	d01f      	beq.n	8002aa0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2241      	movs	r2, #65	@ 0x41
 8002a64:	2120      	movs	r1, #32
 8002a66:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d114      	bne.n	8002aa0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d109      	bne.n	8002a98 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a90:	2204      	movs	r2, #4
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03b      	beq.n	8002b2c <I2C_ITError+0x154>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b11      	cmp	r3, #17
 8002ab8:	d002      	beq.n	8002ac0 <I2C_ITError+0xe8>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b21      	cmp	r3, #33	@ 0x21
 8002abe:	d135      	bne.n	8002b2c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	01db      	lsls	r3, r3, #7
 8002aca:	401a      	ands	r2, r3
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	01db      	lsls	r3, r3, #7
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	493c      	ldr	r1, [pc, #240]	@ (8002bd0 <I2C_ITError+0x1f8>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fe fb17 	bl	800111c <HAL_DMA_GetState>
 8002aee:	0003      	movs	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d016      	beq.n	8002b22 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af8:	4a36      	ldr	r2, [pc, #216]	@ (8002bd4 <I2C_ITError+0x1fc>)
 8002afa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2240      	movs	r2, #64	@ 0x40
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7fe fa8d 	bl	8001028 <HAL_DMA_Abort_IT>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d051      	beq.n	8002bb6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b20:	e049      	b.n	8002bb6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f859 	bl	8002bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b2a:	e044      	b.n	8002bb6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03b      	beq.n	8002bac <I2C_ITError+0x1d4>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d002      	beq.n	8002b40 <I2C_ITError+0x168>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b22      	cmp	r3, #34	@ 0x22
 8002b3e:	d135      	bne.n	8002bac <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	491e      	ldr	r1, [pc, #120]	@ (8002bd8 <I2C_ITError+0x200>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7fe fad7 	bl	800111c <HAL_DMA_GetState>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d016      	beq.n	8002ba2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <I2C_ITError+0x1fc>)
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2240      	movs	r2, #64	@ 0x40
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fe fa4d 	bl	8001028 <HAL_DMA_Abort_IT>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d013      	beq.n	8002bba <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ba0:	e00b      	b.n	8002bba <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f819 	bl	8002bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002baa:	e006      	b.n	8002bba <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f814 	bl	8002bdc <I2C_TreatErrorCallback>
  }
}
 8002bb4:	e002      	b.n	8002bbc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	e000      	b.n	8002bbc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bba:	46c0      	nop			@ (mov r8, r8)
}
 8002bbc:	46c0      	nop			@ (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	ffff0000 	.word	0xffff0000
 8002bc8:	08001a7d 	.word	0x08001a7d
 8002bcc:	00008003 	.word	0x00008003
 8002bd0:	ffffbfff 	.word	0xffffbfff
 8002bd4:	08002c73 	.word	0x08002c73
 8002bd8:	ffff7fff 	.word	0xffff7fff

08002bdc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2241      	movs	r2, #65	@ 0x41
 8002be8:	5c9b      	ldrb	r3, [r3, r2]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b60      	cmp	r3, #96	@ 0x60
 8002bee:	d10f      	bne.n	8002c10 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2241      	movs	r2, #65	@ 0x41
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fe ff24 	bl	8001a56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c0e:	e00a      	b.n	8002c26 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2240      	movs	r2, #64	@ 0x40
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fd fd9b 	bl	800075c <HAL_I2C_ErrorCallback>
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b002      	add	sp, #8
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d103      	bne.n	8002c4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d007      	beq.n	8002c6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
  }
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff ff9a 	bl	8002bdc <I2C_TreatErrorCallback>
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	0008      	movs	r0, r1
 8002cba:	0011      	movs	r1, r2
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	240a      	movs	r4, #10
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	1c02      	adds	r2, r0, #0
 8002cc4:	801a      	strh	r2, [r3, #0]
 8002cc6:	2009      	movs	r0, #9
 8002cc8:	183b      	adds	r3, r7, r0
 8002cca:	1c0a      	adds	r2, r1, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	059b      	lsls	r3, r3, #22
 8002cd4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0419      	lsls	r1, r3, #16
 8002cdc:	23ff      	movs	r3, #255	@ 0xff
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	4313      	orrs	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cfa:	0d51      	lsrs	r1, r2, #21
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	00d2      	lsls	r2, r2, #3
 8002d00:	400a      	ands	r2, r1
 8002d02:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <I2C_TransferConfig+0x70>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	43d2      	mvns	r2, r2
 8002d08:	401a      	ands	r2, r3
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b007      	add	sp, #28
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	03ff63ff 	.word	0x03ff63ff

08002d24 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	000a      	movs	r2, r1
 8002d2e:	1cbb      	adds	r3, r7, #2
 8002d30:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <I2C_Enable_IRQ+0x108>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d035      	beq.n	8002dac <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d44:	4b3a      	ldr	r3, [pc, #232]	@ (8002e30 <I2C_Enable_IRQ+0x10c>)
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d030      	beq.n	8002dac <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d4e:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <I2C_Enable_IRQ+0x110>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d02b      	beq.n	8002dac <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d54:	1cbb      	adds	r3, r7, #2
 8002d56:	2200      	movs	r2, #0
 8002d58:	5e9b      	ldrsh	r3, [r3, r2]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	da03      	bge.n	8002d66 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22b8      	movs	r2, #184	@ 0xb8
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d66:	1cbb      	adds	r3, r7, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	22f2      	movs	r2, #242	@ 0xf2
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d78:	1cbb      	adds	r3, r7, #2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d003      	beq.n	8002d8a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	22f4      	movs	r2, #244	@ 0xf4
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d8a:	1cbb      	adds	r3, r7, #2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d103      	bne.n	8002d9a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2290      	movs	r2, #144	@ 0x90
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d137      	bne.n	8002e12 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002daa:	e032      	b.n	8002e12 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002dac:	1cbb      	adds	r3, r7, #2
 8002dae:	2200      	movs	r2, #0
 8002db0:	5e9b      	ldrsh	r3, [r3, r2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da03      	bge.n	8002dbe <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22b8      	movs	r2, #184	@ 0xb8
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002dbe:	1cbb      	adds	r3, r7, #2
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	22f2      	movs	r2, #242	@ 0xf2
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002dd0:	1cbb      	adds	r3, r7, #2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22f4      	movs	r2, #244	@ 0xf4
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002de2:	1cbb      	adds	r3, r7, #2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d103      	bne.n	8002df2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2290      	movs	r2, #144	@ 0x90
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002df2:	1cbb      	adds	r3, r7, #2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d103      	bne.n	8002e02 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2260      	movs	r2, #96	@ 0x60
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	2b40      	cmp	r3, #64	@ 0x40
 8002e08:	d103      	bne.n	8002e12 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b004      	add	sp, #16
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	08001c7d 	.word	0x08001c7d
 8002e30:	080020cd 	.word	0x080020cd
 8002e34:	08001e75 	.word	0x08001e75

08002e38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	000a      	movs	r2, r1
 8002e42:	1cbb      	adds	r3, r7, #2
 8002e44:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e4a:	1cbb      	adds	r3, r7, #2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d010      	beq.n	8002e76 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2242      	movs	r2, #66	@ 0x42
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2241      	movs	r2, #65	@ 0x41
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	001a      	movs	r2, r3
 8002e66:	2328      	movs	r3, #40	@ 0x28
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b28      	cmp	r3, #40	@ 0x28
 8002e6c:	d003      	beq.n	8002e76 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22b0      	movs	r2, #176	@ 0xb0
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e76:	1cbb      	adds	r3, r7, #2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d010      	beq.n	8002ea2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2244      	movs	r2, #68	@ 0x44
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2241      	movs	r2, #65	@ 0x41
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	001a      	movs	r2, r3
 8002e92:	2328      	movs	r3, #40	@ 0x28
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b28      	cmp	r3, #40	@ 0x28
 8002e98:	d003      	beq.n	8002ea2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	22b0      	movs	r2, #176	@ 0xb0
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ea2:	1cbb      	adds	r3, r7, #2
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da03      	bge.n	8002eb4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	22b8      	movs	r2, #184	@ 0xb8
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002eb4:	1cbb      	adds	r3, r7, #2
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d103      	bne.n	8002ec4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2290      	movs	r2, #144	@ 0x90
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d103      	bne.n	8002ed4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ed4:	1cbb      	adds	r3, r7, #2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b40      	cmp	r3, #64	@ 0x40
 8002eda:	d103      	bne.n	8002ee4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43d9      	mvns	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b004      	add	sp, #16
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2241      	movs	r2, #65	@ 0x41
 8002f0e:	5c9b      	ldrb	r3, [r3, r2]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d138      	bne.n	8002f88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2240      	movs	r2, #64	@ 0x40
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e032      	b.n	8002f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2240      	movs	r2, #64	@ 0x40
 8002f28:	2101      	movs	r1, #1
 8002f2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2241      	movs	r2, #65	@ 0x41
 8002f30:	2124      	movs	r1, #36	@ 0x24
 8002f32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4911      	ldr	r1, [pc, #68]	@ (8002f94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2241      	movs	r2, #65	@ 0x41
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2240      	movs	r2, #64	@ 0x40
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	ffffefff 	.word	0xffffefff

08002f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2241      	movs	r2, #65	@ 0x41
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d139      	bne.n	8003022 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2240      	movs	r2, #64	@ 0x40
 8002fb2:	5c9b      	ldrb	r3, [r3, r2]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e033      	b.n	8003024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2240      	movs	r2, #64	@ 0x40
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2241      	movs	r2, #65	@ 0x41
 8002fc8:	2124      	movs	r1, #36	@ 0x24
 8002fca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2241      	movs	r2, #65	@ 0x41
 8003012:	2120      	movs	r1, #32
 8003014:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2240      	movs	r2, #64	@ 0x40
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	fffff0ff 	.word	0xfffff0ff

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e1d0      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x1e>
 800304c:	e069      	b.n	8003122 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304e:	4bc8      	ldr	r3, [pc, #800]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2238      	movs	r2, #56	@ 0x38
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d105      	bne.n	800306a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d15d      	bne.n	8003122 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1bc      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	2380      	movs	r3, #128	@ 0x80
 8003070:	025b      	lsls	r3, r3, #9
 8003072:	429a      	cmp	r2, r3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_OscConfig+0x56>
 8003076:	4bbe      	ldr	r3, [pc, #760]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4bbd      	ldr	r3, [pc, #756]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800307c:	2180      	movs	r1, #128	@ 0x80
 800307e:	0249      	lsls	r1, r1, #9
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e020      	b.n	80030c8 <HAL_RCC_OscConfig+0x98>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	23a0      	movs	r3, #160	@ 0xa0
 800308c:	02db      	lsls	r3, r3, #11
 800308e:	429a      	cmp	r2, r3
 8003090:	d10e      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80>
 8003092:	4bb7      	ldr	r3, [pc, #732]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4bb6      	ldr	r3, [pc, #728]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	02c9      	lsls	r1, r1, #11
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	4bb3      	ldr	r3, [pc, #716]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4bb2      	ldr	r3, [pc, #712]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	0249      	lsls	r1, r1, #9
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x98>
 80030b0:	4baf      	ldr	r3, [pc, #700]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4bae      	ldr	r3, [pc, #696]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030b6:	49af      	ldr	r1, [pc, #700]	@ (8003374 <HAL_RCC_OscConfig+0x344>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	4bac      	ldr	r3, [pc, #688]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4bab      	ldr	r3, [pc, #684]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030c2:	49ad      	ldr	r1, [pc, #692]	@ (8003378 <HAL_RCC_OscConfig+0x348>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d014      	beq.n	80030fa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd fe9e 	bl	8000e10 <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030da:	f7fd fe99 	bl	8000e10 <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b64      	cmp	r3, #100	@ 0x64
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e17b      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	4013      	ands	r3, r2
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0xaa>
 80030f8:	e013      	b.n	8003122 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fd fe89 	bl	8000e10 <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003104:	f7fd fe84 	bl	8000e10 <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	@ 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e166      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003116:	4b96      	ldr	r3, [pc, #600]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	029b      	lsls	r3, r3, #10
 800311e:	4013      	ands	r3, r2
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	d100      	bne.n	800312e <HAL_RCC_OscConfig+0xfe>
 800312c:	e086      	b.n	800323c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b90      	ldr	r3, [pc, #576]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2238      	movs	r2, #56	@ 0x38
 8003134:	4013      	ands	r3, r2
 8003136:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d12f      	bne.n	800319e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e14c      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b89      	ldr	r3, [pc, #548]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a8b      	ldr	r2, [pc, #556]	@ (800337c <HAL_RCC_OscConfig+0x34c>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	021a      	lsls	r2, r3, #8
 800315a:	4b85      	ldr	r3, [pc, #532]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003166:	4b82      	ldr	r3, [pc, #520]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a85      	ldr	r2, [pc, #532]	@ (8003380 <HAL_RCC_OscConfig+0x350>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	4b7e      	ldr	r3, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800317a:	4b7d      	ldr	r3, [pc, #500]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0adb      	lsrs	r3, r3, #11
 8003180:	2207      	movs	r2, #7
 8003182:	4013      	ands	r3, r2
 8003184:	4a7f      	ldr	r2, [pc, #508]	@ (8003384 <HAL_RCC_OscConfig+0x354>)
 8003186:	40da      	lsrs	r2, r3
 8003188:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x358>)
 800318a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800318c:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x35c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd fde1 	bl	8000d58 <HAL_InitTick>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d050      	beq.n	800323c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e122      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d030      	beq.n	8003208 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	@ (8003380 <HAL_RCC_OscConfig+0x350>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031c0:	2180      	movs	r1, #128	@ 0x80
 80031c2:	0049      	lsls	r1, r1, #1
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd fe22 	bl	8000e10 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031d2:	f7fd fe1d 	bl	8000e10 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0ff      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e4:	4b62      	ldr	r3, [pc, #392]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a61      	ldr	r2, [pc, #388]	@ (800337c <HAL_RCC_OscConfig+0x34c>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	021a      	lsls	r2, r3, #8
 8003200:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e019      	b.n	800323c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003208:	4b59      	ldr	r3, [pc, #356]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b58      	ldr	r3, [pc, #352]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800320e:	4960      	ldr	r1, [pc, #384]	@ (8003390 <HAL_RCC_OscConfig+0x360>)
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fdfc 	bl	8000e10 <HAL_GetTick>
 8003218:	0003      	movs	r3, r0
 800321a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800321e:	f7fd fdf7 	bl	8000e10 <HAL_GetTick>
 8003222:	0002      	movs	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0d9      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003230:	4b4f      	ldr	r3, [pc, #316]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4013      	ands	r3, r2
 800323a:	d1f0      	bne.n	800321e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2208      	movs	r2, #8
 8003242:	4013      	ands	r3, r2
 8003244:	d042      	beq.n	80032cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2238      	movs	r2, #56	@ 0x38
 800324c:	4013      	ands	r3, r2
 800324e:	2b18      	cmp	r3, #24
 8003250:	d105      	bne.n	800325e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d138      	bne.n	80032cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0c2      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d019      	beq.n	800329a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003266:	4b42      	ldr	r3, [pc, #264]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003268:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800326c:	2101      	movs	r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fd fdcd 	bl	8000e10 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800327c:	f7fd fdc8 	bl	8000e10 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0aa      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800328e:	4b38      	ldr	r3, [pc, #224]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d0f1      	beq.n	800327c <HAL_RCC_OscConfig+0x24c>
 8003298:	e018      	b.n	80032cc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800329a:	4b35      	ldr	r3, [pc, #212]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800329c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800329e:	4b34      	ldr	r3, [pc, #208]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	438a      	bics	r2, r1
 80032a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd fdb3 	bl	8000e10 <HAL_GetTick>
 80032aa:	0003      	movs	r3, r0
 80032ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80032b0:	f7fd fdae 	bl	8000e10 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e090      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	2202      	movs	r2, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d1f1      	bne.n	80032b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2a8>
 80032d6:	e084      	b.n	80033e2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d8:	230f      	movs	r3, #15
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80032e0:	4b23      	ldr	r3, [pc, #140]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2238      	movs	r2, #56	@ 0x38
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d000      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2c6>
 80032f4:	e075      	b.n	80033e2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e074      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x2e0>
 8003302:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003306:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003308:	2101      	movs	r1, #1
 800330a:	430a      	orrs	r2, r1
 800330c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x31a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x302>
 8003318:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800331a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800331e:	2104      	movs	r1, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003326:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003328:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 800332a:	2101      	movs	r1, #1
 800332c:	430a      	orrs	r2, r1
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x31a>
 8003332:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003334:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003338:	2101      	movs	r1, #1
 800333a:	438a      	bics	r2, r1
 800333c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003342:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <HAL_RCC_OscConfig+0x340>)
 8003344:	2104      	movs	r1, #4
 8003346:	438a      	bics	r2, r1
 8003348:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fd fd5d 	bl	8000e10 <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fd fd58 	bl	8000e10 <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <HAL_RCC_OscConfig+0x364>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d915      	bls.n	8003398 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e039      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
 8003370:	40021000 	.word	0x40021000
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff80ff 	.word	0xffff80ff
 8003380:	ffffc7ff 	.word	0xffffc7ff
 8003384:	02dc6c00 	.word	0x02dc6c00
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004
 8003390:	fffffeff 	.word	0xfffffeff
 8003394:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_RCC_OscConfig+0x3bc>)
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2202      	movs	r2, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d0dc      	beq.n	800335c <HAL_RCC_OscConfig+0x32c>
 80033a2:	e013      	b.n	80033cc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd fd34 	bl	8000e10 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd fd2f 	bl	8000e10 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCC_OscConfig+0x3c0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e010      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_RCC_OscConfig+0x3bc>)
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033cc:	230f      	movs	r3, #15
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_OscConfig+0x3bc>)
 80033d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033da:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <HAL_RCC_OscConfig+0x3bc>)
 80033dc:	4905      	ldr	r1, [pc, #20]	@ (80033f4 <HAL_RCC_OscConfig+0x3c4>)
 80033de:	400a      	ands	r2, r1
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	00001388 	.word	0x00001388
 80033f4:	efffffff 	.word	0xefffffff

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0e9      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2207      	movs	r2, #7
 8003412:	4013      	ands	r3, r2
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d91e      	bls.n	8003458 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b73      	ldr	r3, [pc, #460]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2207      	movs	r2, #7
 8003420:	4393      	bics	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800342c:	f7fd fcf0 	bl	8000e10 <HAL_GetTick>
 8003430:	0003      	movs	r3, r0
 8003432:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003434:	e009      	b.n	800344a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003436:	f7fd fceb 	bl	8000e10 <HAL_GetTick>
 800343a:	0002      	movs	r2, r0
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	4a6a      	ldr	r2, [pc, #424]	@ (80035ec <HAL_RCC_ClockConfig+0x1f4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0ca      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800344a:	4b67      	ldr	r3, [pc, #412]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2207      	movs	r2, #7
 8003450:	4013      	ands	r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2202      	movs	r2, #2
 800345e:	4013      	ands	r3, r2
 8003460:	d017      	beq.n	8003492 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	4013      	ands	r3, r2
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800346c:	4b60      	ldr	r3, [pc, #384]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a60      	ldr	r2, [pc, #384]	@ (80035f4 <HAL_RCC_ClockConfig+0x1fc>)
 8003472:	401a      	ands	r2, r3
 8003474:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003476:	21b0      	movs	r1, #176	@ 0xb0
 8003478:	0109      	lsls	r1, r1, #4
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347e:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_RCC_ClockConfig+0x200>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b58      	ldr	r3, [pc, #352]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d055      	beq.n	8003548 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800349c:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	221c      	movs	r2, #28
 80034a2:	4393      	bics	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	4013      	ands	r3, r2
 80034c2:	d11f      	bne.n	8003504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e08b      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4013      	ands	r3, r2
 80034da:	d113      	bne.n	8003504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e07f      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80034e8:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80034ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e074      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80034f6:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	2202      	movs	r2, #2
 80034fc:	4013      	ands	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e06d      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003504:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2207      	movs	r2, #7
 800350a:	4393      	bics	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	4b37      	ldr	r3, [pc, #220]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003518:	f7fd fc7a 	bl	8000e10 <HAL_GetTick>
 800351c:	0003      	movs	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003520:	e009      	b.n	8003536 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003522:	f7fd fc75 	bl	8000e10 <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	4a2f      	ldr	r2, [pc, #188]	@ (80035ec <HAL_RCC_ClockConfig+0x1f4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e054      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2238      	movs	r2, #56	@ 0x38
 800353c:	401a      	ands	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	429a      	cmp	r2, r3
 8003546:	d1ec      	bne.n	8003522 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2207      	movs	r2, #7
 800354e:	4013      	ands	r3, r2
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d21e      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2207      	movs	r2, #7
 800355c:	4393      	bics	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	4b21      	ldr	r3, [pc, #132]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003568:	f7fd fc52 	bl	8000e10 <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003570:	e009      	b.n	8003586 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003572:	f7fd fc4d 	bl	8000e10 <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_RCC_ClockConfig+0x1f4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e02c      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003586:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d1ee      	bne.n	8003572 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2204      	movs	r2, #4
 800359a:	4013      	ands	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <HAL_RCC_ClockConfig+0x204>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80035b2:	f000 f82b 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035b6:	0001      	movs	r1, r0
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <HAL_RCC_ClockConfig+0x1f8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	220f      	movs	r2, #15
 80035c0:	401a      	ands	r2, r3
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <HAL_RCC_ClockConfig+0x208>)
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	58d3      	ldr	r3, [r2, r3]
 80035c8:	221f      	movs	r2, #31
 80035ca:	4013      	ands	r3, r2
 80035cc:	000a      	movs	r2, r1
 80035ce:	40da      	lsrs	r2, r3
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <HAL_RCC_ClockConfig+0x20c>)
 80035d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCC_ClockConfig+0x210>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fbbd 	bl	8000d58 <HAL_InitTick>
 80035de:	0003      	movs	r3, r0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40022000 	.word	0x40022000
 80035ec:	00001388 	.word	0x00001388
 80035f0:	40021000 	.word	0x40021000
 80035f4:	ffff84ff 	.word	0xffff84ff
 80035f8:	fffff0ff 	.word	0xfffff0ff
 80035fc:	ffff8fff 	.word	0xffff8fff
 8003600:	08003e98 	.word	0x08003e98
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003612:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x78>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2238      	movs	r2, #56	@ 0x38
 8003618:	4013      	ands	r3, r2
 800361a:	d10f      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800361c:	4b19      	ldr	r3, [pc, #100]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x78>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0adb      	lsrs	r3, r3, #11
 8003622:	2207      	movs	r2, #7
 8003624:	4013      	ands	r3, r2
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	4815      	ldr	r0, [pc, #84]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003632:	f7fc fd69 	bl	8000108 <__udivsi3>
 8003636:	0003      	movs	r3, r0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e01e      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x78>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2238      	movs	r2, #56	@ 0x38
 8003642:	4013      	ands	r3, r2
 8003644:	2b08      	cmp	r3, #8
 8003646:	d102      	bne.n	800364e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_GetSysClockFreq+0x80>)
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	e015      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800364e:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x78>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2238      	movs	r2, #56	@ 0x38
 8003654:	4013      	ands	r3, r2
 8003656:	2b20      	cmp	r3, #32
 8003658:	d103      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	e00b      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003662:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x78>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2238      	movs	r2, #56	@ 0x38
 8003668:	4013      	ands	r3, r2
 800366a:	2b18      	cmp	r3, #24
 800366c:	d103      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800366e:	23fa      	movs	r3, #250	@ 0xfa
 8003670:	01db      	lsls	r3, r3, #7
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	e001      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800367a:	687b      	ldr	r3, [r7, #4]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	02dc6c00 	.word	0x02dc6c00
 800368c:	007a1200 	.word	0x007a1200

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003698:	2313      	movs	r3, #19
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a0:	2312      	movs	r3, #18
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	4013      	ands	r3, r2
 80036b2:	d100      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036b4:	e079      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2011      	movs	r0, #17
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	055b      	lsls	r3, r3, #21
 80036c6:	4013      	ands	r3, r2
 80036c8:	d110      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b61      	ldr	r3, [pc, #388]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ce:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	0549      	lsls	r1, r1, #21
 80036d4:	430a      	orrs	r2, r1
 80036d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036d8:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80036ec:	4b58      	ldr	r3, [pc, #352]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036f0:	23c0      	movs	r3, #192	@ 0xc0
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	d014      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003708:	4b51      	ldr	r3, [pc, #324]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	4a51      	ldr	r2, [pc, #324]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800370e:	4013      	ands	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003712:	4b4f      	ldr	r3, [pc, #316]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003714:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003716:	4b4e      	ldr	r3, [pc, #312]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003718:	2180      	movs	r1, #128	@ 0x80
 800371a:	0249      	lsls	r1, r1, #9
 800371c:	430a      	orrs	r2, r1
 800371e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003724:	4b4a      	ldr	r3, [pc, #296]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003726:	494c      	ldr	r1, [pc, #304]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003728:	400a      	ands	r2, r1
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800372c:	4b48      	ldr	r3, [pc, #288]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2201      	movs	r2, #1
 8003736:	4013      	ands	r3, r2
 8003738:	d016      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fd fb69 	bl	8000e10 <HAL_GetTick>
 800373e:	0003      	movs	r3, r0
 8003740:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003742:	e00c      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd fb64 	bl	8000e10 <HAL_GetTick>
 8003748:	0002      	movs	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	4a43      	ldr	r2, [pc, #268]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d904      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003754:	2313      	movs	r3, #19
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2203      	movs	r2, #3
 800375a:	701a      	strb	r2, [r3, #0]
          break;
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800375e:	4b3c      	ldr	r3, [pc, #240]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	2202      	movs	r2, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d0ed      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003768:	2313      	movs	r3, #19
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	4a37      	ldr	r2, [pc, #220]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003782:	430a      	orrs	r2, r1
 8003784:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003786:	e005      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	2312      	movs	r3, #18
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2213      	movs	r2, #19
 800378e:	18ba      	adds	r2, r7, r2
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003794:	2311      	movs	r3, #17
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037a4:	492e      	ldr	r1, [pc, #184]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b4:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	2203      	movs	r2, #3
 80037ba:	4393      	bics	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037c4:	430a      	orrs	r2, r1
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2240      	movs	r2, #64	@ 0x40
 80037ce:	4013      	ands	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037e2:	430a      	orrs	r2, r1
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	01db      	lsls	r3, r3, #7
 80037ee:	4013      	ands	r3, r2
 80037f0:	d008      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f2:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	0899      	lsrs	r1, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003800:	430a      	orrs	r2, r1
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003814:	4a14      	ldr	r2, [pc, #80]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003820:	430a      	orrs	r2, r1
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	da09      	bge.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800382c:	4b08      	ldr	r3, [pc, #32]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	22e0      	movs	r2, #224	@ 0xe0
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003840:	2312      	movs	r3, #18
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	40021000 	.word	0x40021000
 8003854:	fffffcff 	.word	0xfffffcff
 8003858:	fffeffff 	.word	0xfffeffff
 800385c:	00001388 	.word	0x00001388
 8003860:	efffffff 	.word	0xefffffff
 8003864:	ffffcfff 	.word	0xffffcfff
 8003868:	ffff3fff 	.word	0xffff3fff

0800386c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e04a      	b.n	8003914 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223d      	movs	r2, #61	@ 0x3d
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	223c      	movs	r2, #60	@ 0x3c
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd f9c1 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	223d      	movs	r2, #61	@ 0x3d
 800389e:	2102      	movs	r1, #2
 80038a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f000 f951 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2248      	movs	r2, #72	@ 0x48
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223e      	movs	r2, #62	@ 0x3e
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	223f      	movs	r2, #63	@ 0x3f
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2240      	movs	r2, #64	@ 0x40
 80038ce:	2101      	movs	r1, #1
 80038d0:	5499      	strb	r1, [r3, r2]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2241      	movs	r2, #65	@ 0x41
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2242      	movs	r2, #66	@ 0x42
 80038de:	2101      	movs	r1, #1
 80038e0:	5499      	strb	r1, [r3, r2]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2243      	movs	r2, #67	@ 0x43
 80038e6:	2101      	movs	r1, #1
 80038e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2244      	movs	r2, #68	@ 0x44
 80038ee:	2101      	movs	r1, #1
 80038f0:	5499      	strb	r1, [r3, r2]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2245      	movs	r2, #69	@ 0x45
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2246      	movs	r2, #70	@ 0x46
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2247      	movs	r2, #71	@ 0x47
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223d      	movs	r2, #61	@ 0x3d
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223d      	movs	r2, #61	@ 0x3d
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d001      	beq.n	8003934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e02f      	b.n	8003994 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	223d      	movs	r2, #61	@ 0x3d
 8003938:	2102      	movs	r1, #2
 800393a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a16      	ldr	r2, [pc, #88]	@ (800399c <HAL_TIM_Base_Start+0x80>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_TIM_Base_Start+0x34>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <HAL_TIM_Base_Start+0x84>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d116      	bne.n	800397e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <HAL_TIM_Base_Start+0x88>)
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b06      	cmp	r3, #6
 8003960:	d016      	beq.n	8003990 <HAL_TIM_Base_Start+0x74>
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	025b      	lsls	r3, r3, #9
 8003968:	429a      	cmp	r2, r3
 800396a:	d011      	beq.n	8003990 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	e008      	b.n	8003990 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e000      	b.n	8003992 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400
 80039a4:	00010007 	.word	0x00010007

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	230f      	movs	r3, #15
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223c      	movs	r2, #60	@ 0x3c
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_ConfigClockSource+0x20>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0bc      	b.n	8003b42 <HAL_TIM_ConfigClockSource+0x19a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	223c      	movs	r2, #60	@ 0x3c
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223d      	movs	r2, #61	@ 0x3d
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4a5a      	ldr	r2, [pc, #360]	@ (8003b4c <HAL_TIM_ConfigClockSource+0x1a4>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a59      	ldr	r2, [pc, #356]	@ (8003b50 <HAL_TIM_ConfigClockSource+0x1a8>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	0192      	lsls	r2, r2, #6
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xde>
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	0192      	lsls	r2, r2, #6
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d900      	bls.n	8003a0e <HAL_TIM_ConfigClockSource+0x66>
 8003a0c:	e088      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a0e:	2280      	movs	r2, #128	@ 0x80
 8003a10:	0152      	lsls	r2, r2, #5
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x70>
 8003a16:	e088      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x182>
 8003a18:	2280      	movs	r2, #128	@ 0x80
 8003a1a:	0152      	lsls	r2, r2, #5
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d900      	bls.n	8003a22 <HAL_TIM_ConfigClockSource+0x7a>
 8003a20:	e07e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a22:	2b70      	cmp	r3, #112	@ 0x70
 8003a24:	d018      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0xb0>
 8003a26:	d900      	bls.n	8003a2a <HAL_TIM_ConfigClockSource+0x82>
 8003a28:	e07a      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a2a:	2b60      	cmp	r3, #96	@ 0x60
 8003a2c:	d04f      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x126>
 8003a2e:	d900      	bls.n	8003a32 <HAL_TIM_ConfigClockSource+0x8a>
 8003a30:	e076      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a32:	2b50      	cmp	r3, #80	@ 0x50
 8003a34:	d03b      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x106>
 8003a36:	d900      	bls.n	8003a3a <HAL_TIM_ConfigClockSource+0x92>
 8003a38:	e072      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a3a:	2b40      	cmp	r3, #64	@ 0x40
 8003a3c:	d057      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x146>
 8003a3e:	d900      	bls.n	8003a42 <HAL_TIM_ConfigClockSource+0x9a>
 8003a40:	e06e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a42:	2b30      	cmp	r3, #48	@ 0x30
 8003a44:	d063      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a4c:	d868      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05d      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d05b      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a56:	e063      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	f000 f95c 	bl	8003d24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2277      	movs	r2, #119	@ 0x77
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
      break;
 8003a84:	e052      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	f000 f945 	bl	8003d24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	@ 0x80
 8003aa6:	01c9      	lsls	r1, r1, #7
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	001a      	movs	r2, r3
 8003abc:	f000 f8b6 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	@ 0x50
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f910 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	001a      	movs	r2, r3
 8003adc:	f000 f8d4 	bl	8003c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	@ 0x60
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f900 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	001a      	movs	r2, r3
 8003afc:	f000 f896 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f8f0 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f000 f8e7 	bl	8003cec <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e005      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b2a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	223d      	movs	r2, #61	@ 0x3d
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	223c      	movs	r2, #60	@ 0x3c
 8003b38:	2100      	movs	r1, #0
 8003b3a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	ffceff88 	.word	0xffceff88
 8003b50:	ffff00ff 	.word	0xffff00ff

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2b      	ldr	r2, [pc, #172]	@ (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x20>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c18 <TIM_Base_SetConfig+0xc4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2270      	movs	r2, #112	@ 0x70
 8003b78:	4393      	bics	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a22      	ldr	r2, [pc, #136]	@ (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0x5a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <TIM_Base_SetConfig+0xc4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0x5a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <TIM_Base_SetConfig+0xc8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x5a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <TIM_Base_SetConfig+0xcc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x5a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c24 <TIM_Base_SetConfig+0xd0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c28 <TIM_Base_SetConfig+0xd4>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2280      	movs	r2, #128	@ 0x80
 8003bc4:	4393      	bics	r3, r2
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8003c20 <TIM_Base_SetConfig+0xcc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0xaa>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <TIM_Base_SetConfig+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d103      	bne.n	8003c06 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	615a      	str	r2, [r3, #20]
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b004      	add	sp, #16
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40002000 	.word	0x40002000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	fffffcff 	.word	0xfffffcff

08003c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	2201      	movs	r2, #1
 8003c44:	4393      	bics	r3, r2
 8003c46:	001a      	movs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	22f0      	movs	r2, #240	@ 0xf0
 8003c56:	4393      	bics	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	220a      	movs	r2, #10
 8003c68:	4393      	bics	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	001a      	movs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce8 <TIM_TI2_ConfigInputStage+0x60>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	22a0      	movs	r2, #160	@ 0xa0
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	ffff0fff 	.word	0xffff0fff

08003cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a08      	ldr	r2, [pc, #32]	@ (8003d20 <TIM_ITRx_SetConfig+0x34>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	ffcfff8f 	.word	0xffcfff8f

08003d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	4a09      	ldr	r2, [pc, #36]	@ (8003d60 <TIM_ETR_SetConfig+0x3c>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b006      	add	sp, #24
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	ffff00ff 	.word	0xffff00ff

08003d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223c      	movs	r2, #60	@ 0x3c
 8003d72:	5c9b      	ldrb	r3, [r3, r2]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e04a      	b.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	223c      	movs	r2, #60	@ 0x3c
 8003d80:	2101      	movs	r1, #1
 8003d82:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223d      	movs	r2, #61	@ 0x3d
 8003d88:	2102      	movs	r1, #2
 8003d8a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2270      	movs	r2, #112	@ 0x70
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10c      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	4393      	bics	r3, r2
 8003dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	223d      	movs	r2, #61	@ 0x3d
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	223c      	movs	r2, #60	@ 0x3c
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	ff0fffff 	.word	0xff0fffff
 8003e24:	40000400 	.word	0x40000400

08003e28 <memset>:
 8003e28:	0003      	movs	r3, r0
 8003e2a:	1882      	adds	r2, r0, r2
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <memset+0xa>
 8003e30:	4770      	bx	lr
 8003e32:	7019      	strb	r1, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e7f9      	b.n	8003e2c <memset+0x4>

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	4c0c      	ldr	r4, [pc, #48]	@ (8003e70 <__libc_init_array+0x38>)
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e74 <__libc_init_array+0x3c>)
 8003e40:	1b64      	subs	r4, r4, r5
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	42a6      	cmp	r6, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	2600      	movs	r6, #0
 8003e4a:	f000 f819 	bl	8003e80 <_init>
 8003e4e:	4c0a      	ldr	r4, [pc, #40]	@ (8003e78 <__libc_init_array+0x40>)
 8003e50:	4d0a      	ldr	r5, [pc, #40]	@ (8003e7c <__libc_init_array+0x44>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	42a6      	cmp	r6, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	00b3      	lsls	r3, r6, #2
 8003e5e:	58eb      	ldr	r3, [r5, r3]
 8003e60:	4798      	blx	r3
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	00b3      	lsls	r3, r6, #2
 8003e68:	58eb      	ldr	r3, [r5, r3]
 8003e6a:	4798      	blx	r3
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08003ed8 	.word	0x08003ed8
 8003e74:	08003ed8 	.word	0x08003ed8
 8003e78:	08003edc 	.word	0x08003edc
 8003e7c:	08003ed8 	.word	0x08003ed8

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
