
STM32C031F6P6_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003eb8  08003eb8  00004eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef8  08003ef8  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef8  08003ef8  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef8  08003ef8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef8  08003ef8  00004ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003efc  08003efc  00004efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003f00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  08003f10  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003f10  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d592  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232b  00000000  00000000  000125ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000148f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000adc  00000000  00000000  000156e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001374b  00000000  00000000  000161bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001160a  00000000  00000000  00029907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079cca  00000000  00000000  0003af11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4bdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  000b4c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b7e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ea0 	.word	0x08003ea0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003ea0 	.word	0x08003ea0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e04      	subs	r4, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 f83d 	bl	80002a4 <__clzsi2>
 800022a:	239e      	movs	r3, #158	@ 0x9e
 800022c:	0001      	movs	r1, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	@ 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	d02f      	beq.n	8000298 <__aeabi_ui2f+0x78>
 8000238:	3908      	subs	r1, #8
 800023a:	408c      	lsls	r4, r1
 800023c:	0264      	lsls	r4, r4, #9
 800023e:	0a64      	lsrs	r4, r4, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2400      	movs	r4, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4320      	orrs	r0, r4
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	@ 0x99
 8000250:	dc16      	bgt.n	8000280 <__aeabi_ui2f+0x60>
 8000252:	1f42      	subs	r2, r0, #5
 8000254:	2805      	cmp	r0, #5
 8000256:	d000      	beq.n	800025a <__aeabi_ui2f+0x3a>
 8000258:	4094      	lsls	r4, r2
 800025a:	0022      	movs	r2, r4
 800025c:	4810      	ldr	r0, [pc, #64]	@ (80002a0 <__aeabi_ui2f+0x80>)
 800025e:	4002      	ands	r2, r0
 8000260:	0765      	lsls	r5, r4, #29
 8000262:	d009      	beq.n	8000278 <__aeabi_ui2f+0x58>
 8000264:	250f      	movs	r5, #15
 8000266:	402c      	ands	r4, r5
 8000268:	2c04      	cmp	r4, #4
 800026a:	d005      	beq.n	8000278 <__aeabi_ui2f+0x58>
 800026c:	3204      	adds	r2, #4
 800026e:	0154      	lsls	r4, r2, #5
 8000270:	d502      	bpl.n	8000278 <__aeabi_ui2f+0x58>
 8000272:	239f      	movs	r3, #159	@ 0x9f
 8000274:	4002      	ands	r2, r0
 8000276:	1a5b      	subs	r3, r3, r1
 8000278:	0192      	lsls	r2, r2, #6
 800027a:	0a54      	lsrs	r4, r2, #9
 800027c:	b2d8      	uxtb	r0, r3
 800027e:	e7e3      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000280:	0002      	movs	r2, r0
 8000282:	0020      	movs	r0, r4
 8000284:	321b      	adds	r2, #27
 8000286:	4090      	lsls	r0, r2
 8000288:	0002      	movs	r2, r0
 800028a:	1e50      	subs	r0, r2, #1
 800028c:	4182      	sbcs	r2, r0
 800028e:	2005      	movs	r0, #5
 8000290:	1a40      	subs	r0, r0, r1
 8000292:	40c4      	lsrs	r4, r0
 8000294:	4314      	orrs	r4, r2
 8000296:	e7e0      	b.n	800025a <__aeabi_ui2f+0x3a>
 8000298:	0264      	lsls	r4, r4, #9
 800029a:	2096      	movs	r0, #150	@ 0x96
 800029c:	0a64      	lsrs	r4, r4, #9
 800029e:	e7d3      	b.n	8000248 <__aeabi_ui2f+0x28>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__clzsi2>:
 80002a4:	211c      	movs	r1, #28
 80002a6:	2301      	movs	r3, #1
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d301      	bcc.n	80002b2 <__clzsi2+0xe>
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	3910      	subs	r1, #16
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d301      	bcc.n	80002bc <__clzsi2+0x18>
 80002b8:	0a00      	lsrs	r0, r0, #8
 80002ba:	3908      	subs	r1, #8
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	4298      	cmp	r0, r3
 80002c0:	d301      	bcc.n	80002c6 <__clzsi2+0x22>
 80002c2:	0900      	lsrs	r0, r0, #4
 80002c4:	3904      	subs	r1, #4
 80002c6:	a202      	add	r2, pc, #8	@ (adr r2, 80002d0 <__clzsi2+0x2c>)
 80002c8:	5c10      	ldrb	r0, [r2, r0]
 80002ca:	1840      	adds	r0, r0, r1
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	02020304 	.word	0x02020304
 80002d4:	01010101 	.word	0x01010101
	...

080002e0 <Set_Pin_Output>:
 */

#include "DHT11.h"

void Set_Pin_Output(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b089      	sub	sp, #36	@ 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	000a      	movs	r2, r1
 80002ea:	1cbb      	adds	r3, r7, #2
 80002ec:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	240c      	movs	r4, #12
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2314      	movs	r3, #20
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 fda5 	bl	8003e48 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 80002fe:	1cbb      	adds	r3, r7, #2
 8000300:	881a      	ldrh	r2, [r3, #0]
 8000302:	0021      	movs	r1, r4
 8000304:	187b      	adds	r3, r7, r1
 8000306:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 800031a:	187a      	adds	r2, r7, r1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f000 ff17 	bl	8001154 <HAL_GPIO_Init>
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b009      	add	sp, #36	@ 0x24
 800032c:	bd90      	pop	{r4, r7, pc}

0800032e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 800032e:	b590      	push	{r4, r7, lr}
 8000330:	b089      	sub	sp, #36	@ 0x24
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	000a      	movs	r2, r1
 8000338:	1cbb      	adds	r3, r7, #2
 800033a:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033c:	240c      	movs	r4, #12
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	2314      	movs	r3, #20
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f003 fd7e 	bl	8003e48 <memset>

	GPIO_InitStruct.Pin = GPIO_Pin;
 800034c:	1cbb      	adds	r3, r7, #2
 800034e:	881a      	ldrh	r2, [r3, #0]
 8000350:	193b      	adds	r3, r7, r4
 8000352:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIO_Port, &GPIO_InitStruct);
 8000360:	193a      	adds	r2, r7, r4
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fef4 	bl	8001154 <HAL_GPIO_Init>
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b009      	add	sp, #36	@ 0x24
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <DHT11_Start>:

void DHT11_Start(DHT11_data *data)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	Set_Pin_Output(data->GPIO_Port, data->GPIO_Pin);        // set the pin as output
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	889b      	ldrh	r3, [r3, #4]
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f7ff ffaa 	bl	80002e0 <Set_Pin_Output>
	HAL_GPIO_WritePin(data->GPIO_Port, data->GPIO_Pin, 0);  // pull the pin low
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6818      	ldr	r0, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	889b      	ldrh	r3, [r3, #4]
 8000394:	2200      	movs	r2, #0
 8000396:	0019      	movs	r1, r3
 8000398:	f001 f86b 	bl	8001472 <HAL_GPIO_WritePin>
	microsecond_delay(18000);                               // wait for 18ms
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <DHT11_Start+0x60>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fb36 	bl	8000a10 <microsecond_delay>
	HAL_GPIO_WritePin (data->GPIO_Port, data->GPIO_Pin, 1); // pull the pin high
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6818      	ldr	r0, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	2201      	movs	r2, #1
 80003ae:	0019      	movs	r1, r3
 80003b0:	f001 f85f 	bl	8001472 <HAL_GPIO_WritePin>
	microsecond_delay(20);
 80003b4:	2014      	movs	r0, #20
 80003b6:	f000 fb2b 	bl	8000a10 <microsecond_delay>
	Set_Pin_Input(data->GPIO_Port, data->GPIO_Pin);         // set as input
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	889b      	ldrh	r3, [r3, #4]
 80003c2:	0019      	movs	r1, r3
 80003c4:	0010      	movs	r0, r2
 80003c6:	f7ff ffb2 	bl	800032e <Set_Pin_Input>
}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b002      	add	sp, #8
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	00004650 	.word	0x00004650

080003d8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(DHT11_data *data)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80003e0:	240f      	movs	r4, #15
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
	microsecond_delay(40);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f000 fb11 	bl	8000a10 <microsecond_delay>
	if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	889b      	ldrh	r3, [r3, #4]
 80003f6:	0019      	movs	r1, r3
 80003f8:	0010      	movs	r0, r2
 80003fa:	f001 f81d 	bl	8001438 <HAL_GPIO_ReadPin>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d114      	bne.n	800042c <DHT11_Check_Response+0x54>
	{
		microsecond_delay(80);
 8000402:	2050      	movs	r0, #80	@ 0x50
 8000404:	f000 fb04 	bl	8000a10 <microsecond_delay>
		if ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin))) Response = 1;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	889b      	ldrh	r3, [r3, #4]
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f001 f810 	bl	8001438 <HAL_GPIO_ReadPin>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d003      	beq.n	8000424 <DHT11_Check_Response+0x4c>
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	e003      	b.n	800042c <DHT11_Check_Response+0x54>
		else Response = -1;
 8000424:	230f      	movs	r3, #15
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	22ff      	movs	r2, #255	@ 0xff
 800042a:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go low
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	889b      	ldrh	r3, [r3, #4]
 8000436:	0019      	movs	r1, r3
 8000438:	0010      	movs	r0, r2
 800043a:	f000 fffd 	bl	8001438 <HAL_GPIO_ReadPin>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d1f5      	bne.n	800042e <DHT11_Check_Response+0x56>

	return Response;
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	781b      	ldrb	r3, [r3, #0]
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b005      	add	sp, #20
 800044e:	bd90      	pop	{r4, r7, pc}

08000450 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_data *data)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000458:	230e      	movs	r3, #14
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e04d      	b.n	80004fe <DHT11_Read+0xae>
	{
		while (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));   // wait for the pin to go high
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	889b      	ldrh	r3, [r3, #4]
 800046c:	0019      	movs	r1, r3
 800046e:	0010      	movs	r0, r2
 8000470:	f000 ffe2 	bl	8001438 <HAL_GPIO_ReadPin>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d0f5      	beq.n	8000464 <DHT11_Read+0x14>
		microsecond_delay(40);   // wait for 40 us
 8000478:	2028      	movs	r0, #40	@ 0x28
 800047a:	f000 fac9 	bl	8000a10 <microsecond_delay>
		if (!(HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)))   // if the pin is low
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	889b      	ldrh	r3, [r3, #4]
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f000 ffd5 	bl	8001438 <HAL_GPIO_ReadPin>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d113      	bne.n	80004ba <DHT11_Read+0x6a>
		{
			i&= ~(1<<(7-j));   // write 0
 8000492:	230e      	movs	r3, #14
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2207      	movs	r2, #7
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	2201      	movs	r2, #1
 800049e:	409a      	lsls	r2, r3
 80004a0:	0013      	movs	r3, r2
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	210f      	movs	r1, #15
 80004aa:	187a      	adds	r2, r7, r1
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	b252      	sxtb	r2, r2
 80004b0:	4013      	ands	r3, r2
 80004b2:	b25a      	sxtb	r2, r3
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	701a      	strb	r2, [r3, #0]
 80004b8:	e010      	b.n	80004dc <DHT11_Read+0x8c>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80004ba:	230e      	movs	r3, #14
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2207      	movs	r2, #7
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	2201      	movs	r2, #1
 80004c6:	409a      	lsls	r2, r3
 80004c8:	0013      	movs	r3, r2
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	210f      	movs	r1, #15
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (data->GPIO_Port, data->GPIO_Pin)));  // wait for the pin to go low
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 ffa5 	bl	8001438 <HAL_GPIO_ReadPin>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d1f5      	bne.n	80004de <DHT11_Read+0x8e>
	for (j=0;j<8;j++)
 80004f2:	210e      	movs	r1, #14
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	3201      	adds	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	230e      	movs	r3, #14
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d9ac      	bls.n	8000462 <DHT11_Read+0x12>
	}
	return i;
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
}
 800050e:	0018      	movs	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	b004      	add	sp, #16
 8000514:	bd80      	pop	{r7, pc}

08000516 <DHT_GetData>:

void DHT_GetData(DHT11_data *data)
{
 8000516:	b5b0      	push	{r4, r5, r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
    DHT11_Start (data);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f7ff ff27 	bl	8000374 <DHT11_Start>
    uint8_t presence = DHT11_Check_Response (data);
 8000526:	230f      	movs	r3, #15
 8000528:	18fc      	adds	r4, r7, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff ff53 	bl	80003d8 <DHT11_Check_Response>
 8000532:	0003      	movs	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]

	data->int_humidity = DHT11_Read (data);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff89 	bl	8000450 <DHT11_Read>
 800053e:	0003      	movs	r3, r0
 8000540:	001a      	movs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	719a      	strb	r2, [r3, #6]
	data->dec_humidity = DHT11_Read (data);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff ff81 	bl	8000450 <DHT11_Read>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	71da      	strb	r2, [r3, #7]
	data->int_temperature = DHT11_Read (data);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff79 	bl	8000450 <DHT11_Read>
 800055e:	0003      	movs	r3, r0
 8000560:	001a      	movs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	721a      	strb	r2, [r3, #8]
	data->dec_temperature = DHT11_Read (data);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff71 	bl	8000450 <DHT11_Read>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	725a      	strb	r2, [r3, #9]

	uint8_t checksum = DHT11_Read(data);
 8000576:	250e      	movs	r5, #14
 8000578:	197c      	adds	r4, r7, r5
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff67 	bl	8000450 <DHT11_Read>
 8000582:	0003      	movs	r3, r0
 8000584:	7023      	strb	r3, [r4, #0]

	if (checksum == (data->int_humidity + data->dec_humidity + data->int_temperature + data->dec_temperature))
 8000586:	197b      	adds	r3, r7, r5
 8000588:	781a      	ldrb	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	0019      	movs	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	7a09      	ldrb	r1, [r1, #8]
 800059a:	185b      	adds	r3, r3, r1
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	7a49      	ldrb	r1, [r1, #9]
 80005a0:	185b      	adds	r3, r3, r1
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d10f      	bne.n	80005c6 <DHT_GetData+0xb0>
	{
		data->temperature = data->int_temperature;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7a1b      	ldrb	r3, [r3, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe38 	bl	8000220 <__aeabi_ui2f>
 80005b0:	1c02      	adds	r2, r0, #0
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	611a      	str	r2, [r3, #16]
		data->humidity = data->int_humidity;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe30 	bl	8000220 <__aeabi_ui2f>
 80005c0:	1c02      	adds	r2, r0, #0
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
	}
}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}

080005ce <HAL_I2C_ListenCpltCallback>:

/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f98f 	bl	80018fc <HAL_I2C_EnableListen_IT>
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <set_register>:

void set_register(uint8_t reg_addr, uint8_t reg_value) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	1dbb      	adds	r3, r7, #6
 80005f6:	1c0a      	adds	r2, r1, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	if (reg_addr > 32) return;
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d806      	bhi.n	8000610 <set_register+0x28>

	registers[reg_addr] = reg_value;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <set_register+0x30>)
 8000608:	1db9      	adds	r1, r7, #6
 800060a:	7809      	ldrb	r1, [r1, #0]
 800060c:	54d1      	strb	r1, [r2, r3]
 800060e:	e000      	b.n	8000612 <set_register+0x2a>
	if (reg_addr > 32) return;
 8000610:	46c0      	nop			@ (mov r8, r8)
}
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000030 	.word	0x20000030

0800061c <get_register>:

uint8_t get_register(uint8_t reg_addr) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	if (reg_addr > 32) return 0;
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b20      	cmp	r3, #32
 800062e:	d901      	bls.n	8000634 <get_register+0x18>
 8000630:	2300      	movs	r3, #0
 8000632:	e003      	b.n	800063c <get_register+0x20>

	return registers[reg_addr];
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4a02      	ldr	r2, [pc, #8]	@ (8000644 <get_register+0x28>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000030 	.word	0x20000030

08000648 <HAL_I2C_AddrCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when address match our address
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	0008      	movs	r0, r1
 8000652:	0011      	movs	r1, r2
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	1c02      	adds	r2, r0, #0
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	003b      	movs	r3, r7
 800065c:	1c0a      	adds	r2, r1, #0
 800065e:	801a      	strh	r2, [r3, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000660:	1cfb      	adds	r3, r7, #3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d117      	bne.n	8000698 <HAL_I2C_AddrCallback+0x50>
	{
		for (int index = 0; index < RxSIZE; ++index) RxData[index] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e007      	b.n	800067e <HAL_I2C_AddrCallback+0x36>
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	18d3      	adds	r3, r2, r3
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	ddf4      	ble.n	800066e <HAL_I2C_AddrCallback+0x26>
		RxCounter = 1;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <HAL_I2C_AddrCallback+0x80>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData, TRANSMISSION_WRITE_SIZE, I2C_FIRST_FRAME);
 800068a:	490e      	ldr	r1, [pc, #56]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	2300      	movs	r3, #0
 8000690:	2202      	movs	r2, #2
 8000692:	f001 f871 	bl	8001778 <HAL_I2C_Slave_Seq_Receive_IT>
	else
	{
		uint8_t reg_value = get_register(RxData[0]);
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &reg_value, 1, I2C_FIRST_AND_LAST_FRAME);
	}
}
 8000696:	e010      	b.n	80006ba <HAL_I2C_AddrCallback+0x72>
		uint8_t reg_value = get_register(RxData[0]);
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_I2C_AddrCallback+0x7c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ffbd 	bl	800061c <get_register>
 80006a2:	0003      	movs	r3, r0
 80006a4:	001a      	movs	r2, r3
 80006a6:	210b      	movs	r1, #11
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &reg_value, 1, I2C_FIRST_AND_LAST_FRAME);
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	049b      	lsls	r3, r3, #18
 80006b0:	1879      	adds	r1, r7, r1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	2201      	movs	r2, #1
 80006b6:	f000 ff9f 	bl	80015f8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	2000002e 	.word	0x2000002e

080006cc <process_data>:

void process_data(I2C_HandleTypeDef *hi2c) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	set_register(RxData[0], RxData[1]);
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <process_data+0x20>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <process_data+0x20>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f7ff ff82 	bl	80005e8 <set_register>
	//HAL_I2C_EnableListen_IT(hi2c);
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <HAL_I2C_SlaveRxCpltCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when we complete the buffer RxData
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	RxCounter++;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000702:	701a      	strb	r2, [r3, #0]
	switch (RxCounter) {
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <HAL_I2C_SlaveRxCpltCallback+0x22>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d00c      	beq.n	800072a <HAL_I2C_SlaveRxCpltCallback+0x3a>
 8000710:	e010      	b.n	8000734 <HAL_I2C_SlaveRxCpltCallback+0x44>
		case RxSIZE - 1: // before last frame
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+RxCounter, 1, I2C_LAST_FRAME);
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001a      	movs	r2, r3
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800071a:	18d1      	adds	r1, r2, r3
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	049b      	lsls	r3, r3, #18
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	f001 f828 	bl	8001778 <HAL_I2C_Slave_Seq_Receive_IT>
			break;
 8000728:	e010      	b.n	800074c <HAL_I2C_SlaveRxCpltCallback+0x5c>
		case RxSIZE: // all frame received
			process_data(hi2c);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ffcd 	bl	80006cc <process_data>
			break;
 8000732:	e00b      	b.n	800074c <HAL_I2C_SlaveRxCpltCallback+0x5c>
		default: // more than one frame to be received
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+RxCounter, 1, I2C_NEXT_FRAME);
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800073c:	18d1      	adds	r1, r2, r3
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	045b      	lsls	r3, r3, #17
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	2201      	movs	r2, #1
 8000746:	f001 f817 	bl	8001778 <HAL_I2C_Slave_Seq_Receive_IT>
			break;
 800074a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800074c:	46c0      	nop			@ (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000002e 	.word	0x2000002e
 8000758:	2000002c 	.word	0x2000002c

0800075c <HAL_I2C_ErrorCallback>:
/**
 * Overrides the __weak function in stm32c0xx_hal_i2c.c
 * Called when we complete the buffer RxData
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	error_counter++;
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_I2C_ErrorCallback+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_I2C_ErrorCallback+0x40>)
 800076c:	601a      	str	r2, [r3, #0]

	uint32_t error_code = HAL_I2C_GetError(hi2c);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f988 	bl	8001a86 <HAL_I2C_GetError>
 8000776:	0003      	movs	r3, r0
 8000778:	60fb      	str	r3, [r7, #12]

	switch (error_code) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d104      	bne.n	800078a <HAL_I2C_ErrorCallback+0x2e>
		case 4: // Acknowledge failure
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2210      	movs	r2, #16
 8000786:	61da      	str	r2, [r3, #28]
			break;
 8000788:	e000      	b.n	800078c <HAL_I2C_ErrorCallback+0x30>
		default:
			break;
 800078a:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_I2C_EnableListen_IT(hi2c);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f8b4 	bl	80018fc <HAL_I2C_EnableListen_IT>
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000050 	.word	0x20000050

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  data.GPIO_Pin = DHT11_Data_Pin;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <main+0x70>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	809a      	strh	r2, [r3, #4]
  data.GPIO_Port = DHT11_Data_GPIO_Port;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <main+0x70>)
 80007ac:	22a0      	movs	r2, #160	@ 0xa0
 80007ae:	05d2      	lsls	r2, r2, #23
 80007b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 faca 	bl	8000d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f835 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f8d9 	bl	8000970 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007be:	f000 f87b 	bl	80008b8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80007c2:	f000 f873 	bl	80008ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  I2c_slave_address = 12;
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <main+0x74>)
 80007c8:	220c      	movs	r2, #12
 80007ca:	701a      	strb	r2, [r3, #0]
  real_I2C1_Init();
 80007cc:	f000 f93a 	bl	8000a44 <real_I2C1_Init>

  if (HAL_TIM_Base_Start(&htim1) != HAL_OK)      Error_Handler();
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <main+0x78>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 f8b2 	bl	800393c <HAL_TIM_Base_Start>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <main+0x40>
 80007dc:	f000 f976 	bl	8000acc <Error_Handler>
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) Error_Handler();
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <main+0x7c>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f88a 	bl	80018fc <HAL_I2C_EnableListen_IT>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <main+0x50>
 80007ec:	f000 f96e 	bl	8000acc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	counter_glob++;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <main+0x80>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <main+0x80>)
 80007f8:	601a      	str	r2, [r3, #0]
	DHT_GetData(&data);
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <main+0x70>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fe8a 	bl	8000516 <DHT_GetData>
	HAL_Delay(1000);
 8000802:	23fa      	movs	r3, #250	@ 0xfa
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fb1c 	bl	8000e44 <HAL_Delay>
	counter_glob++;
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	e7ef      	b.n	80007f0 <main+0x50>
 8000810:	200000f4 	.word	0x200000f4
 8000814:	20000000 	.word	0x20000000
 8000818:	200000a8 	.word	0x200000a8
 800081c:	20000054 	.word	0x20000054
 8000820:	20000108 	.word	0x20000108

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b08d      	sub	sp, #52	@ 0x34
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	2414      	movs	r4, #20
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0018      	movs	r0, r3
 8000830:	231c      	movs	r3, #28
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f003 fb07 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083a:	003b      	movs	r3, r7
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f003 fb00 	bl	8003e48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2202      	movs	r2, #2
 800084c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0152      	lsls	r2, r2, #5
 800085c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2240      	movs	r2, #64	@ 0x40
 8000862:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	f002 fbf2 	bl	8003050 <HAL_RCC_OscConfig>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000870:	f000 f92c 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	003b      	movs	r3, r7
 8000876:	2207      	movs	r2, #7
 8000878:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000886:	003b      	movs	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800088c:	003b      	movs	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000892:	003b      	movs	r3, r7
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f002 fdbe 	bl	8003418 <HAL_RCC_ClockConfig>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008a0:	f000 f914 	bl	8000acc <Error_Handler>
  }
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b00d      	add	sp, #52	@ 0x34
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  #endif
  /* USER CODE END I2C1_Init 2 */

}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	2310      	movs	r3, #16
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2310      	movs	r3, #16
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fabd 	bl	8003e48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	230c      	movs	r3, #12
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 fab6 	bl	8003e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008dc:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008de:	4a22      	ldr	r2, [pc, #136]	@ (8000968 <MX_TIM1_Init+0xb0>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PRESCALER;
 80008e2:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008f0:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <MX_TIM1_Init+0xb4>)
 80008f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM1_Init+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM1_Init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_TIM1_Init+0xac>)
 8000908:	0018      	movs	r0, r3
 800090a:	f002 ffbf 	bl	800388c <HAL_TIM_Base_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f8db 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	2110      	movs	r1, #16
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	0152      	lsls	r2, r2, #5
 800091e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000920:	187a      	adds	r2, r7, r1
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_TIM1_Init+0xac>)
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f003 f84e 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f8cc 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000946:	1d3a      	adds	r2, r7, #4
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_TIM1_Init+0xac>)
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f003 fa19 	bl	8003d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000956:	f000 f8b9 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b008      	add	sp, #32
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	200000a8 	.word	0x200000a8
 8000968:	40012c00 	.word	0x40012c00
 800096c:	0000ffff 	.word	0x0000ffff

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	@ 0x24
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	240c      	movs	r4, #12
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f003 fa61 	bl	8003e48 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 8000988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 800098c:	2102      	movs	r1, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	2202      	movs	r2, #2
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009a4:	2104      	movs	r1, #4
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ae:	2204      	movs	r2, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_GPIO_Init+0x9c>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_Data_GPIO_Port, DHT11_Data_Pin, GPIO_PIN_RESET);
 80009ce:	23a0      	movs	r3, #160	@ 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fd4b 	bl	8001472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Data_Pin */
  GPIO_InitStruct.Pin = DHT11_Data_Pin;
 80009dc:	0021      	movs	r1, r4
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_Data_GPIO_Port, &GPIO_InitStruct);
 80009f6:	187a      	adds	r2, r7, r1
 80009f8:	23a0      	movs	r3, #160	@ 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fba8 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b009      	add	sp, #36	@ 0x24
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	40021000 	.word	0x40021000

08000a10 <microsecond_delay>:

/* USER CODE BEGIN 4 */

void microsecond_delay(uint16_t duration)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dbb      	adds	r3, r7, #6
 8000a1a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);                 // set the counter value a 0
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <microsecond_delay+0x30>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < duration); // wait for the counter to reach the us input in the parameter
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <microsecond_delay+0x30>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3f8      	bcc.n	8000a26 <microsecond_delay+0x16>
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	200000a8 	.word	0x200000a8

08000a44 <real_I2C1_Init>:


static void real_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <real_I2C1_Init+0x7c>)
 8000a4c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x40000A0B;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a50:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <real_I2C1_Init+0x80>)
 8000a52:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = (I2c_slave_address << 1);
 8000a54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <real_I2C1_Init+0x84>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	005a      	lsls	r2, r3, #1
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fd11 	bl	80014ac <HAL_I2C_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <real_I2C1_Init+0x4e>
	{
	Error_Handler();
 8000a8e:	f000 f81d 	bl	8000acc <Error_Handler>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <real_I2C1_Init+0x78>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 fa42 	bl	8002f20 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <real_I2C1_Init+0x60>
	{
	Error_Handler();
 8000aa0:	f000 f814 	bl	8000acc <Error_Handler>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <real_I2C1_Init+0x78>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 fa85 	bl	8002fb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <real_I2C1_Init+0x72>
	{
	Error_Handler();
 8000ab2:	f000 f80b 	bl	8000acc <Error_Handler>
	}
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000054 	.word	0x20000054
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40000a0b 	.word	0x40000a0b
 8000ac8:	20000000 	.word	0x20000000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	0549      	lsls	r1, r1, #21
 8000b00:	430a      	orrs	r2, r1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	055b      	lsls	r3, r3, #21
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b093      	sub	sp, #76	@ 0x4c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	2334      	movs	r3, #52	@ 0x34
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2314      	movs	r3, #20
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f003 f988 	bl	8003e48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	2418      	movs	r4, #24
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	231c      	movs	r3, #28
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f003 f980 	bl	8003e48 <memset>
  if(hi2c->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a37      	ldr	r2, [pc, #220]	@ (8000c2c <HAL_I2C_MspInit+0x10c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d168      	bne.n	8000c24 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2240      	movs	r2, #64	@ 0x40
 8000b56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 fda5 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff ffaf 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b72:	4b2f      	ldr	r3, [pc, #188]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	2204      	movs	r2, #4
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SCL
    PC14-OSCX_IN (PC14)     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b9e:	2434      	movs	r4, #52	@ 0x34
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2212      	movs	r2, #18
 8000baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	220e      	movs	r2, #14
 8000bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c34 <HAL_I2C_MspInit+0x114>)
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	0010      	movs	r0, r2
 8000bc6:	f000 fac5 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bca:	0021      	movs	r1, r4
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	01d2      	lsls	r2, r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2212      	movs	r2, #18
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF14_I2C1;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	220e      	movs	r2, #14
 8000bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <HAL_I2C_MspInit+0x118>)
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	0010      	movs	r0, r2
 8000bf4:	f000 faae 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000bfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000bfe:	2180      	movs	r1, #128	@ 0x80
 8000c00:	0389      	lsls	r1, r1, #14
 8000c02:	430a      	orrs	r2, r1
 8000c04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_I2C_MspInit+0x110>)
 8000c08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	039b      	lsls	r3, r3, #14
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2017      	movs	r0, #23
 8000c1a:	f000 f9e3 	bl	8000fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000c1e:	2017      	movs	r0, #23
 8000c20:	f000 f9f5 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b013      	add	sp, #76	@ 0x4c
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	50000400 	.word	0x50000400
 8000c38:	50000800 	.word	0x50000800

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <HAL_TIM_Base_MspInit+0x38>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10d      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	0109      	lsls	r1, r1, #4
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	40012c00 	.word	0x40012c00
 8000c78:	40021000 	.word	0x40021000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f8b2 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <I2C1_IRQHandler+0x2c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	23e0      	movs	r3, #224	@ 0xe0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d004      	beq.n	8000ccc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <I2C1_IRQHandler+0x2c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fe55 	bl	8001974 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000cca:	e003      	b.n	8000cd4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <I2C1_IRQHandler+0x2c>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fe36 	bl	8001940 <HAL_I2C_EV_IRQHandler>
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	20000054 	.word	0x20000054

08000ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <SystemInit+0x14>)
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	0512      	lsls	r2, r2, #20
 8000cea:	609a      	str	r2, [r3, #8]
#endif
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf8:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cfc:	f7ff fff0 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d02:	e003      	b.n	8000d0c <LoopCopyDataInit>

08000d04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d0a:	3104      	adds	r1, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d0c:	480a      	ldr	r0, [pc, #40]	@ (8000d38 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <LoopForever+0xe>)
  adds r2, r0, r1
 8000d10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d14:	d3f6      	bcc.n	8000d04 <CopyDataInit>
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <LoopForever+0x12>)
  b LoopFillZerobss
 8000d18:	e002      	b.n	8000d20 <LoopFillZerobss>

08000d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d1c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1e:	3204      	adds	r2, #4

08000d20 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <LoopForever+0x16>)
  cmp r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d24:	d3f9      	bcc.n	8000d1a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d26:	f003 f897 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fd39 	bl	80007a0 <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   r0, =_estack
 8000d30:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000d34:	08003f00 	.word	0x08003f00
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d3c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000d40:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000d44:	20000110 	.word	0x20000110

08000d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_IRQHandler>

08000d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f80e 	bl	8000d78 <HAL_InitTick>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e001      	b.n	8000d6c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d68:	f7ff feb6 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_InitTick+0x88>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d02b      	beq.n	8000de8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_InitTick+0x8c>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <HAL_InitTick+0x88>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	23fa      	movs	r3, #250	@ 0xfa
 8000d9c:	0098      	lsls	r0, r3, #2
 8000d9e:	f7ff f9b3 	bl	8000108 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	0019      	movs	r1, r3
 8000da6:	0020      	movs	r0, r4
 8000da8:	f7ff f9ae 	bl	8000108 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f93d 	bl	800102e <HAL_SYSTICK_Config>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d112      	bne.n	8000dde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d80a      	bhi.n	8000dd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f90c 	bl	8000fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_InitTick+0x90>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e00d      	b.n	8000df0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e008      	b.n	8000df0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e003      	b.n	8000df0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b005      	add	sp, #20
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	18d2      	adds	r2, r2, r3
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	2000010c 	.word	0x2000010c

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	2000010c 	.word	0x2000010c

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff fff0 	bl	8000e30 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	001a      	movs	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	f7ff ffe0 	bl	8000e30 <HAL_GetTick>
 8000e70:	0002      	movs	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	0002      	movs	r2, r0
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e9e:	d809      	bhi.n	8000eb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_EnableIRQ+0x30>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	4091      	lsls	r1, r2
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed4:	d828      	bhi.n	8000f28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <__NVIC_SetPriority+0xd4>)
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	33c0      	adds	r3, #192	@ 0xc0
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	589b      	ldr	r3, [r3, r2]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	@ 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	@ 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <__NVIC_SetPriority+0xd4>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	33c0      	adds	r3, #192	@ 0xc0
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f26:	e031      	b.n	8000f8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f28:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <__NVIC_SetPriority+0xd8>)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0019      	movs	r1, r3
 8000f30:	230f      	movs	r3, #15
 8000f32:	400b      	ands	r3, r1
 8000f34:	3b08      	subs	r3, #8
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3306      	adds	r3, #6
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	3304      	adds	r3, #4
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	0011      	movs	r1, r2
 8000f48:	2203      	movs	r2, #3
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	21ff      	movs	r1, #255	@ 0xff
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	019b      	lsls	r3, r3, #6
 8000f5e:	22ff      	movs	r2, #255	@ 0xff
 8000f60:	401a      	ands	r2, r3
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	0018      	movs	r0, r3
 8000f68:	2303      	movs	r3, #3
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <__NVIC_SetPriority+0xd8>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	001c      	movs	r4, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	4023      	ands	r3, r4
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	430a      	orrs	r2, r1
 8000f82:	3306      	adds	r3, #6
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	18c3      	adds	r3, r0, r3
 8000f88:	3304      	adds	r3, #4
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b003      	add	sp, #12
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	045b      	lsls	r3, r3, #17
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d301      	bcc.n	8000fb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e010      	b.n	8000fd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	3a01      	subs	r2, #1
 8000fba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff ff7c 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x44>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	210f      	movs	r1, #15
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	1c02      	adds	r2, r0, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	0002      	movs	r2, r0
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff33 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ffaf 	bl	8000f9c <SysTick_Config>
 800103e:	0003      	movs	r3, r0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2224      	movs	r2, #36	@ 0x24
 800105c:	2100      	movs	r1, #0
 800105e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	@ 0x24
 8001064:	5c9b      	ldrb	r3, [r3, r2]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_DMA_Abort_IT+0x26>
 800106a:	2302      	movs	r3, #2
 800106c:	e05e      	b.n	800112c <HAL_DMA_Abort_IT+0xe4>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2224      	movs	r2, #36	@ 0x24
 8001072:	2101      	movs	r1, #1
 8001074:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2225      	movs	r2, #37	@ 0x25
 800107a:	5c9b      	ldrb	r3, [r3, r2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d007      	beq.n	8001092 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2204      	movs	r2, #4
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e049      	b.n	8001126 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	210e      	movs	r1, #14
 800109e:	438a      	bics	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	438a      	bics	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010bc:	491d      	ldr	r1, [pc, #116]	@ (8001134 <HAL_DMA_Abort_IT+0xec>)
 80010be:	400a      	ands	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_DMA_Abort_IT+0xf0>)
 80010c4:	6859      	ldr	r1, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	221c      	movs	r2, #28
 80010cc:	4013      	ands	r3, r2
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_DMA_Abort_IT+0xf0>)
 80010d4:	430a      	orrs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00c      	beq.n	8001104 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f4:	490f      	ldr	r1, [pc, #60]	@ (8001134 <HAL_DMA_Abort_IT+0xec>)
 80010f6:	400a      	ands	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001102:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2225      	movs	r2, #37	@ 0x25
 8001108:	2101      	movs	r1, #1
 800110a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	@ 0x24
 8001110:	2100      	movs	r1, #0
 8001112:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0010      	movs	r0, r2
 8001124:	4798      	blx	r3
    }
  }
  return status;
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}
 8001134:	fffffeff 	.word	0xfffffeff
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2225      	movs	r2, #37	@ 0x25
 8001148:	5c9b      	ldrb	r3, [r3, r2]
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001162:	e153      	b.n	800140c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <HAL_GPIO_Init+0x28>
 800117a:	e144      	b.n	8001406 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x38>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b12      	cmp	r3, #18
 800118a:	d125      	bne.n	80011d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	58d3      	ldr	r3, [r2, r3]
 8001198:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2207      	movs	r2, #7
 800119e:	4013      	ands	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	220f      	movs	r2, #15
 80011b6:	401a      	ands	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2107      	movs	r1, #7
 80011bc:	400b      	ands	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	6979      	ldr	r1, [r7, #20]
 80011d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	401a      	ands	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	0013      	movs	r3, r2
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00b      	beq.n	800122c <HAL_GPIO_Init+0xd8>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001220:	2b11      	cmp	r3, #17
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4013      	ands	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	2201      	movs	r2, #1
 800127a:	401a      	ands	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4013      	ands	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	055b      	lsls	r3, r3, #21
 80012ce:	4013      	ands	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_GPIO_Init+0x180>
 80012d2:	e098      	b.n	8001406 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80012d4:	4a53      	ldr	r2, [pc, #332]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3318      	adds	r3, #24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	589b      	ldr	r3, [r3, r2]
 80012e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2203      	movs	r2, #3
 80012e6:	4013      	ands	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	220f      	movs	r2, #15
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	43da      	mvns	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	23a0      	movs	r3, #160	@ 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	429a      	cmp	r2, r3
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x1e2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	@ (8001428 <HAL_GPIO_Init+0x2d4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x1de>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a47      	ldr	r2, [pc, #284]	@ (800142c <HAL_GPIO_Init+0x2d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x1da>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a46      	ldr	r2, [pc, #280]	@ (8001430 <HAL_GPIO_Init+0x2dc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x1d6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a45      	ldr	r2, [pc, #276]	@ (8001434 <HAL_GPIO_Init+0x2e0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x1d2>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001326:	2306      	movs	r3, #6
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x1e4>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x1e4>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x1e4>
 8001336:	2300      	movs	r3, #0
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	2103      	movs	r1, #3
 800133c:	400a      	ands	r2, r1
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	4093      	lsls	r3, r2
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001348:	4936      	ldr	r1, [pc, #216]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3318      	adds	r3, #24
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001356:	4a33      	ldr	r2, [pc, #204]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	58d3      	ldr	r3, [r2, r3]
 800135c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800137c:	4929      	ldr	r1, [pc, #164]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001384:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001386:	2384      	movs	r3, #132	@ 0x84
 8001388:	58d3      	ldr	r3, [r2, r3]
 800138a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43da      	mvns	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4013      	ands	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80013aa:	491e      	ldr	r1, [pc, #120]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80013ac:	2284      	movs	r2, #132	@ 0x84
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4013      	ands	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	035b      	lsls	r3, r3, #13
 80013ca:	4013      	ands	r3, r2
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43da      	mvns	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	039b      	lsls	r3, r3, #14
 80013f4:	4013      	ands	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	40da      	lsrs	r2, r3
 8001414:	1e13      	subs	r3, r2, #0
 8001416:	d000      	beq.n	800141a <HAL_GPIO_Init+0x2c6>
 8001418:	e6a4      	b.n	8001164 <HAL_GPIO_Init+0x10>
  }
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b006      	add	sp, #24
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021800 	.word	0x40021800
 8001428:	50000400 	.word	0x50000400
 800142c:	50000800 	.word	0x50000800
 8001430:	50000c00 	.word	0x50000c00
 8001434:	50001400 	.word	0x50001400

08001438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	000a      	movs	r2, r1
 8001442:	1cbb      	adds	r3, r7, #2
 8001444:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	1cba      	adds	r2, r7, #2
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	4013      	ands	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001452:	230f      	movs	r3, #15
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e003      	b.n	8001464 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	781b      	ldrb	r3, [r3, #0]
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	0008      	movs	r0, r1
 800147c:	0011      	movs	r1, r2
 800147e:	1cbb      	adds	r3, r7, #2
 8001480:	1c02      	adds	r2, r0, #0
 8001482:	801a      	strh	r2, [r3, #0]
 8001484:	1c7b      	adds	r3, r7, #1
 8001486:	1c0a      	adds	r2, r1, #0
 8001488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148a:	1c7b      	adds	r3, r7, #1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149a:	e003      	b.n	80014a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149c:	1cbb      	adds	r3, r7, #2
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e08f      	b.n	80015de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2241      	movs	r2, #65	@ 0x41
 80014c2:	5c9b      	ldrb	r3, [r3, r2]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d107      	bne.n	80014da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2240      	movs	r2, #64	@ 0x40
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fb23 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2241      	movs	r2, #65	@ 0x41
 80014de:	2124      	movs	r1, #36	@ 0x24
 80014e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	438a      	bics	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	493b      	ldr	r1, [pc, #236]	@ (80015e8 <HAL_I2C_Init+0x13c>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4938      	ldr	r1, [pc, #224]	@ (80015ec <HAL_I2C_Init+0x140>)
 800150c:	400a      	ands	r2, r1
 800150e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2180      	movs	r1, #128	@ 0x80
 8001522:	0209      	lsls	r1, r1, #8
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e007      	b.n	800153a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2184      	movs	r1, #132	@ 0x84
 8001534:	0209      	lsls	r1, r1, #8
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d109      	bne.n	8001556 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	0109      	lsls	r1, r1, #4
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	e007      	b.n	8001566 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4923      	ldr	r1, [pc, #140]	@ (80015f0 <HAL_I2C_Init+0x144>)
 8001562:	400a      	ands	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4920      	ldr	r1, [pc, #128]	@ (80015f4 <HAL_I2C_Init+0x148>)
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	491a      	ldr	r1, [pc, #104]	@ (80015ec <HAL_I2C_Init+0x140>)
 8001582:	400a      	ands	r2, r1
 8001584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	431a      	orrs	r2, r3
 8001590:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69d9      	ldr	r1, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2241      	movs	r2, #65	@ 0x41
 80015ca:	2120      	movs	r1, #32
 80015cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2242      	movs	r2, #66	@ 0x42
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	f0ffffff 	.word	0xf0ffffff
 80015ec:	ffff7fff 	.word	0xffff7fff
 80015f0:	fffff7ff 	.word	0xfffff7ff
 80015f4:	02008000 	.word	0x02008000

080015f8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2241      	movs	r2, #65	@ 0x41
 800160c:	5c9b      	ldrb	r3, [r3, r2]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	001a      	movs	r2, r3
 8001612:	2328      	movs	r3, #40	@ 0x28
 8001614:	4013      	ands	r3, r2
 8001616:	2b28      	cmp	r3, #40	@ 0x28
 8001618:	d000      	beq.n	800161c <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 800161a:	e09f      	b.n	800175c <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8001622:	1dbb      	adds	r3, r7, #6
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d105      	bne.n	8001636 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e093      	b.n	800175e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001636:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f001 fc0b 	bl	8002e58 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2240      	movs	r2, #64	@ 0x40
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 800164c:	2302      	movs	r3, #2
 800164e:	e086      	b.n	800175e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2240      	movs	r2, #64	@ 0x40
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2241      	movs	r2, #65	@ 0x41
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b2a      	cmp	r3, #42	@ 0x2a
 8001662:	d12c      	bne.n	80016be <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2102      	movs	r1, #2
 8001668:	0018      	movs	r0, r3
 800166a:	f001 fbf5 	bl	8002e58 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	401a      	ands	r2, r3
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	429a      	cmp	r2, r3
 8001680:	d11d      	bne.n	80016be <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4937      	ldr	r1, [pc, #220]	@ (800176c <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 800168e:	400a      	ands	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169e:	4a34      	ldr	r2, [pc, #208]	@ (8001770 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80016a0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fcce 	bl	8001048 <HAL_DMA_Abort_IT>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d006      	beq.n	80016be <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ba:	0018      	movs	r0, r3
 80016bc:	4790      	blx	r2
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2241      	movs	r2, #65	@ 0x41
 80016c2:	2129      	movs	r1, #41	@ 0x29
 80016c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2242      	movs	r2, #66	@ 0x42
 80016ca:	2120      	movs	r1, #32
 80016cc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4923      	ldr	r1, [pc, #140]	@ (800176c <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1dba      	adds	r2, r7, #6
 80016ee:	8812      	ldrh	r2, [r2, #0]
 80016f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2208      	movs	r2, #8
 8001710:	4013      	ands	r3, r2
 8001712:	3b08      	subs	r3, #8
 8001714:	425a      	negs	r2, r3
 8001716:	4153      	adcs	r3, r2
 8001718:	b2da      	uxtb	r2, r3
 800171a:	2117      	movs	r1, #23
 800171c:	187b      	adds	r3, r7, r1
 800171e:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8001734:	187b      	adds	r3, r7, r1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2208      	movs	r2, #8
 8001742:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2240      	movs	r2, #64	@ 0x40
 8001748:	2100      	movs	r1, #0
 800174a:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f001 faf6 	bl	8002d44 <I2C_Enable_IRQ>

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b006      	add	sp, #24
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	00008001 	.word	0x00008001
 800176c:	ffff7fff 	.word	0xffff7fff
 8001770:	08002c93 	.word	0x08002c93
 8001774:	08001a9d 	.word	0x08001a9d

08001778 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2241      	movs	r2, #65	@ 0x41
 800178c:	5c9b      	ldrb	r3, [r3, r2]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	001a      	movs	r2, r3
 8001792:	2328      	movs	r3, #40	@ 0x28
 8001794:	4013      	ands	r3, r2
 8001796:	2b28      	cmp	r3, #40	@ 0x28
 8001798:	d000      	beq.n	800179c <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 800179a:	e09f      	b.n	80018dc <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2280      	movs	r2, #128	@ 0x80
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e093      	b.n	80018de <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80017b6:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f001 fb4b 	bl	8002e58 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e086      	b.n	80018de <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2240      	movs	r2, #64	@ 0x40
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2241      	movs	r2, #65	@ 0x41
 80017dc:	5c9b      	ldrb	r3, [r3, r2]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b29      	cmp	r3, #41	@ 0x29
 80017e2:	d12c      	bne.n	800183e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2101      	movs	r1, #1
 80017e8:	0018      	movs	r0, r3
 80017ea:	f001 fb35 	bl	8002e58 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	@ 0x80
 80017f6:	01db      	lsls	r3, r3, #7
 80017f8:	401a      	ands	r2, r3
 80017fa:	2380      	movs	r3, #128	@ 0x80
 80017fc:	01db      	lsls	r3, r3, #7
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11d      	bne.n	800183e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4937      	ldr	r1, [pc, #220]	@ (80018ec <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 800180e:	400a      	ands	r2, r1
 8001810:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001816:	2b00      	cmp	r3, #0
 8001818:	d011      	beq.n	800183e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181e:	4a34      	ldr	r2, [pc, #208]	@ (80018f0 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8001820:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff fc0e 	bl	8001048 <HAL_DMA_Abort_IT>
 800182c:	1e03      	subs	r3, r0, #0
 800182e:	d006      	beq.n	800183e <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183a:	0018      	movs	r0, r3
 800183c:	4790      	blx	r2
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2241      	movs	r2, #65	@ 0x41
 8001842:	212a      	movs	r1, #42	@ 0x2a
 8001844:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2242      	movs	r2, #66	@ 0x42
 800184a:	2120      	movs	r1, #32
 800184c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4925      	ldr	r1, [pc, #148]	@ (80018f4 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8001860:	400a      	ands	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1dba      	adds	r2, r7, #6
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4a1c      	ldr	r2, [pc, #112]	@ (80018f8 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2208      	movs	r2, #8
 8001890:	4013      	ands	r3, r2
 8001892:	3b08      	subs	r3, #8
 8001894:	425a      	negs	r2, r3
 8001896:	4153      	adcs	r3, r2
 8001898:	b2da      	uxtb	r2, r3
 800189a:	2117      	movs	r1, #23
 800189c:	187b      	adds	r3, r7, r1
 800189e:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2208      	movs	r2, #8
 80018c2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80018cc:	4a06      	ldr	r2, [pc, #24]	@ (80018e8 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fa36 	bl	8002d44 <I2C_Enable_IRQ>

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
  }
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b006      	add	sp, #24
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	00008002 	.word	0x00008002
 80018ec:	ffffbfff 	.word	0xffffbfff
 80018f0:	08002c93 	.word	0x08002c93
 80018f4:	ffff7fff 	.word	0xffff7fff
 80018f8:	08001a9d 	.word	0x08001a9d

080018fc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2241      	movs	r2, #65	@ 0x41
 8001908:	5c9b      	ldrb	r3, [r3, r2]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b20      	cmp	r3, #32
 800190e:	d10f      	bne.n	8001930 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2241      	movs	r2, #65	@ 0x41
 8001914:	2128      	movs	r1, #40	@ 0x28
 8001916:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_I2C_EnableListen_IT+0x40>)
 800191c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	021a      	lsls	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f001 fa0c 	bl	8002d44 <I2C_Enable_IRQ>

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	08001a9d 	.word	0x08001a9d

08001940 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
  }
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800199c:	d00a      	beq.n	80019b4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	2201      	movs	r2, #1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4013      	ands	r3, r2
 80019bc:	d00e      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80019c4:	d00a      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	2208      	movs	r2, #8
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2280      	movs	r2, #128	@ 0x80
 80019d8:	00d2      	lsls	r2, r2, #3
 80019da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d00e      	beq.n	8001a04 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019ec:	d00a      	beq.n	8001a04 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	2202      	movs	r2, #2
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	220b      	movs	r2, #11
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d005      	beq.n	8001a1e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 ffed 	bl	80029f8 <I2C_ITError>
  }
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b006      	add	sp, #24
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2240      	movs	r2, #64	@ 0x40
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <I2C_Slave_ISR_IT+0x24>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0e6      	b.n	8001c8e <I2C_Slave_ISR_IT+0x1f2>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2220      	movs	r2, #32
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ad6:	d005      	beq.n	8001ae4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0011      	movs	r1, r2
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fe02 	bl	80026e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d052      	beq.n	8001b92 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2210      	movs	r2, #16
 8001af0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001af2:	d04e      	beq.n	8001b92 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12d      	bne.n	8001b5a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2241      	movs	r2, #65	@ 0x41
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b28      	cmp	r3, #40	@ 0x28
 8001b08:	d10b      	bne.n	8001b22 <I2C_Slave_ISR_IT+0x86>
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	049b      	lsls	r3, r3, #18
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	0011      	movs	r1, r2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 ff14 	bl	8002948 <I2C_ITListenCplt>
 8001b20:	e036      	b.n	8001b90 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2241      	movs	r2, #65	@ 0x41
 8001b26:	5c9b      	ldrb	r3, [r3, r2]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b29      	cmp	r3, #41	@ 0x29
 8001b2c:	d110      	bne.n	8001b50 <I2C_Slave_ISR_IT+0xb4>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <I2C_Slave_ISR_IT+0x1fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00c      	beq.n	8001b50 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f001 f884 	bl	8002c4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fc9b 	bl	8002484 <I2C_ITSlaveSeqCplt>
 8001b4e:	e01f      	b.n	8001b90 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2210      	movs	r2, #16
 8001b56:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001b58:	e091      	b.n	8001c7e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2210      	movs	r2, #16
 8001b60:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	2204      	movs	r2, #4
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <I2C_Slave_ISR_IT+0xe4>
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	045b      	lsls	r3, r3, #17
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d000      	beq.n	8001b80 <I2C_Slave_ISR_IT+0xe4>
 8001b7e:	e07e      	b.n	8001c7e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0011      	movs	r1, r2
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 ff35 	bl	80029f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b8e:	e076      	b.n	8001c7e <I2C_Slave_ISR_IT+0x1e2>
 8001b90:	e075      	b.n	8001c7e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2204      	movs	r2, #4
 8001b96:	4013      	ands	r3, r2
 8001b98:	d02f      	beq.n	8001bfa <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ba0:	d02b      	beq.n	8001bfa <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d14c      	bne.n	8001c82 <I2C_Slave_ISR_IT+0x1e6>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <I2C_Slave_ISR_IT+0x1fc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d048      	beq.n	8001c82 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 fc46 	bl	8002484 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001bf8:	e043      	b.n	8001c82 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d00a      	beq.n	8001c18 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2208      	movs	r2, #8
 8001c06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c08:	d006      	beq.n	8001c18 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fb51 	bl	80022b8 <I2C_ITAddrCplt>
 8001c16:	e035      	b.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d031      	beq.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c26:	d02d      	beq.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d018      	beq.n	8001c64 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001c62:	e00f      	b.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	045b      	lsls	r3, r3, #17
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d002      	beq.n	8001c74 <I2C_Slave_ISR_IT+0x1d8>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fc04 	bl	8002484 <I2C_ITSlaveSeqCplt>
 8001c7c:	e002      	b.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	e000      	b.n	8001c84 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8001c82:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	@ 0x40
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b006      	add	sp, #24
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	ffff0000 	.word	0xffff0000

08001c9c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <I2C_Master_ISR_DMA+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e0e7      	b.n	8001e86 <I2C_Master_ISR_DMA+0x1ea>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2240      	movs	r2, #64	@ 0x40
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d017      	beq.n	8001cf6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ccc:	d013      	beq.n	8001cf6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	2204      	movs	r2, #4
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 f82c 	bl	8002d44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 ffad 	bl	8002c4e <I2C_Flush_TXDR>
 8001cf4:	e0c2      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d100      	bne.n	8001d00 <I2C_Master_ISR_DMA+0x64>
 8001cfe:	e07c      	b.n	8001dfa <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2240      	movs	r2, #64	@ 0x40
 8001d04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d06:	d100      	bne.n	8001d0a <I2C_Master_ISR_DMA+0x6e>
 8001d08:	e077      	b.n	8001dfa <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	438a      	bics	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d055      	beq.n	8001dd0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	0592      	lsls	r2, r2, #22
 8001d32:	0d92      	lsrs	r2, r2, #22
 8001d34:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2bff      	cmp	r3, #255	@ 0xff
 8001d3e:	d906      	bls.n	8001d4e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	22ff      	movs	r2, #255	@ 0xff
 8001d44:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	045b      	lsls	r3, r3, #17
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e010      	b.n	8001d70 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e90 <I2C_Master_ISR_DMA+0x1f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d003      	beq.n	8001d6a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e002      	b.n	8001d70 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	049b      	lsls	r3, r3, #18
 8001d6e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	697c      	ldr	r4, [r7, #20]
 8001d78:	2312      	movs	r3, #18
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	8819      	ldrh	r1, [r3, #0]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	0023      	movs	r3, r4
 8001d86:	f000 ffa3 	bl	8002cd0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2241      	movs	r2, #65	@ 0x41
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b22      	cmp	r3, #34	@ 0x22
 8001da6:	d109      	bne.n	8001dbc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	0209      	lsls	r1, r1, #8
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dba:	e05f      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	01c9      	lsls	r1, r1, #7
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dce:	e055      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	049b      	lsls	r3, r3, #18
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	049b      	lsls	r3, r3, #18
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d004      	beq.n	8001dee <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fb0a 	bl	8002400 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001dec:	e046      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2140      	movs	r1, #64	@ 0x40
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 fe00 	bl	80029f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001df8:	e040      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d02c      	beq.n	8001e5c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	@ 0x40
 8001e06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e08:	d028      	beq.n	8001e5c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11d      	bne.n	8001e50 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	049b      	lsls	r3, r3, #18
 8001e1e:	401a      	ands	r2, r3
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d028      	beq.n	8001e7a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <I2C_Master_ISR_DMA+0x1f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d109      	bne.n	8001e46 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	01c9      	lsls	r1, r1, #7
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e44:	e019      	b.n	8001e7a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 fad9 	bl	8002400 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e4e:	e014      	b.n	8001e7a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2140      	movs	r1, #64	@ 0x40
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 fdcf 	bl	80029f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e5a:	e00e      	b.n	8001e7a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e6a:	d007      	beq.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	0011      	movs	r1, r2
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 fb6a 	bl	800254c <I2C_ITMasterCplt>
 8001e78:	e000      	b.n	8001e7c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8001e7a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	2100      	movs	r1, #0
 8001e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b007      	add	sp, #28
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	ffff0000 	.word	0xffff0000

08001e94 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001ea0:	4b90      	ldr	r3, [pc, #576]	@ (80020e4 <I2C_Mem_ISR_DMA+0x250>)
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <I2C_Mem_ISR_DMA+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e113      	b.n	80020da <I2C_Mem_ISR_DMA+0x246>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d017      	beq.n	8001ef2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ec8:	d013      	beq.n	8001ef2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 ff2e 	bl	8002d44 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 feaf 	bl	8002c4e <I2C_Flush_TXDR>
 8001ef0:	e0ee      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f00:	d009      	beq.n	8001f16 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4252      	negs	r2, r2
 8001f12:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f14:	e0dc      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d063      	beq.n	8001fe6 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f24:	d05f      	beq.n	8001fe6 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 ff94 	bl	8002e58 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2110      	movs	r1, #16
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 ff05 	bl	8002d44 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d04a      	beq.n	8001fda <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d910      	bls.n	8001f70 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	22ff      	movs	r2, #255	@ 0xff
 8001f52:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	045b      	lsls	r3, r3, #17
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	2400      	movs	r4, #0
 8001f68:	9400      	str	r4, [sp, #0]
 8001f6a:	f000 feb1 	bl	8002cd0 <I2C_TransferConfig>
 8001f6e:	e011      	b.n	8001f94 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	049b      	lsls	r3, r3, #18
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	9400      	str	r4, [sp, #0]
 8001f90:	f000 fe9e 	bl	8002cd0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2241      	movs	r2, #65	@ 0x41
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b22      	cmp	r3, #34	@ 0x22
 8001fb0:	d109      	bne.n	8001fc6 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0209      	lsls	r1, r1, #8
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001fc4:	e084      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	01c9      	lsls	r1, r1, #7
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001fd8:	e07a      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2140      	movs	r1, #64	@ 0x40
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fd0a 	bl	80029f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001fe4:	e074      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2240      	movs	r2, #64	@ 0x40
 8001fea:	4013      	ands	r3, r2
 8001fec:	d062      	beq.n	80020b4 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2240      	movs	r2, #64	@ 0x40
 8001ff2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ff4:	d05e      	beq.n	80020b4 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 ff2c 	bl	8002e58 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2110      	movs	r1, #16
 8002004:	0018      	movs	r0, r3
 8002006:	f000 fe9d 	bl	8002d44 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2241      	movs	r2, #65	@ 0x41
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b22      	cmp	r3, #34	@ 0x22
 8002014:	d101      	bne.n	800201a <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8002016:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <I2C_Mem_ISR_DMA+0x254>)
 8002018:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2bff      	cmp	r3, #255	@ 0xff
 8002022:	d911      	bls.n	8002048 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	22ff      	movs	r2, #255	@ 0xff
 8002028:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	b299      	uxth	r1, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	b2da      	uxtb	r2, r3
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	045c      	lsls	r4, r3, #17
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	0023      	movs	r3, r4
 8002042:	f000 fe45 	bl	8002cd0 <I2C_TransferConfig>
 8002046:	e012      	b.n	800206e <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	b299      	uxth	r1, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205c:	b2da      	uxtb	r2, r3
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	049c      	lsls	r4, r3, #18
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	0023      	movs	r3, r4
 800206a:	f000 fe31 	bl	8002cd0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2241      	movs	r2, #65	@ 0x41
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b22      	cmp	r3, #34	@ 0x22
 800208a:	d109      	bne.n	80020a0 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2180      	movs	r1, #128	@ 0x80
 8002098:	0209      	lsls	r1, r1, #8
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800209e:	e017      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	01c9      	lsls	r1, r1, #7
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020b2:	e00d      	b.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020c2:	d005      	beq.n	80020d0 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fa3e 	bl	800254c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2240      	movs	r2, #64	@ 0x40
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b007      	add	sp, #28
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	80002000 	.word	0x80002000
 80020e8:	80002400 	.word	0x80002400

080020ec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <I2C_Slave_ISR_DMA+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e0cd      	b.n	80022ac <I2C_Slave_ISR_DMA+0x1c0>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	2101      	movs	r1, #1
 8002116:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2220      	movs	r2, #32
 800211c:	4013      	ands	r3, r2
 800211e:	d009      	beq.n	8002134 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002126:	d005      	beq.n	8002134 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fada 	bl	80026e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2210      	movs	r2, #16
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <I2C_Slave_ISR_DMA+0x52>
 800213c:	e0a3      	b.n	8002286 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2210      	movs	r2, #16
 8002142:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002144:	d100      	bne.n	8002148 <I2C_Slave_ISR_DMA+0x5c>
 8002146:	e09e      	b.n	8002286 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	4013      	ands	r3, r2
 8002150:	d105      	bne.n	800215e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800215a:	d100      	bne.n	800215e <I2C_Slave_ISR_DMA+0x72>
 800215c:	e08c      	b.n	8002278 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	4013      	ands	r3, r2
 800216e:	d007      	beq.n	8002180 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800217c:	2301      	movs	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	4013      	ands	r3, r2
 8002190:	d007      	beq.n	80021a2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d12d      	bne.n	8002204 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2241      	movs	r2, #65	@ 0x41
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b28      	cmp	r3, #40	@ 0x28
 80021b2:	d10b      	bne.n	80021cc <I2C_Slave_ISR_DMA+0xe0>
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	049b      	lsls	r3, r3, #18
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d106      	bne.n	80021cc <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fbbf 	bl	8002948 <I2C_ITListenCplt>
 80021ca:	e054      	b.n	8002276 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2241      	movs	r2, #65	@ 0x41
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b29      	cmp	r3, #41	@ 0x29
 80021d6:	d110      	bne.n	80021fa <I2C_Slave_ISR_DMA+0x10e>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4a36      	ldr	r2, [pc, #216]	@ (80022b4 <I2C_Slave_ISR_DMA+0x1c8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00c      	beq.n	80021fa <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 fd2f 	bl	8002c4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f946 	bl	8002484 <I2C_ITSlaveSeqCplt>
 80021f8:	e03d      	b.n	8002276 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002202:	e03e      	b.n	8002282 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	2204      	movs	r2, #4
 8002212:	431a      	orrs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002218:	2317      	movs	r3, #23
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	2141      	movs	r1, #65	@ 0x41
 8002220:	5c52      	ldrb	r2, [r2, r1]
 8002222:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <I2C_Slave_ISR_DMA+0x148>
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	045b      	lsls	r3, r3, #17
 8002230:	429a      	cmp	r2, r3
 8002232:	d126      	bne.n	8002282 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002234:	2217      	movs	r2, #23
 8002236:	18bb      	adds	r3, r7, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b21      	cmp	r3, #33	@ 0x21
 800223c:	d003      	beq.n	8002246 <I2C_Slave_ISR_DMA+0x15a>
 800223e:	18bb      	adds	r3, r7, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b29      	cmp	r3, #41	@ 0x29
 8002244:	d103      	bne.n	800224e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2221      	movs	r2, #33	@ 0x21
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
 800224c:	e00b      	b.n	8002266 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800224e:	2217      	movs	r2, #23
 8002250:	18bb      	adds	r3, r7, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b22      	cmp	r3, #34	@ 0x22
 8002256:	d003      	beq.n	8002260 <I2C_Slave_ISR_DMA+0x174>
 8002258:	18bb      	adds	r3, r7, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b2a      	cmp	r3, #42	@ 0x2a
 800225e:	d102      	bne.n	8002266 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2222      	movs	r2, #34	@ 0x22
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0011      	movs	r1, r2
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fbc2 	bl	80029f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8002274:	e005      	b.n	8002282 <I2C_Slave_ISR_DMA+0x196>
 8002276:	e004      	b.n	8002282 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002280:	e00f      	b.n	80022a2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8002282:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002284:	e00d      	b.n	80022a2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2208      	movs	r2, #8
 800228a:	4013      	ands	r3, r2
 800228c:	d009      	beq.n	80022a2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2208      	movs	r2, #8
 8002292:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002294:	d005      	beq.n	80022a2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0011      	movs	r1, r2
 800229c:	0018      	movs	r0, r3
 800229e:	f000 f80b 	bl	80022b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2240      	movs	r2, #64	@ 0x40
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b008      	add	sp, #32
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	ffff0000 	.word	0xffff0000

080022b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2241      	movs	r2, #65	@ 0x41
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	001a      	movs	r2, r3
 80022cc:	2328      	movs	r3, #40	@ 0x28
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b28      	cmp	r3, #40	@ 0x28
 80022d2:	d000      	beq.n	80022d6 <I2C_ITAddrCplt+0x1e>
 80022d4:	e088      	b.n	80023e8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	250f      	movs	r5, #15
 80022e2:	197b      	adds	r3, r7, r5
 80022e4:	2101      	movs	r1, #1
 80022e6:	400a      	ands	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	200c      	movs	r0, #12
 80022f6:	183b      	adds	r3, r7, r0
 80022f8:	21fe      	movs	r1, #254	@ 0xfe
 80022fa:	400a      	ands	r2, r1
 80022fc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	b29a      	uxth	r2, r3
 8002306:	240a      	movs	r4, #10
 8002308:	193b      	adds	r3, r7, r4
 800230a:	0592      	lsls	r2, r2, #22
 800230c:	0d92      	lsrs	r2, r2, #22
 800230e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	b29a      	uxth	r2, r3
 8002318:	2308      	movs	r3, #8
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	21fe      	movs	r1, #254	@ 0xfe
 800231e:	400a      	ands	r2, r1
 8002320:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d148      	bne.n	80023bc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800232a:	0021      	movs	r1, r4
 800232c:	187b      	adds	r3, r7, r1
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	09db      	lsrs	r3, r3, #7
 8002332:	b29a      	uxth	r2, r3
 8002334:	183b      	adds	r3, r7, r0
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	4053      	eors	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	001a      	movs	r2, r3
 800233e:	2306      	movs	r3, #6
 8002340:	4013      	ands	r3, r2
 8002342:	d120      	bne.n	8002386 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002344:	183b      	adds	r3, r7, r0
 8002346:	187a      	adds	r2, r7, r1
 8002348:	8812      	ldrh	r2, [r2, #0]
 800234a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800235a:	2b02      	cmp	r3, #2
 800235c:	d14c      	bne.n	80023f8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002374:	183b      	adds	r3, r7, r0
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	197b      	adds	r3, r7, r5
 800237a:	7819      	ldrb	r1, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f7fe f962 	bl	8000648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002384:	e038      	b.n	80023f8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002386:	240c      	movs	r4, #12
 8002388:	193b      	adds	r3, r7, r4
 800238a:	2208      	movs	r2, #8
 800238c:	18ba      	adds	r2, r7, r2
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0011      	movs	r1, r2
 800239a:	0018      	movs	r0, r3
 800239c:	f000 fd5c 	bl	8002e58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	7819      	ldrb	r1, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7fe f947 	bl	8000648 <HAL_I2C_AddrCallback>
}
 80023ba:	e01d      	b.n	80023f8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023bc:	2380      	movs	r3, #128	@ 0x80
 80023be:	021a      	lsls	r2, r3, #8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0011      	movs	r1, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 fd47 	bl	8002e58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2240      	movs	r2, #64	@ 0x40
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023d2:	230c      	movs	r3, #12
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	230f      	movs	r3, #15
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe f931 	bl	8000648 <HAL_I2C_AddrCallback>
}
 80023e6:	e007      	b.n	80023f8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2208      	movs	r2, #8
 80023ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}

08002400 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2242      	movs	r2, #66	@ 0x42
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2241      	movs	r2, #65	@ 0x41
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b21      	cmp	r3, #33	@ 0x21
 800241a:	d117      	bne.n	800244c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2241      	movs	r2, #65	@ 0x41
 8002420:	2120      	movs	r1, #32
 8002422:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2211      	movs	r2, #17
 8002428:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2101      	movs	r1, #1
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fd0f 	bl	8002e58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2240      	movs	r2, #64	@ 0x40
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff faee 	bl	8001a26 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800244a:	e016      	b.n	800247a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2241      	movs	r2, #65	@ 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2212      	movs	r2, #18
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2102      	movs	r1, #2
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fcf7 	bl	8002e58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2240      	movs	r2, #64	@ 0x40
 800246e:	2100      	movs	r1, #0
 8002470:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff fade 	bl	8001a36 <HAL_I2C_MasterRxCpltCallback>
}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2242      	movs	r2, #66	@ 0x42
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	01db      	lsls	r3, r3, #7
 80024a2:	4013      	ands	r3, r2
 80024a4:	d008      	beq.n	80024b8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4924      	ldr	r1, [pc, #144]	@ (8002544 <I2C_ITSlaveSeqCplt+0xc0>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e00c      	b.n	80024d2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4013      	ands	r3, r2
 80024c0:	d007      	beq.n	80024d2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	491e      	ldr	r1, [pc, #120]	@ (8002548 <I2C_ITSlaveSeqCplt+0xc4>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2241      	movs	r2, #65	@ 0x41
 80024d6:	5c9b      	ldrb	r3, [r3, r2]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b29      	cmp	r3, #41	@ 0x29
 80024dc:	d114      	bne.n	8002508 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	@ 0x41
 80024e2:	2128      	movs	r1, #40	@ 0x28
 80024e4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2101      	movs	r1, #1
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 fcb1 	bl	8002e58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2240      	movs	r2, #64	@ 0x40
 80024fa:	2100      	movs	r1, #0
 80024fc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff faa0 	bl	8001a46 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002506:	e019      	b.n	800253c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2241      	movs	r2, #65	@ 0x41
 800250c:	5c9b      	ldrb	r3, [r3, r2]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b2a      	cmp	r3, #42	@ 0x2a
 8002512:	d113      	bne.n	800253c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2241      	movs	r2, #65	@ 0x41
 8002518:	2128      	movs	r1, #40	@ 0x28
 800251a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2222      	movs	r2, #34	@ 0x22
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2102      	movs	r1, #2
 8002526:	0018      	movs	r0, r3
 8002528:	f000 fc96 	bl	8002e58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f7fe f8da 	bl	80006f0 <HAL_I2C_SlaveRxCpltCallback>
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	ffffbfff 	.word	0xffffbfff
 8002548:	ffff7fff 	.word	0xffff7fff

0800254c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2220      	movs	r2, #32
 8002560:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2241      	movs	r2, #65	@ 0x41
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b21      	cmp	r3, #33	@ 0x21
 800256c:	d108      	bne.n	8002580 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2101      	movs	r1, #1
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fc70 	bl	8002e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2211      	movs	r2, #17
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
 800257e:	e00d      	b.n	800259c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2241      	movs	r2, #65	@ 0x41
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b22      	cmp	r3, #34	@ 0x22
 800258a:	d107      	bne.n	800259c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2102      	movs	r1, #2
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fc61 	bl	8002e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2212      	movs	r2, #18
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	494e      	ldr	r1, [pc, #312]	@ (80026e0 <I2C_ITMasterCplt+0x194>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4b      	ldr	r2, [pc, #300]	@ (80026e4 <I2C_ITMasterCplt+0x198>)
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2210      	movs	r2, #16
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	2204      	movs	r2, #4
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2241      	movs	r2, #65	@ 0x41
 80025d8:	5c9b      	ldrb	r3, [r3, r2]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b60      	cmp	r3, #96	@ 0x60
 80025de:	d109      	bne.n	80025f4 <I2C_ITMasterCplt+0xa8>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2204      	movs	r2, #4
 80025e4:	4013      	ands	r3, r2
 80025e6:	d005      	beq.n	80025f4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80025f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fb29 	bl	8002c4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002600:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	@ 0x41
 8002606:	5c9b      	ldrb	r3, [r3, r2]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b60      	cmp	r3, #96	@ 0x60
 800260c:	d002      	beq.n	8002614 <I2C_ITMasterCplt+0xc8>
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0011      	movs	r1, r2
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f9eb 	bl	80029f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002622:	e058      	b.n	80026d6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2241      	movs	r2, #65	@ 0x41
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b21      	cmp	r3, #33	@ 0x21
 800262e:	d126      	bne.n	800267e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2241      	movs	r2, #65	@ 0x41
 8002634:	2120      	movs	r1, #32
 8002636:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2242      	movs	r2, #66	@ 0x42
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b40      	cmp	r3, #64	@ 0x40
 8002648:	d10c      	bne.n	8002664 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2242      	movs	r2, #66	@ 0x42
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2240      	movs	r2, #64	@ 0x40
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff f9fa 	bl	8001a56 <HAL_I2C_MemTxCpltCallback>
}
 8002662:	e038      	b.n	80026d6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2242      	movs	r2, #66	@ 0x42
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0018      	movs	r0, r3
 8002678:	f7ff f9d5 	bl	8001a26 <HAL_I2C_MasterTxCpltCallback>
}
 800267c:	e02b      	b.n	80026d6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2241      	movs	r2, #65	@ 0x41
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b22      	cmp	r3, #34	@ 0x22
 8002688:	d125      	bne.n	80026d6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	@ 0x41
 800268e:	2120      	movs	r1, #32
 8002690:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2242      	movs	r2, #66	@ 0x42
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d10c      	bne.n	80026be <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2242      	movs	r2, #66	@ 0x42
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7ff f9d5 	bl	8001a66 <HAL_I2C_MemRxCpltCallback>
}
 80026bc:	e00b      	b.n	80026d6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2242      	movs	r2, #66	@ 0x42
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2240      	movs	r2, #64	@ 0x40
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff f9b0 	bl	8001a36 <HAL_I2C_MasterRxCpltCallback>
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b006      	add	sp, #24
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	fe00e800 	.word	0xfe00e800
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026fe:	200f      	movs	r0, #15
 8002700:	183b      	adds	r3, r7, r0
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	2141      	movs	r1, #65	@ 0x41
 8002706:	5c52      	ldrb	r2, [r2, r1]
 8002708:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b21      	cmp	r3, #33	@ 0x21
 8002718:	d003      	beq.n	8002722 <I2C_ITSlaveCplt+0x3a>
 800271a:	183b      	adds	r3, r7, r0
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b29      	cmp	r3, #41	@ 0x29
 8002720:	d109      	bne.n	8002736 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002722:	4a82      	ldr	r2, [pc, #520]	@ (800292c <I2C_ITSlaveCplt+0x244>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fb95 	bl	8002e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2221      	movs	r2, #33	@ 0x21
 8002732:	631a      	str	r2, [r3, #48]	@ 0x30
 8002734:	e020      	b.n	8002778 <I2C_ITSlaveCplt+0x90>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002736:	220f      	movs	r2, #15
 8002738:	18bb      	adds	r3, r7, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b22      	cmp	r3, #34	@ 0x22
 800273e:	d003      	beq.n	8002748 <I2C_ITSlaveCplt+0x60>
 8002740:	18bb      	adds	r3, r7, r2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b2a      	cmp	r3, #42	@ 0x2a
 8002746:	d109      	bne.n	800275c <I2C_ITSlaveCplt+0x74>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002748:	4a79      	ldr	r2, [pc, #484]	@ (8002930 <I2C_ITSlaveCplt+0x248>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 fb82 	bl	8002e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2222      	movs	r2, #34	@ 0x22
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
 800275a:	e00d      	b.n	8002778 <I2C_ITSlaveCplt+0x90>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b28      	cmp	r3, #40	@ 0x28
 8002764:	d108      	bne.n	8002778 <I2C_ITSlaveCplt+0x90>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002766:	4a73      	ldr	r2, [pc, #460]	@ (8002934 <I2C_ITSlaveCplt+0x24c>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fb73 	bl	8002e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2180      	movs	r1, #128	@ 0x80
 8002784:	0209      	lsls	r1, r1, #8
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4968      	ldr	r1, [pc, #416]	@ (8002938 <I2C_ITSlaveCplt+0x250>)
 8002796:	400a      	ands	r2, r1
 8002798:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fa56 	bl	8002c4e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	d013      	beq.n	80027d4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4961      	ldr	r1, [pc, #388]	@ (800293c <I2C_ITSlaveCplt+0x254>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01f      	beq.n	8002804 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027d2:	e017      	b.n	8002804 <I2C_ITSlaveCplt+0x11c>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	4013      	ands	r3, r2
 80027dc:	d012      	beq.n	8002804 <I2C_ITSlaveCplt+0x11c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4955      	ldr	r1, [pc, #340]	@ (8002940 <I2C_ITSlaveCplt+0x258>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	d020      	beq.n	800284e <I2C_ITSlaveCplt+0x166>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2204      	movs	r2, #4
 8002810:	4393      	bics	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <I2C_ITSlaveCplt+0x166>
    {
      hi2c->XferSize--;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <I2C_ITSlaveCplt+0x17c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2204      	movs	r2, #4
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2242      	movs	r2, #66	@ 0x42
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	2b00      	cmp	r3, #0
 8002878:	d013      	beq.n	80028a2 <I2C_ITSlaveCplt+0x1ba>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f000 f8b8 	bl	80029f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2241      	movs	r2, #65	@ 0x41
 800288c:	5c9b      	ldrb	r3, [r3, r2]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b28      	cmp	r3, #40	@ 0x28
 8002892:	d147      	bne.n	8002924 <I2C_ITSlaveCplt+0x23c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f854 	bl	8002948 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028a0:	e040      	b.n	8002924 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	4a27      	ldr	r2, [pc, #156]	@ (8002944 <I2C_ITSlaveCplt+0x25c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d016      	beq.n	80028da <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff fde8 	bl	8002484 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <I2C_ITSlaveCplt+0x25c>)
 80028b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2241      	movs	r2, #65	@ 0x41
 80028be:	2120      	movs	r1, #32
 80028c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	2100      	movs	r1, #0
 80028ce:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7fd fe7b 	bl	80005ce <HAL_I2C_ListenCpltCallback>
}
 80028d8:	e024      	b.n	8002924 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2241      	movs	r2, #65	@ 0x41
 80028de:	5c9b      	ldrb	r3, [r3, r2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b22      	cmp	r3, #34	@ 0x22
 80028e4:	d10f      	bne.n	8002906 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2241      	movs	r2, #65	@ 0x41
 80028ea:	2120      	movs	r1, #32
 80028ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	2100      	movs	r1, #0
 80028fa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fef6 	bl	80006f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002904:	e00e      	b.n	8002924 <I2C_ITSlaveCplt+0x23c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2241      	movs	r2, #65	@ 0x41
 800290a:	2120      	movs	r1, #32
 800290c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff f891 	bl	8001a46 <HAL_I2C_SlaveTxCpltCallback>
}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b006      	add	sp, #24
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00008001 	.word	0x00008001
 8002930:	00008002 	.word	0x00008002
 8002934:	00008003 	.word	0x00008003
 8002938:	fe00e800 	.word	0xfe00e800
 800293c:	ffffbfff 	.word	0xffffbfff
 8002940:	ffff7fff 	.word	0xffff7fff
 8002944:	ffff0000 	.word	0xffff0000

08002948 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a26      	ldr	r2, [pc, #152]	@ (80029f0 <I2C_ITListenCplt+0xa8>)
 8002956:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2241      	movs	r2, #65	@ 0x41
 8002962:	2120      	movs	r1, #32
 8002964:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2242      	movs	r2, #66	@ 0x42
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	4013      	ands	r3, r2
 800297a:	d022      	beq.n	80029c2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	2204      	movs	r2, #4
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029c2:	4a0c      	ldr	r2, [pc, #48]	@ (80029f4 <I2C_ITListenCplt+0xac>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 fa45 	bl	8002e58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2210      	movs	r2, #16
 80029d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fd fdf4 	bl	80005ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	ffff0000 	.word	0xffff0000
 80029f4:	00008003 	.word	0x00008003

080029f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a02:	200f      	movs	r0, #15
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	2141      	movs	r1, #65	@ 0x41
 8002a0a:	5c52      	ldrb	r2, [r2, r1]
 8002a0c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2242      	movs	r2, #66	@ 0x42
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a72      	ldr	r2, [pc, #456]	@ (8002be4 <I2C_ITError+0x1ec>)
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a2e:	183b      	adds	r3, r7, r0
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b28      	cmp	r3, #40	@ 0x28
 8002a34:	d007      	beq.n	8002a46 <I2C_ITError+0x4e>
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b29      	cmp	r3, #41	@ 0x29
 8002a3c:	d003      	beq.n	8002a46 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a44:	d10c      	bne.n	8002a60 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2103      	movs	r1, #3
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fa04 	bl	8002e58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2241      	movs	r2, #65	@ 0x41
 8002a54:	2128      	movs	r1, #40	@ 0x28
 8002a56:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a63      	ldr	r2, [pc, #396]	@ (8002be8 <I2C_ITError+0x1f0>)
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a5e:	e032      	b.n	8002ac6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a60:	4a62      	ldr	r2, [pc, #392]	@ (8002bec <I2C_ITError+0x1f4>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f9f6 	bl	8002e58 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f8ed 	bl	8002c4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2241      	movs	r2, #65	@ 0x41
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b60      	cmp	r3, #96	@ 0x60
 8002a7e:	d01f      	beq.n	8002ac0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2241      	movs	r2, #65	@ 0x41
 8002a84:	2120      	movs	r1, #32
 8002a86:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d114      	bne.n	8002ac0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d109      	bne.n	8002ab8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2220      	movs	r2, #32
 8002abe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d03b      	beq.n	8002b4c <I2C_ITError+0x154>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d002      	beq.n	8002ae0 <I2C_ITError+0xe8>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b21      	cmp	r3, #33	@ 0x21
 8002ade:	d135      	bne.n	8002b4c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	01db      	lsls	r3, r3, #7
 8002aea:	401a      	ands	r2, r3
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	493c      	ldr	r1, [pc, #240]	@ (8002bf0 <I2C_ITError+0x1f8>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7fe fb17 	bl	800113c <HAL_DMA_GetState>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d016      	beq.n	8002b42 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	4a36      	ldr	r2, [pc, #216]	@ (8002bf4 <I2C_ITError+0x1fc>)
 8002b1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fe fa8d 	bl	8001048 <HAL_DMA_Abort_IT>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d051      	beq.n	8002bd6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b40:	e049      	b.n	8002bd6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f859 	bl	8002bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b4a:	e044      	b.n	8002bd6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03b      	beq.n	8002bcc <I2C_ITError+0x1d4>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d002      	beq.n	8002b60 <I2C_ITError+0x168>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b22      	cmp	r3, #34	@ 0x22
 8002b5e:	d135      	bne.n	8002bcc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	491e      	ldr	r1, [pc, #120]	@ (8002bf8 <I2C_ITError+0x200>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fe fad7 	bl	800113c <HAL_DMA_GetState>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d016      	beq.n	8002bc2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <I2C_ITError+0x1fc>)
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7fe fa4d 	bl	8001048 <HAL_DMA_Abort_IT>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d013      	beq.n	8002bda <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bc0:	e00b      	b.n	8002bda <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f819 	bl	8002bfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bca:	e006      	b.n	8002bda <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f814 	bl	8002bfc <I2C_TreatErrorCallback>
  }
}
 8002bd4:	e002      	b.n	8002bdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	e000      	b.n	8002bdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bda:	46c0      	nop			@ (mov r8, r8)
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	ffff0000 	.word	0xffff0000
 8002be8:	08001a9d 	.word	0x08001a9d
 8002bec:	00008003 	.word	0x00008003
 8002bf0:	ffffbfff 	.word	0xffffbfff
 8002bf4:	08002c93 	.word	0x08002c93
 8002bf8:	ffff7fff 	.word	0xffff7fff

08002bfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2241      	movs	r2, #65	@ 0x41
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b60      	cmp	r3, #96	@ 0x60
 8002c0e:	d10f      	bne.n	8002c30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2241      	movs	r2, #65	@ 0x41
 8002c14:	2120      	movs	r1, #32
 8002c16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2240      	movs	r2, #64	@ 0x40
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe ff24 	bl	8001a76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c2e:	e00a      	b.n	8002c46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd fd8b 	bl	800075c <HAL_I2C_ErrorCallback>
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d103      	bne.n	8002c6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2201      	movs	r2, #1
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d007      	beq.n	8002c8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430a      	orrs	r2, r1
 8002c88:	619a      	str	r2, [r3, #24]
  }
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	2200      	movs	r2, #0
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff ff9a 	bl	8002bfc <I2C_TreatErrorCallback>
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	0008      	movs	r0, r1
 8002cda:	0011      	movs	r1, r2
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	240a      	movs	r4, #10
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	1c02      	adds	r2, r0, #0
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	2009      	movs	r0, #9
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	1c0a      	adds	r2, r1, #0
 8002cec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	059b      	lsls	r3, r3, #22
 8002cf4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	0419      	lsls	r1, r3, #16
 8002cfc:	23ff      	movs	r3, #255	@ 0xff
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d1a:	0d51      	lsrs	r1, r2, #21
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	00d2      	lsls	r2, r2, #3
 8002d20:	400a      	ands	r2, r1
 8002d22:	4907      	ldr	r1, [pc, #28]	@ (8002d40 <I2C_TransferConfig+0x70>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	43d2      	mvns	r2, r2
 8002d28:	401a      	ands	r2, r3
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b007      	add	sp, #28
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	03ff63ff 	.word	0x03ff63ff

08002d44 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e4c <I2C_Enable_IRQ+0x108>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d035      	beq.n	8002dcc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <I2C_Enable_IRQ+0x10c>)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d030      	beq.n	8002dcc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002d6e:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <I2C_Enable_IRQ+0x110>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d02b      	beq.n	8002dcc <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d74:	1cbb      	adds	r3, r7, #2
 8002d76:	2200      	movs	r2, #0
 8002d78:	5e9b      	ldrsh	r3, [r3, r2]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da03      	bge.n	8002d86 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	22b8      	movs	r2, #184	@ 0xb8
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d86:	1cbb      	adds	r3, r7, #2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	22f2      	movs	r2, #242	@ 0xf2
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d98:	1cbb      	adds	r3, r7, #2
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d003      	beq.n	8002daa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	22f4      	movs	r2, #244	@ 0xf4
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002daa:	1cbb      	adds	r3, r7, #2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d103      	bne.n	8002dba <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2290      	movs	r2, #144	@ 0x90
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dba:	1cbb      	adds	r3, r7, #2
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d137      	bne.n	8002e32 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dca:	e032      	b.n	8002e32 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002dcc:	1cbb      	adds	r3, r7, #2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da03      	bge.n	8002dde <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	22b8      	movs	r2, #184	@ 0xb8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002dde:	1cbb      	adds	r3, r7, #2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d003      	beq.n	8002df0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	22f2      	movs	r2, #242	@ 0xf2
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002df0:	1cbb      	adds	r3, r7, #2
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d003      	beq.n	8002e02 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	22f4      	movs	r2, #244	@ 0xf4
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e02:	1cbb      	adds	r3, r7, #2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d103      	bne.n	8002e12 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2290      	movs	r2, #144	@ 0x90
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e12:	1cbb      	adds	r3, r7, #2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d103      	bne.n	8002e22 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2260      	movs	r2, #96	@ 0x60
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e22:	1cbb      	adds	r3, r7, #2
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	2b40      	cmp	r3, #64	@ 0x40
 8002e28:	d103      	bne.n	8002e32 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	08001c9d 	.word	0x08001c9d
 8002e50:	080020ed 	.word	0x080020ed
 8002e54:	08001e95 	.word	0x08001e95

08002e58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	000a      	movs	r2, r1
 8002e62:	1cbb      	adds	r3, r7, #2
 8002e64:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e6a:	1cbb      	adds	r3, r7, #2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d010      	beq.n	8002e96 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2242      	movs	r2, #66	@ 0x42
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2241      	movs	r2, #65	@ 0x41
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	001a      	movs	r2, r3
 8002e86:	2328      	movs	r3, #40	@ 0x28
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b28      	cmp	r3, #40	@ 0x28
 8002e8c:	d003      	beq.n	8002e96 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	22b0      	movs	r2, #176	@ 0xb0
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e96:	1cbb      	adds	r3, r7, #2
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d010      	beq.n	8002ec2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2244      	movs	r2, #68	@ 0x44
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2241      	movs	r2, #65	@ 0x41
 8002eac:	5c9b      	ldrb	r3, [r3, r2]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	2328      	movs	r3, #40	@ 0x28
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b28      	cmp	r3, #40	@ 0x28
 8002eb8:	d003      	beq.n	8002ec2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22b0      	movs	r2, #176	@ 0xb0
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da03      	bge.n	8002ed4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	22b8      	movs	r2, #184	@ 0xb8
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ed4:	1cbb      	adds	r3, r7, #2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d103      	bne.n	8002ee4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2290      	movs	r2, #144	@ 0x90
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ee4:	1cbb      	adds	r3, r7, #2
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d103      	bne.n	8002ef4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ef4:	1cbb      	adds	r3, r7, #2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d103      	bne.n	8002f04 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2240      	movs	r2, #64	@ 0x40
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43d9      	mvns	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	400a      	ands	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2241      	movs	r2, #65	@ 0x41
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d138      	bne.n	8002fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2240      	movs	r2, #64	@ 0x40
 8002f3a:	5c9b      	ldrb	r3, [r3, r2]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e032      	b.n	8002faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2240      	movs	r2, #64	@ 0x40
 8002f48:	2101      	movs	r1, #1
 8002f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2241      	movs	r2, #65	@ 0x41
 8002f50:	2124      	movs	r1, #36	@ 0x24
 8002f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4911      	ldr	r1, [pc, #68]	@ (8002fb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2241      	movs	r2, #65	@ 0x41
 8002f98:	2120      	movs	r1, #32
 8002f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2240      	movs	r2, #64	@ 0x40
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	ffffefff 	.word	0xffffefff

08002fb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2241      	movs	r2, #65	@ 0x41
 8002fc6:	5c9b      	ldrb	r3, [r3, r2]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d139      	bne.n	8003042 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e033      	b.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	@ 0x40
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2241      	movs	r2, #65	@ 0x41
 8002fe8:	2124      	movs	r1, #36	@ 0x24
 8002fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a11      	ldr	r2, [pc, #68]	@ (800304c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003008:	4013      	ands	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2241      	movs	r2, #65	@ 0x41
 8003032:	2120      	movs	r1, #32
 8003034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b004      	add	sp, #16
 800304a:	bd80      	pop	{r7, pc}
 800304c:	fffff0ff 	.word	0xfffff0ff

08003050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1d0      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d100      	bne.n	800306e <HAL_RCC_OscConfig+0x1e>
 800306c:	e069      	b.n	8003142 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306e:	4bc8      	ldr	r3, [pc, #800]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2238      	movs	r2, #56	@ 0x38
 8003074:	4013      	ands	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b08      	cmp	r3, #8
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d15d      	bne.n	8003142 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1bc      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	025b      	lsls	r3, r3, #9
 8003092:	429a      	cmp	r2, r3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_OscConfig+0x56>
 8003096:	4bbe      	ldr	r3, [pc, #760]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4bbd      	ldr	r3, [pc, #756]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	0249      	lsls	r1, r1, #9
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e020      	b.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	23a0      	movs	r3, #160	@ 0xa0
 80030ac:	02db      	lsls	r3, r3, #11
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d10e      	bne.n	80030d0 <HAL_RCC_OscConfig+0x80>
 80030b2:	4bb7      	ldr	r3, [pc, #732]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4bb6      	ldr	r3, [pc, #728]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	02c9      	lsls	r1, r1, #11
 80030bc:	430a      	orrs	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	4bb3      	ldr	r3, [pc, #716]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4bb2      	ldr	r3, [pc, #712]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030c6:	2180      	movs	r1, #128	@ 0x80
 80030c8:	0249      	lsls	r1, r1, #9
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030d0:	4baf      	ldr	r3, [pc, #700]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4bae      	ldr	r3, [pc, #696]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030d6:	49af      	ldr	r1, [pc, #700]	@ (8003394 <HAL_RCC_OscConfig+0x344>)
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	4bac      	ldr	r3, [pc, #688]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4bab      	ldr	r3, [pc, #684]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80030e2:	49ad      	ldr	r1, [pc, #692]	@ (8003398 <HAL_RCC_OscConfig+0x348>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d014      	beq.n	800311a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fe9e 	bl	8000e30 <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030fa:	f7fd fe99 	bl	8000e30 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	@ 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e17b      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310c:	4ba0      	ldr	r3, [pc, #640]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	4013      	ands	r3, r2
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0xaa>
 8003118:	e013      	b.n	8003142 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fd fe89 	bl	8000e30 <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003124:	f7fd fe84 	bl	8000e30 <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	@ 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e166      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003136:	4b96      	ldr	r3, [pc, #600]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	029b      	lsls	r3, r3, #10
 800313e:	4013      	ands	r3, r2
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d100      	bne.n	800314e <HAL_RCC_OscConfig+0xfe>
 800314c:	e086      	b.n	800325c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314e:	4b90      	ldr	r3, [pc, #576]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2238      	movs	r2, #56	@ 0x38
 8003154:	4013      	ands	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d12f      	bne.n	80031be <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e14c      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b89      	ldr	r3, [pc, #548]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a8b      	ldr	r2, [pc, #556]	@ (800339c <HAL_RCC_OscConfig+0x34c>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	4b85      	ldr	r3, [pc, #532]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003186:	4b82      	ldr	r3, [pc, #520]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a85      	ldr	r2, [pc, #532]	@ (80033a0 <HAL_RCC_OscConfig+0x350>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	4b7e      	ldr	r3, [pc, #504]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800319a:	4b7d      	ldr	r3, [pc, #500]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0adb      	lsrs	r3, r3, #11
 80031a0:	2207      	movs	r2, #7
 80031a2:	4013      	ands	r3, r2
 80031a4:	4a7f      	ldr	r2, [pc, #508]	@ (80033a4 <HAL_RCC_OscConfig+0x354>)
 80031a6:	40da      	lsrs	r2, r3
 80031a8:	4b7f      	ldr	r3, [pc, #508]	@ (80033a8 <HAL_RCC_OscConfig+0x358>)
 80031aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031ac:	4b7f      	ldr	r3, [pc, #508]	@ (80033ac <HAL_RCC_OscConfig+0x35c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fd fde1 	bl	8000d78 <HAL_InitTick>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d050      	beq.n	800325c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e122      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d030      	beq.n	8003228 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031c6:	4b72      	ldr	r3, [pc, #456]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a75      	ldr	r2, [pc, #468]	@ (80033a0 <HAL_RCC_OscConfig+0x350>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80031da:	4b6d      	ldr	r3, [pc, #436]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b6c      	ldr	r3, [pc, #432]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80031e0:	2180      	movs	r1, #128	@ 0x80
 80031e2:	0049      	lsls	r1, r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fd fe22 	bl	8000e30 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031f2:	f7fd fe1d 	bl	8000e30 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0ff      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003204:	4b62      	ldr	r3, [pc, #392]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4013      	ands	r3, r2
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003210:	4b5f      	ldr	r3, [pc, #380]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a61      	ldr	r2, [pc, #388]	@ (800339c <HAL_RCC_OscConfig+0x34c>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	4b5b      	ldr	r3, [pc, #364]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e019      	b.n	800325c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003228:	4b59      	ldr	r3, [pc, #356]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b58      	ldr	r3, [pc, #352]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800322e:	4960      	ldr	r1, [pc, #384]	@ (80033b0 <HAL_RCC_OscConfig+0x360>)
 8003230:	400a      	ands	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fd fdfc 	bl	8000e30 <HAL_GetTick>
 8003238:	0003      	movs	r3, r0
 800323a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800323e:	f7fd fdf7 	bl	8000e30 <HAL_GetTick>
 8003242:	0002      	movs	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0d9      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003250:	4b4f      	ldr	r3, [pc, #316]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4013      	ands	r3, r2
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2208      	movs	r2, #8
 8003262:	4013      	ands	r3, r2
 8003264:	d042      	beq.n	80032ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003266:	4b4a      	ldr	r3, [pc, #296]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2238      	movs	r2, #56	@ 0x38
 800326c:	4013      	ands	r3, r2
 800326e:	2b18      	cmp	r3, #24
 8003270:	d105      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d138      	bne.n	80032ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0c2      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003286:	4b42      	ldr	r3, [pc, #264]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003288:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fd fdcd 	bl	8000e30 <HAL_GetTick>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800329c:	f7fd fdc8 	bl	8000e30 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0aa      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	2202      	movs	r2, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	d0f1      	beq.n	800329c <HAL_RCC_OscConfig+0x24c>
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80032ba:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80032bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032be:	4b34      	ldr	r3, [pc, #208]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	438a      	bics	r2, r1
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fd fdb3 	bl	8000e30 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80032d0:	f7fd fdae 	bl	8000e30 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e090      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80032e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d1f1      	bne.n	80032d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	4013      	ands	r3, r2
 80032f4:	d100      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2a8>
 80032f6:	e084      	b.n	8003402 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	230f      	movs	r3, #15
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003300:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2238      	movs	r2, #56	@ 0x38
 8003306:	4013      	ands	r3, r2
 8003308:	2b20      	cmp	r3, #32
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d000      	beq.n	8003316 <HAL_RCC_OscConfig+0x2c6>
 8003314:	e075      	b.n	8003402 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e074      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x2e0>
 8003322:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003324:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003326:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003328:	2101      	movs	r1, #1
 800332a:	430a      	orrs	r2, r1
 800332c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x31a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x302>
 8003338:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800333a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800333c:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800333e:	2104      	movs	r1, #4
 8003340:	430a      	orrs	r2, r1
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003346:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003348:	4b11      	ldr	r3, [pc, #68]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x31a>
 8003352:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003354:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003356:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003358:	2101      	movs	r1, #1
 800335a:	438a      	bics	r2, r1
 800335c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003360:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003362:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_OscConfig+0x340>)
 8003364:	2104      	movs	r1, #4
 8003366:	438a      	bics	r2, r1
 8003368:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d028      	beq.n	80033c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fd fd5d 	bl	8000e30 <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fd fd58 	bl	8000e30 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	4a0b      	ldr	r2, [pc, #44]	@ (80033b4 <HAL_RCC_OscConfig+0x364>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d915      	bls.n	80033b8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e039      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
 8003390:	40021000 	.word	0x40021000
 8003394:	fffeffff 	.word	0xfffeffff
 8003398:	fffbffff 	.word	0xfffbffff
 800339c:	ffff80ff 	.word	0xffff80ff
 80033a0:	ffffc7ff 	.word	0xffffc7ff
 80033a4:	02dc6c00 	.word	0x02dc6c00
 80033a8:	20000004 	.word	0x20000004
 80033ac:	20000008 	.word	0x20000008
 80033b0:	fffffeff 	.word	0xfffffeff
 80033b4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_RCC_OscConfig+0x3bc>)
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	d0dc      	beq.n	800337c <HAL_RCC_OscConfig+0x32c>
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fd34 	bl	8000e30 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80033cc:	e009      	b.n	80033e2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fd2f 	bl	8000e30 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <HAL_RCC_OscConfig+0x3c0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e010      	b.n	8003404 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_OscConfig+0x3bc>)
 80033e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033ec:	230f      	movs	r3, #15
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_RCC_OscConfig+0x3bc>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033fa:	4b04      	ldr	r3, [pc, #16]	@ (800340c <HAL_RCC_OscConfig+0x3bc>)
 80033fc:	4905      	ldr	r1, [pc, #20]	@ (8003414 <HAL_RCC_OscConfig+0x3c4>)
 80033fe:	400a      	ands	r2, r1
 8003400:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	00001388 	.word	0x00001388
 8003414:	efffffff 	.word	0xefffffff

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0e9      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b76      	ldr	r3, [pc, #472]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2207      	movs	r2, #7
 8003432:	4013      	ands	r3, r2
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d91e      	bls.n	8003478 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2207      	movs	r2, #7
 8003440:	4393      	bics	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	4b70      	ldr	r3, [pc, #448]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800344c:	f7fd fcf0 	bl	8000e30 <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003454:	e009      	b.n	800346a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003456:	f7fd fceb 	bl	8000e30 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	4a6a      	ldr	r2, [pc, #424]	@ (800360c <HAL_RCC_ClockConfig+0x1f4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0ca      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800346a:	4b67      	ldr	r3, [pc, #412]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2207      	movs	r2, #7
 8003470:	4013      	ands	r3, r2
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d1ee      	bne.n	8003456 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2202      	movs	r2, #2
 800347e:	4013      	ands	r3, r2
 8003480:	d017      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2204      	movs	r2, #4
 8003488:	4013      	ands	r3, r2
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800348c:	4b60      	ldr	r3, [pc, #384]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a60      	ldr	r2, [pc, #384]	@ (8003614 <HAL_RCC_ClockConfig+0x1fc>)
 8003492:	401a      	ands	r2, r3
 8003494:	4b5e      	ldr	r3, [pc, #376]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 8003496:	21b0      	movs	r1, #176	@ 0xb0
 8003498:	0109      	lsls	r1, r1, #4
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349e:	4b5c      	ldr	r3, [pc, #368]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003618 <HAL_RCC_ClockConfig+0x200>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4b58      	ldr	r3, [pc, #352]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4013      	ands	r3, r2
 80034ba:	d055      	beq.n	8003568 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80034bc:	4b54      	ldr	r3, [pc, #336]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	221c      	movs	r2, #28
 80034c2:	4393      	bics	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4b51      	ldr	r3, [pc, #324]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	4013      	ands	r3, r2
 80034e2:	d11f      	bne.n	8003524 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e08b      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f0:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	d113      	bne.n	8003524 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e07f      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d106      	bne.n	8003516 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003508:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 800350a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350c:	2202      	movs	r2, #2
 800350e:	4013      	ands	r3, r2
 8003510:	d108      	bne.n	8003524 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e074      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e06d      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003524:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2207      	movs	r2, #7
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fd fc7a 	bl	8000e30 <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003540:	e009      	b.n	8003556 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003542:	f7fd fc75 	bl	8000e30 <HAL_GetTick>
 8003546:	0002      	movs	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <HAL_RCC_ClockConfig+0x1f4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e054      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2e      	ldr	r3, [pc, #184]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2238      	movs	r2, #56	@ 0x38
 800355c:	401a      	ands	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	429a      	cmp	r2, r3
 8003566:	d1ec      	bne.n	8003542 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2207      	movs	r2, #7
 800356e:	4013      	ands	r3, r2
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d21e      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2207      	movs	r2, #7
 800357c:	4393      	bics	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003588:	f7fd fc52 	bl	8000e30 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003590:	e009      	b.n	80035a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003592:	f7fd fc4d 	bl	8000e30 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	4a1b      	ldr	r2, [pc, #108]	@ (800360c <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e02c      	b.n	8003600 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035a6:	4b18      	ldr	r3, [pc, #96]	@ (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2207      	movs	r2, #7
 80035ac:	4013      	ands	r3, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035be:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_RCC_ClockConfig+0x204>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80035d2:	f000 f82b 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035d6:	0001      	movs	r1, r0
 80035d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	220f      	movs	r2, #15
 80035e0:	401a      	ands	r2, r3
 80035e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HAL_RCC_ClockConfig+0x208>)
 80035e4:	0092      	lsls	r2, r2, #2
 80035e6:	58d3      	ldr	r3, [r2, r3]
 80035e8:	221f      	movs	r2, #31
 80035ea:	4013      	ands	r3, r2
 80035ec:	000a      	movs	r2, r1
 80035ee:	40da      	lsrs	r2, r3
 80035f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <HAL_RCC_ClockConfig+0x20c>)
 80035f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <HAL_RCC_ClockConfig+0x210>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fd fbbd 	bl	8000d78 <HAL_InitTick>
 80035fe:	0003      	movs	r3, r0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b004      	add	sp, #16
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40022000 	.word	0x40022000
 800360c:	00001388 	.word	0x00001388
 8003610:	40021000 	.word	0x40021000
 8003614:	ffff84ff 	.word	0xffff84ff
 8003618:	fffff0ff 	.word	0xfffff0ff
 800361c:	ffff8fff 	.word	0xffff8fff
 8003620:	08003eb8 	.word	0x08003eb8
 8003624:	20000004 	.word	0x20000004
 8003628:	20000008 	.word	0x20000008

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003632:	4b1c      	ldr	r3, [pc, #112]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2238      	movs	r2, #56	@ 0x38
 8003638:	4013      	ands	r3, r2
 800363a:	d10f      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x78>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0adb      	lsrs	r3, r3, #11
 8003642:	2207      	movs	r2, #7
 8003644:	4013      	ands	r3, r2
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800364e:	6839      	ldr	r1, [r7, #0]
 8003650:	4815      	ldr	r0, [pc, #84]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003652:	f7fc fd59 	bl	8000108 <__udivsi3>
 8003656:	0003      	movs	r3, r0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e01e      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x78>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2238      	movs	r2, #56	@ 0x38
 8003662:	4013      	ands	r3, r2
 8003664:	2b08      	cmp	r3, #8
 8003666:	d102      	bne.n	800366e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003668:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <HAL_RCC_GetSysClockFreq+0x80>)
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e015      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2238      	movs	r2, #56	@ 0x38
 8003674:	4013      	ands	r3, r2
 8003676:	2b20      	cmp	r3, #32
 8003678:	d103      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	e00b      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2238      	movs	r2, #56	@ 0x38
 8003688:	4013      	ands	r3, r2
 800368a:	2b18      	cmp	r3, #24
 800368c:	d103      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800368e:	23fa      	movs	r3, #250	@ 0xfa
 8003690:	01db      	lsls	r3, r3, #7
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e001      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800369a:	687b      	ldr	r3, [r7, #4]
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	02dc6c00 	.word	0x02dc6c00
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036b8:	2313      	movs	r3, #19
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c0:	2312      	movs	r3, #18
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	029b      	lsls	r3, r3, #10
 80036d0:	4013      	ands	r3, r2
 80036d2:	d100      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036d4:	e079      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2011      	movs	r0, #17
 80036d8:	183b      	adds	r3, r7, r0
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b64      	ldr	r3, [pc, #400]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	055b      	lsls	r3, r3, #21
 80036e6:	4013      	ands	r3, r2
 80036e8:	d110      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	4b61      	ldr	r3, [pc, #388]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ee:	4b60      	ldr	r3, [pc, #384]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036f0:	2180      	movs	r1, #128	@ 0x80
 80036f2:	0549      	lsls	r1, r1, #21
 80036f4:	430a      	orrs	r2, r1
 80036f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036f8:	4b5d      	ldr	r3, [pc, #372]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	055b      	lsls	r3, r3, #21
 8003700:	4013      	ands	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	183b      	adds	r3, r7, r0
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800370c:	4b58      	ldr	r3, [pc, #352]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800370e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003710:	23c0      	movs	r3, #192	@ 0xc0
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4013      	ands	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d019      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d014      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003728:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	4a51      	ldr	r2, [pc, #324]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800372e:	4013      	ands	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	4b4f      	ldr	r3, [pc, #316]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003736:	4b4e      	ldr	r3, [pc, #312]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	0249      	lsls	r1, r1, #9
 800373c:	430a      	orrs	r2, r1
 800373e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003740:	4b4b      	ldr	r3, [pc, #300]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003742:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003744:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003746:	494c      	ldr	r1, [pc, #304]	@ (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003748:	400a      	ands	r2, r1
 800374a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800374c:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2201      	movs	r2, #1
 8003756:	4013      	ands	r3, r2
 8003758:	d016      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fb69 	bl	8000e30 <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003762:	e00c      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd fb64 	bl	8000e30 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	4a43      	ldr	r2, [pc, #268]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d904      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003774:	2313      	movs	r3, #19
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	2203      	movs	r2, #3
 800377a:	701a      	strb	r2, [r3, #0]
          break;
 800377c:	e004      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800377e:	4b3c      	ldr	r3, [pc, #240]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d0ed      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003788:	2313      	movs	r3, #19
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003792:	4b37      	ldr	r3, [pc, #220]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	4a37      	ldr	r2, [pc, #220]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	4b33      	ldr	r3, [pc, #204]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037a6:	e005      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a8:	2312      	movs	r3, #18
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2213      	movs	r2, #19
 80037ae:	18ba      	adds	r2, r7, r2
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b4:	2311      	movs	r3, #17
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037c4:	492e      	ldr	r1, [pc, #184]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2201      	movs	r2, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	2203      	movs	r2, #3
 80037da:	4393      	bics	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037e4:	430a      	orrs	r2, r1
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2240      	movs	r2, #64	@ 0x40
 80037ee:	4013      	ands	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	4a23      	ldr	r2, [pc, #140]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003802:	430a      	orrs	r2, r1
 8003804:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	01db      	lsls	r3, r3, #7
 800380e:	4013      	ands	r3, r2
 8003810:	d008      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003812:	4b17      	ldr	r3, [pc, #92]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	0899      	lsrs	r1, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003820:	430a      	orrs	r2, r1
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4013      	ands	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003840:	430a      	orrs	r2, r1
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	da09      	bge.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	22e0      	movs	r2, #224	@ 0xe0
 8003852:	4393      	bics	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003860:	2312      	movs	r3, #18
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	781b      	ldrb	r3, [r3, #0]
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b006      	add	sp, #24
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	40021000 	.word	0x40021000
 8003874:	fffffcff 	.word	0xfffffcff
 8003878:	fffeffff 	.word	0xfffeffff
 800387c:	00001388 	.word	0x00001388
 8003880:	efffffff 	.word	0xefffffff
 8003884:	ffffcfff 	.word	0xffffcfff
 8003888:	ffff3fff 	.word	0xffff3fff

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e04a      	b.n	8003934 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	223d      	movs	r2, #61	@ 0x3d
 80038a2:	5c9b      	ldrb	r3, [r3, r2]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	223c      	movs	r2, #60	@ 0x3c
 80038ae:	2100      	movs	r1, #0
 80038b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fd f9c1 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223d      	movs	r2, #61	@ 0x3d
 80038be:	2102      	movs	r1, #2
 80038c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f000 f951 	bl	8003b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2248      	movs	r2, #72	@ 0x48
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	223e      	movs	r2, #62	@ 0x3e
 80038de:	2101      	movs	r1, #1
 80038e0:	5499      	strb	r1, [r3, r2]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	223f      	movs	r2, #63	@ 0x3f
 80038e6:	2101      	movs	r1, #1
 80038e8:	5499      	strb	r1, [r3, r2]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2240      	movs	r2, #64	@ 0x40
 80038ee:	2101      	movs	r1, #1
 80038f0:	5499      	strb	r1, [r3, r2]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2241      	movs	r2, #65	@ 0x41
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2242      	movs	r2, #66	@ 0x42
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2243      	movs	r2, #67	@ 0x43
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2244      	movs	r2, #68	@ 0x44
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2245      	movs	r2, #69	@ 0x45
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2246      	movs	r2, #70	@ 0x46
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2247      	movs	r2, #71	@ 0x47
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	223d      	movs	r2, #61	@ 0x3d
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223d      	movs	r2, #61	@ 0x3d
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e02f      	b.n	80039b4 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	223d      	movs	r2, #61	@ 0x3d
 8003958:	2102      	movs	r1, #2
 800395a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <HAL_TIM_Base_Start+0x80>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_TIM_Base_Start+0x34>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <HAL_TIM_Base_Start+0x84>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d116      	bne.n	800399e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_TIM_Base_Start+0x88>)
 8003978:	4013      	ands	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d016      	beq.n	80039b0 <HAL_TIM_Base_Start+0x74>
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	429a      	cmp	r2, r3
 800398a:	d011      	beq.n	80039b0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399c:	e008      	b.n	80039b0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2101      	movs	r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e000      	b.n	80039b2 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	230f      	movs	r3, #15
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	223c      	movs	r2, #60	@ 0x3c
 80039de:	5c9b      	ldrb	r3, [r3, r2]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_ConfigClockSource+0x20>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0bc      	b.n	8003b62 <HAL_TIM_ConfigClockSource+0x19a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	223c      	movs	r2, #60	@ 0x3c
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	223d      	movs	r2, #61	@ 0x3d
 80039f4:	2102      	movs	r1, #2
 80039f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a5a      	ldr	r2, [pc, #360]	@ (8003b6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a59      	ldr	r2, [pc, #356]	@ (8003b70 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2280      	movs	r2, #128	@ 0x80
 8003a1e:	0192      	lsls	r2, r2, #6
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d040      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xde>
 8003a24:	2280      	movs	r2, #128	@ 0x80
 8003a26:	0192      	lsls	r2, r2, #6
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x66>
 8003a2c:	e088      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2280      	movs	r2, #128	@ 0x80
 8003a30:	0152      	lsls	r2, r2, #5
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d100      	bne.n	8003a38 <HAL_TIM_ConfigClockSource+0x70>
 8003a36:	e088      	b.n	8003b4a <HAL_TIM_ConfigClockSource+0x182>
 8003a38:	2280      	movs	r2, #128	@ 0x80
 8003a3a:	0152      	lsls	r2, r2, #5
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d900      	bls.n	8003a42 <HAL_TIM_ConfigClockSource+0x7a>
 8003a40:	e07e      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a42:	2b70      	cmp	r3, #112	@ 0x70
 8003a44:	d018      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xb0>
 8003a46:	d900      	bls.n	8003a4a <HAL_TIM_ConfigClockSource+0x82>
 8003a48:	e07a      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a4a:	2b60      	cmp	r3, #96	@ 0x60
 8003a4c:	d04f      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x126>
 8003a4e:	d900      	bls.n	8003a52 <HAL_TIM_ConfigClockSource+0x8a>
 8003a50:	e076      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a52:	2b50      	cmp	r3, #80	@ 0x50
 8003a54:	d03b      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x106>
 8003a56:	d900      	bls.n	8003a5a <HAL_TIM_ConfigClockSource+0x92>
 8003a58:	e072      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d057      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x146>
 8003a5e:	d900      	bls.n	8003a62 <HAL_TIM_ConfigClockSource+0x9a>
 8003a60:	e06e      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a62:	2b30      	cmp	r3, #48	@ 0x30
 8003a64:	d063      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x166>
 8003a66:	d86b      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d060      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x166>
 8003a6c:	d868      	bhi.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d05d      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x166>
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d05b      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0x166>
 8003a76:	e063      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	f000 f95c 	bl	8003d44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2277      	movs	r2, #119	@ 0x77
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
      break;
 8003aa4:	e052      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab6:	f000 f945 	bl	8003d44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2180      	movs	r1, #128	@ 0x80
 8003ac6:	01c9      	lsls	r1, r1, #7
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
      break;
 8003acc:	e03e      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	001a      	movs	r2, r3
 8003adc:	f000 f8b6 	bl	8003c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2150      	movs	r1, #80	@ 0x50
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f910 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003aec:	e02e      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afa:	001a      	movs	r2, r3
 8003afc:	f000 f8d4 	bl	8003ca8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2160      	movs	r1, #96	@ 0x60
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f900 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e01e      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	f000 f896 	bl	8003c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2140      	movs	r1, #64	@ 0x40
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 f8f0 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003b2c:	e00e      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f000 f8e7 	bl	8003d0c <TIM_ITRx_SetConfig>
      break;
 8003b3e:	e005      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
      break;
 8003b48:	e000      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b4a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	223d      	movs	r2, #61	@ 0x3d
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	223c      	movs	r2, #60	@ 0x3c
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	781b      	ldrb	r3, [r3, #0]
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b004      	add	sp, #16
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	ffceff88 	.word	0xffceff88
 8003b70:	ffff00ff 	.word	0xffff00ff

08003b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2b      	ldr	r2, [pc, #172]	@ (8003c34 <TIM_Base_SetConfig+0xc0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_Base_SetConfig+0x20>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c38 <TIM_Base_SetConfig+0xc4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d108      	bne.n	8003ba6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2270      	movs	r2, #112	@ 0x70
 8003b98:	4393      	bics	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <TIM_Base_SetConfig+0xc0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0x5a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <TIM_Base_SetConfig+0xc4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x5a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <TIM_Base_SetConfig+0xc8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x5a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <TIM_Base_SetConfig+0xcc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x5a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c44 <TIM_Base_SetConfig+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c48 <TIM_Base_SetConfig+0xd4>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2280      	movs	r2, #128	@ 0x80
 8003be4:	4393      	bics	r3, r2
 8003be6:	001a      	movs	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <TIM_Base_SetConfig+0xc0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0xaa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a0b      	ldr	r2, [pc, #44]	@ (8003c40 <TIM_Base_SetConfig+0xcc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0xaa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <TIM_Base_SetConfig+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d103      	bne.n	8003c26 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	615a      	str	r2, [r3, #20]
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b004      	add	sp, #16
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40002000 	.word	0x40002000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800
 8003c48:	fffffcff 	.word	0xfffffcff

08003c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	2201      	movs	r2, #1
 8003c64:	4393      	bics	r3, r2
 8003c66:	001a      	movs	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	22f0      	movs	r2, #240	@ 0xf0
 8003c76:	4393      	bics	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	220a      	movs	r2, #10
 8003c88:	4393      	bics	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	46c0      	nop			@ (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b006      	add	sp, #24
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d08 <TIM_TI2_ConfigInputStage+0x60>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	22a0      	movs	r2, #160	@ 0xa0
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b006      	add	sp, #24
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	ffff0fff 	.word	0xffff0fff

08003d0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a08      	ldr	r2, [pc, #32]	@ (8003d40 <TIM_ITRx_SetConfig+0x34>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	ffcfff8f 	.word	0xffcfff8f

08003d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <TIM_ETR_SetConfig+0x3c>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	ffff00ff 	.word	0xffff00ff

08003d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223c      	movs	r2, #60	@ 0x3c
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e04a      	b.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223c      	movs	r2, #60	@ 0x3c
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223d      	movs	r2, #61	@ 0x3d
 8003da8:	2102      	movs	r1, #2
 8003daa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2270      	movs	r2, #112	@ 0x70
 8003ddc:	4393      	bics	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223d      	movs	r2, #61	@ 0x3d
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223c      	movs	r2, #60	@ 0x3c
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b004      	add	sp, #16
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	ff0fffff 	.word	0xff0fffff
 8003e44:	40000400 	.word	0x40000400

08003e48 <memset>:
 8003e48:	0003      	movs	r3, r0
 8003e4a:	1882      	adds	r2, r0, r2
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	7019      	strb	r1, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	4c0c      	ldr	r4, [pc, #48]	@ (8003e90 <__libc_init_array+0x38>)
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e94 <__libc_init_array+0x3c>)
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	f000 f819 	bl	8003ea0 <_init>
 8003e6e:	4c0a      	ldr	r4, [pc, #40]	@ (8003e98 <__libc_init_array+0x40>)
 8003e70:	4d0a      	ldr	r5, [pc, #40]	@ (8003e9c <__libc_init_array+0x44>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	00b3      	lsls	r3, r6, #2
 8003e7e:	58eb      	ldr	r3, [r5, r3]
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	00b3      	lsls	r3, r6, #2
 8003e88:	58eb      	ldr	r3, [r5, r3]
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08003ef8 	.word	0x08003ef8
 8003e94:	08003ef8 	.word	0x08003ef8
 8003e98:	08003efc 	.word	0x08003efc
 8003e9c:	08003ef8 	.word	0x08003ef8

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
